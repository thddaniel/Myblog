{"Asset":[{"_id":"source\\CNAME","path":"CNAME","modified":false},{"_id":"themes\\yilia\\source\\img\\anonymous.jpg","path":"img/anonymous.jpg","modified":false},{"_id":"themes\\yilia\\source\\img\\coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes\\yilia\\source\\img\\delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes\\yilia\\source\\img\\email.png","path":"img/email.png","modified":false},{"_id":"themes\\yilia\\source\\img\\facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes\\yilia\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes\\yilia\\source\\img\\github.png","path":"img/github.png","modified":false},{"_id":"themes\\yilia\\source\\img\\google.png","path":"img/google.png","modified":false},{"_id":"themes\\yilia\\source\\img\\img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes\\yilia\\source\\img\\img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes\\yilia\\source\\img\\linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes\\yilia\\source\\img\\pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes\\yilia\\source\\img\\pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes\\yilia\\source\\img\\quora.png","path":"img/quora.png","modified":false},{"_id":"themes\\yilia\\source\\img\\rss.png","path":"img/rss.png","modified":false},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes\\yilia\\source\\img\\twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes\\yilia\\source\\js\\instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes\\yilia\\source\\js\\main.js","path":"js/main.js","modified":false},{"_id":"themes\\yilia\\source\\js\\script.js","path":"js/script.js","modified":false},{"_id":"themes\\yilia\\source\\css\\style.styl","path":"css/style.styl","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1414129781000},{"_id":"scaffolds\\photo.md","mtime":1414129781000},{"_id":"scaffolds\\page.md","mtime":1414129781000},{"_id":"scaffolds\\post.md","mtime":1414129781000},{"_id":"source\\CNAME","mtime":1414154991000},{"_id":"source\\_posts\\Git Real 2.markdown","mtime":1415698188000},{"_id":"source\\_posts\\Git Real.markdown","mtime":1415698592000},{"_id":"source\\_posts\\Learning how to learn.markdown","mtime":1415698744000},{"_id":"source\\_posts\\How to start a startup.markdown","mtime":1415698680000},{"_id":"source\\_posts\\Managing Money.markdown","mtime":1415698789000},{"_id":"source\\_posts\\Markdown笔记.markdown","mtime":1415698943000},{"_id":"source\\_posts\\使用hexo搭建博客.markdown","mtime":1415698987000},{"_id":"themes\\yilia\\_config.yml","mtime":1414231829000},{"_id":"themes\\yilia\\README.md","mtime":1414195814000},{"_id":"themes\\yilia\\package.json","mtime":1414195814000},{"_id":"themes\\yilia\\scripts\\fancybox.js","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\archive.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\category.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\index.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\layout.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\page.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\post.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\tag.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\after-footer.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\archive-post.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\archive.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\article.ejs","mtime":1415634001000},{"_id":"themes\\yilia\\layout\\_partial\\footer.ejs","mtime":1414315117000},{"_id":"themes\\yilia\\layout\\_partial\\head.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\header.ejs","mtime":1414225449000},{"_id":"themes\\yilia\\layout\\_partial\\left-col.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\mobile-nav.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\category.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\date.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\nav.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\share.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\tag.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\title.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\layout\\_partial\\post\\duoshuo.ejs","mtime":1414195814000},{"_id":"themes\\yilia\\source\\img\\anonymous.jpg","mtime":1414203288000},{"_id":"themes\\yilia\\source\\img\\coderwall.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\img\\delicious.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\img\\email.png","mtime":1414218982000},{"_id":"themes\\yilia\\source\\img\\facebook.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\favicon.ico","mtime":1414205076000},{"_id":"themes\\yilia\\source\\img\\github.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\google.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\img-err.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\img-loading.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\linkedin.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\pinboard.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\pinterest.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\quora.png","mtime":1414212202000},{"_id":"themes\\yilia\\source\\img\\rss.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\img\\twitter.png","mtime":1414195815000},{"_id":"themes\\yilia\\source\\js\\instagram.js","mtime":1414195815000},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","mtime":1414195815000},{"_id":"themes\\yilia\\source\\js\\main.js","mtime":1414195815000},{"_id":"themes\\yilia\\source\\js\\script.js","mtime":1414195815000},{"_id":"themes\\yilia\\source\\css\\_extend.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_variables.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\style.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\archive.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\article.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\footer.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\header.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\highlight.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\instagram.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\mobile.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\main.styl","mtime":1414219071000},{"_id":"themes\\yilia\\source\\css\\_partial\\page.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\share.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_partial\\tagcloud.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_util\\grid.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\_util\\mixin.styl","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1414195814000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1414195814000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1414195814000},{"_id":"source\\_posts\\Holistic Learning.markdown","mtime":1416533883000}],"Category":[],"Page":[],"Post":[{"layout":"post","title":"Git Real 2","date":1415506680000,"comments":true,"tags":["pt7sjs1fm0102uah"],"content":"<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg\" alt=\"0\"></p>\n<h1 id=\"INTERACTIVE_REBASE\"><strong>INTERACTIVE REBASE</strong></h1>\n<h3 id=\"REBASE_RECAP\"><strong>REBASE RECAP</strong></h3>\n<blockquote>\n<p>So you’ve been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.<br><a id=\"more\"></a></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase master</div></pre></td></tr></table></figure>\n\n<h3 id=\"INTERACTIVE_REBASE-1\"><strong>INTERACTIVE REBASE</strong></h3>\n<blockquote>\n<p>You’re getting ready to merge in your feature branch, but first you want to clean up your commits a bit. Go ahead and use interactive rebase to edit your last 4 commits.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase -i HEAD~<span class=\"number\">4</span>  <span class=\"comment\">/*alter commits in the same branch*/</span></div></pre></td></tr></table></figure>\n\n<p>We want to re-order these four commits.</p>\n<h3 id=\"COMMIT_ORDERING\"><strong>COMMIT ORDERING</strong></h3>\n<blockquote>\n<p>You notice a critical error on your part. The commit where you wrote tests comes after the commit where you made the actual changes. Let’s swap these 2 commits so that it looks like you wrote the tests first. Swap the ‘Add tests’ commit so that it comes before the ‘Implement poodles’ commit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn</div><div class=\"line\">pick f239187 Implement poodles  //<span class=\"operator\"><span class=\"keyword\">change</span> <span class=\"keyword\">to</span> pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests </span></div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests          //<span class=\"keyword\">change</span> <span class=\"keyword\">to</span> pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added a title <span class=\"keyword\">to</span> the homepage</div></pre></td></tr></table></figure>\n\n<p>Swap the order,save and close the editor.Commits get replayed in new order.</p>\n<h3 id=\"REWORDING_A_COMMIT\"><strong>REWORDING A COMMIT</strong></h3>\n<blockquote>\n<p>1.As you’re editing your commits, you notice that the commit that says ‘Add tests’ is a little vague, maybe you should change it to something more specific. Use the reword command to change the message of this commit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn</div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a Add tests<span class=\"comment\"> // reword 4b65a5a Add tests</span></div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added <span class=\"operator\">a</span> title <span class=\"built_in\">to</span> <span class=\"operator\">the</span> homepage</div></pre></td></tr></table></figure>\n\n<p>Commands:<br>p, pick = use commit<br>r, reword = use commit, but edit the commit message<br>e, edit = use commit, but stop for amending<br>s, squash = use commit, but meld into previous commit<br>f, fixup = like “squash”, but discard this commit’s log message<br>x, exec = run command (the rest of the line) using shell</p>\n<blockquote>\n<p>2.After setting the <code>reword</code> command in the interactive rebase editor <strong>another editor window has opened up</strong>. This is where you actually change the commit message. Go ahead and change the commit message to: <code>Add tests for poodles</code> to be more descriptive.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Add</span> tests //<span class=\"keyword\">Add</span> tests for poodles</div></pre></td></tr></table></figure>\n\n<h3 id=\"SPLIT_COMMITS\"><strong>SPLIT COMMITS</strong></h3>\n<blockquote>\n<p>1.You remember that the ‘Add unicorn’ commit also contains the testing changes. Since we have separate commits for adding tests for poodles it makes sense to split out the test changes into a separate commit. Tell git to stop at this commit so we can reorganize it a bit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn  <span class=\"comment\"> //edit b3f1649 Add unicorn</span></div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a Added tests <span class=\"keyword\">for</span> poodles</div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added <span class=\"operator\">a</span> title <span class=\"built_in\">to</span> <span class=\"operator\">the</span> homepage</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.After saving the interactive rebase text file, git has stopped at the ‘Add unicorn’ commit. The first thing we need to do is to reset back to the previous commit, so the changes in the most recent commit are back in the file and unstaged.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> HEAD^</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>3.Great! You’ve already re-committed the changes needed in 2 different commits. All that’s left to do is to resume the rebase with the continue option.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n\n<p>One commit is now two.</p>\n<h3 id=\"SQUASHING_COMMITS\"><strong>SQUASHING COMMITS</strong></h3>\n<blockquote>\n<p>1.You noticed another bug with those pesky poodles, so you’ve gone ahead and fixed it, making another commit in the process. Now you have 2 commits that both affect the poodles page. You should squash them into one commit to simplify your git logs.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 <span class=\"keyword\">Add</span> unicorn</div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests</div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f <span class=\"keyword\">Add</span> title <span class=\"keyword\">to</span> poodle page <span class=\"comment\">//squash c3f863f Add title to poodle page</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.After designating a commit to be squashed, another editor pops up enabling you to set a commit message for the resulting commit. Go ahead and set to: <code>squashed some poodles</code>.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># This is a combination of 2 commits.</span></div><div class=\"line\"><span class=\"preprocessor\"># The first commit's message is:</span></div><div class=\"line\"></div><div class=\"line\">Implement poodles <span class=\"comment\">//注释掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># This is the 2nd commit message:</span></div><div class=\"line\"></div><div class=\"line\">Add title to poodle page <span class=\"comment\">//注释掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#合并成你想的名字：</span></div><div class=\"line\">squashed some poodles</div></pre></td></tr></table></figure>\n\n<p>The content of two commits is replayed, but only one commit is made.<br><br></p>\n<h1 id=\"STASHING\"><strong>STASHING</strong></h1>\n<h3 id=\"GIT_STASH\"><strong>GIT STASH</strong></h3>\n<blockquote>\n<p>You’re not quite ready to commit what you’re working on, but need to make a quick fix to master. Fear not, just stash your current changes so you can switch to master quick.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git stash save  // </span>=<span class=\"string\"> git stash</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"GIT_STASH_LIST\"><strong>GIT STASH LIST</strong></h3>\n<blockquote>\n<p>You just finished making those quick changes to master. You’re now ready to resume your work on the feature you had started on before you had to fix master. Let’s first list all the stashes to make sure we get the right one.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">list</span>   <span class=\"comment\">//stash names are shown in the list</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"GIT_STASH_APPLY\"><strong>GIT STASH APPLY</strong></h3>\n<blockquote>\n<p>Great! As you can see, your stash is in the stash list. Let’s apply the stash so you can get back to work.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash apply stash<span class=\"variable\">@{0}</span> <span class=\"comment\">// = git stash apply</span></div></pre></td></tr></table></figure>\n\n<p><code>stash@{0}</code> is the default.<br>stash has been applied but it’s still here.</p>\n<h3 id=\"GIT_STASH_DROP\"><strong>GIT STASH DROP</strong></h3>\n<blockquote>\n<p>Ok, so now that you have all your stashed changes back, let’s clean up the stash list. There’s only one stash; go ahead and drop it.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"operator\"><span class=\"keyword\">drop</span>  //<span class=\"keyword\">Delete</span> stash@{<span class=\"number\">0</span>} <span class=\"keyword\">from</span> list</span></div><div class=\"line\">git stash clear //Clear <span class=\"keyword\">all</span> <span class=\"keyword\">of</span> them <span class=\"keyword\">at</span> once</div></pre></td></tr></table></figure>\n\n<h3 id=\"CONFLICTS\"><strong>CONFLICTS</strong></h3>\n<blockquote>\n<p>1.You came back from master and resumed working on your feature, when you realize that you forgot to apply your saved stash. Go ahead and apply it now.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> stash apply</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.Uh oh! There was a conflict when trying to apply your previous stash. It’s no problem, you were just trying things anyway. Go ahead and do a hard reset back to the last commit.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD</span></span></div><div class=\"line\">git stash apply</div></pre></td></tr></table></figure>\n\n<h3 id=\"GIT_STASH_POP\"><strong>GIT STASH POP</strong></h3>\n<blockquote>\n<p>Now that you have the file reset, use the <code>pop</code> command to <strong>apply and delete the stash at the same time</strong>. </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">pop</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"KEEPING_THE_INDEX\"><strong>KEEPING THE INDEX</strong></h3>\n<blockquote>\n<p>You need to swap branches again, but this time some of your changes are ready to be committed. Stash all the unstaged changes, but leave the staged changes intact so they can be committed afterwards.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save --keep-<span class=\"built_in\">index</span> //cause the staging area not <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> stashed</div></pre></td></tr></table></figure>\n\n<h3 id=\"INCLUDE_UNTRACKED\"><strong>INCLUDE UNTRACKED</strong></h3>\n<blockquote>\n<p>Wow, there are so many small fixes on master today! You really need to stash some more changes, but it doesn’t seem to be working on these untracked files you just created. Try using the <code>--include-untracked</code> option to stash all those new files.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save --include-untracked //cause untracked <span class=\"keyword\">files</span> <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> stashed,too</div></pre></td></tr></table></figure>\n\n<h3 id=\"LIST_OPTIONS\"><strong>LIST OPTIONS</strong></h3>\n<blockquote>\n<p>You’ve been stashing stuff all day since you keep having to make small quick fixes to master. Now you have a bunch of stashed changes and you’re not sure which one you need to apply. You could look through them all one by one, or you could use the <code>--stat</code> option to list information about each stash. Give that a try.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">list</span> --stat //summarizes <span class=\"keyword\">file</span> <span class=\"keyword\">changes</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"STASH_DETAILS\"><strong>STASH DETAILS</strong></h3>\n<blockquote>\n<p>You now have a list of stashes that are showing you more information, and you think you may have spotted the stash that you need. Take a more detailed look at the stash@{2} stash with the <code>--patch</code> option.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"literal\">show</span> stash@{<span class=\"number\">2</span>} --patch //<span class=\"literal\">show</span> file differents</div></pre></td></tr></table></figure>\n\n<h3 id=\"STASH_MESSAGE\"><strong>STASH MESSAGE</strong></h3>\n<blockquote>\n<p>You’re halfway through a large feature. Your team has decided that they want you to deploy what you have so far, but you have a smaller unfinished feature that isn’t ready to be committed yet. Go ahead and stash your current changes with the <strong>message <code>Added groom method</code></strong>, so you know which stash has your changes.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> stash save <span class=\"string\">\"Added groom method\"</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"STASH_BRANCHING\"><strong>STASH BRANCHING</strong></h3>\n<blockquote>\n<p>Now that you’ve deployed the main part of your feature, you need to finish up what is left. Create a new branch named <code>poodle</code> and apply your most current stash all in one command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">git</span> <span class=\"tag\">stash</span> <span class=\"tag\">branch</span> <span class=\"tag\">poodle</span> <span class=\"tag\">stash</span><span class=\"at_rule\">@<span class=\"keyword\">{0}</span></span></div></pre></td></tr></table></figure>\n\n<p><code>git stash branch</code>checks a new branch out automatically, and drops the stash automatically.<br><br></p>\n<h1 id=\"PURGING_HISTORY\"><strong>PURGING HISTORY</strong></h1>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/17.jpg\" alt=\"17\"></p>\n<h3 id=\"REPO_COPY\"><strong>REPO COPY</strong></h3>\n<blockquote>\n<p>Now you’ve done it. You accidentally put the company’s master password into one of your files. You’re beginning to panic because you know that it’s pretty hard to delete something forever in git. That’s what you really need to do, though, or you’re in big trouble. You’re going to need to purge the history. First, though, make a copy of your repo in case you mess it up. Make a copy of the <code>poodles</code> repository, and name it whatever you want.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> poodles poodles_copy</div></pre></td></tr></table></figure>\n\n<h3 id=\"TREE_FILTER\"><strong>TREE FILTER</strong></h3>\n<blockquote>\n<p>Luckily for you, the password you accidentally committed was in the <code>master_password.txt</code> file. Use the <code>filter-branch</code> command and remove this file from all of your commits.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//git filter-branch --tree-filter &lt;command&gt; <span class=\"keyword\">...</span> </div><div class=\"line\">//specify any shell commend</div><div class=\"line\">git filter-branch --tree-filter <span class=\"string\">'rm -f master_password.txt'</span></div></pre></td></tr></table></figure>\n\n<p><code>...</code>: </p>\n<ul>\n<li><code>--all</code> option filter all commits in all branches.</li>\n<li><code>HEAD</code> filter only current branch.</li>\n</ul>\n<p>Git will check each commit out into <strong>working directory</strong>, run your command, and re-commit.</p>\n<h3 id=\"INDEX_FILTER\"><strong>INDEX FILTER</strong></h3>\n<blockquote>\n<p>This repository is so large, using <code>--tree-filter</code> is going to take all day. Use <code>--index-filter</code> to remove <code>master_password.txt</code> instead. Remember, <code>--index-filte</code>r will need a command that works on the staging area, which is going to be some sort of git command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//git filter-branch --index-filter &lt;command&gt; <span class=\"keyword\">...</span></div><div class=\"line\">//command must operate on staging area.</div><div class=\"line\">git filter-branch --index-filter <span class=\"string\">'git rm --cached --ignore-unmatch master_password.txt'</span></div></pre></td></tr></table></figure>\n\n<p>It operates on <strong>staging area</strong>.<br><code>--ignore-unmatch</code>: succeeds even if file isn’t present.<br>Git will run your command against each commit, but without checking it out first(so it’s faster).</p>\n<h3 id=\"FORCE\"><strong>FORCE</strong></h3>\n<blockquote>\n<p>You just realized that you also have a <code>master_username.txt</code> file that should probably be removed too, just to be safe. Use either technique you have learned to remove this file. Don’t forget, you have a history backup from the first time you used <code>filter-branch</code>. Use the correct option to force git to overwrite it.</p>\n</blockquote>\n<p>After you run filter-branch, Git leaves a backup of your tree in the “.git” directory.By default, you can’t run filter-branch again because it won’t overwrite the backup.You can force it with the -f option.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">filter</span>-branch -<span class=\"keyword\">f</span> --tree-<span class=\"built_in\">filter</span> <span class=\"string\">'git rm --cached --ignore-unmatch master_username.txt'</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"PRUNING\"><strong>PRUNING</strong></h3>\n<blockquote>\n<p>Great! Now we’re getting somewhere. There is one more problem though, you realize that some of the commits don’t contain anything anymore, since you removed the password file that they referenced. You should probably use the <code>--prune-empty</code> option do something to clean these out.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">filter</span>-branch -<span class=\"keyword\">f</span> --prune-<span class=\"built_in\">empty</span></div></pre></td></tr></table></figure>\n\n<p><code>--prune-empty</code> option drops commits that don’t alter any files.</p>\n<p><br></p>\n<h1 id=\"WORKING_TOGETHER\"><strong>WORKING TOGETHER</strong></h1>\n<h3 id=\"LINE_ENDINGS\"><strong>LINE ENDINGS</strong></h3>\n<blockquote>\n<p>1.Your company just hired a new developer who works on a Windows computer, and you notice that some files seem to be missing line separators. You realize that the Windows machine is saving files with a different line separator character than the Unix stations. Here on your Unix machine, set your ‘git config’ variable to convert line endings to the Unix way on commit.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/18.jpg\" alt=\"18\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> core.autocrlf <span class=\"built_in\">input</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.Because you’re a nice person, you decide to go help the new developer convert line endings to work on his windows computer. Set the <code>git config</code> variable to convert line endings from Unix to Windows formats on checkout.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> core.autocrlf <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/19.jpg\" alt=\"19\"></p>\n<blockquote>\n<p>3.After helping a 3rd Windows developer set up their workstation, you’ve decided enough is enough. It’s time to add a <code>.gitattributes</code> file to handle all these line ending problems. Finish adding the options to the <code>*.bat</code> and <code>*.sh files</code>. Remember, <code>*.bat</code> is a windows file, while <code>*.sh</code> is a unix file.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/20.jpg\" alt=\"20\"></p>\n<p><code>text=auto</code> Choose conversion automatically<br><code>text</code> Treat files as text -convert to OS’s line endings back to LF on commit<br><code>text eol = crlf</code> <code>text eol = lf</code> Convert to specified format on checkout back to LF commit<br><code>binary</code> Treat files as binary - do no conversion</p>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/21.jpg\" alt=\"21\"></p>\n<h3 id=\"CHERRY_PICKING\"><strong>CHERRY PICKING</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/22.jpg\" alt=\"22\"></p>\n<blockquote>\n<p>You were working on a new feature for the Unicorn class, when you happened to find a fix for a bug that was causing Unicorns to stop sparkling on occasion. You really want this commit in master ASAP. Cherry-pick the commit with a sha of <code>3fbd473</code> to the master branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git cherry-pick <span class=\"number\">3f</span>bd473 <span class=\"comment\">//specify commit you want</span></div></pre></td></tr></table></figure>\n\n<p>We copied a single commit a single commit to the current branch</p>\n<h3 id=\"EDIT_A_CHERRY_PICK\"><strong>EDIT A CHERRY PICK</strong></h3>\n<blockquote>\n<p>You’ve realized that this commit <code>3fbd473</code>, which you need to cherry pick, has a rather vague message. Do another cherry-pick, but edit the commit message this time.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git cherry-pick --<span class=\"keyword\">edit</span> <span class=\"number\">3</span>fbd473</div></pre></td></tr></table></figure>\n\n<p>Then enter your message, save ,and quit.</p>\n<h3 id=\"CHERRY_PICK_SQUASH\"><strong>CHERRY PICK SQUASH</strong></h3>\n<blockquote>\n<p>1.You’ve fixed another bug that was causing the unicorn horn to be blunt instead of nice and sharp, but you had to make an extra commit to remove some debugging code. We want to convert these two commits to a single commit on the master branch. Cherry-pick commits <code>b447335</code>“ and <code>b59d285</code>, without committing them to the current branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> cherry-pick --<span class=\"built_in\">no</span>-commit b447335 b59d285</div></pre></td></tr></table></figure>\n\n<p><code>--no-commit</code> pulls in changes and stages them, but doesn’t commit</p>\n<blockquote>\n<p>2.The changes from both cherry picked commits are now on master, and all that’s left to do is to commit these changes. (Don’t forget the commit message!)</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">\"add both\"</span></span></div></pre></td></tr></table></figure>\n\n<h3 id=\"TRACKING_CHERRY_PICKS\"><strong>TRACKING CHERRY PICKS</strong></h3>\n<blockquote>\n<p>There has been a lot of cherry picking lately, so the decision has been made to keep track of where these commits are coming from. Cherry pick the “bug fix” commit with a sha of <code>bdf9578</code>. Use the option which keeps a record of where the commit was cherry picked.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> cherry-pick -x bdf9578</div></pre></td></tr></table></figure>\n\n<p><code>-x</code> adds source SHA to commit message.<br>Only useful with public branches; don’t use for local branches</p>\n<h3 id=\"SIGNING_OFF\"><strong>SIGNING OFF</strong></h3>\n<blockquote>\n<p>You’ve decided that it is probably a good idea to put your name on these commits you’re cherry picking. Go ahead and get started by cherry picking the commit with a sha of <code>bdf9578</code>. Don’t forget to use the option which will sign off on the cherry pick!</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">cherry</span><span class=\"literal\">-</span><span class=\"comment\">pick</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">signoff</span> <span class=\"comment\">bdf9578</span></div></pre></td></tr></table></figure>\n\n<p><code>--signoff</code> adds current user’s name to commit message.</p>\n<p><br></p>\n<h1 id=\"SUBMODULES\"><strong>SUBMODULES</strong></h1>\n<h3 id=\"BAD_WAYS_TO_SHARE_LIBRARIES\"><strong>BAD WAYS TO SHARE LIBRARIES</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/23.jpg\" alt=\"23\"></p>\n<h3 id=\"GIT_SUBMODULES\"><strong>GIT SUBMODULES</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/24.jpg\" alt=\"24\"></p>\n<h3 id=\"SUBMODULE\"><strong>SUBMODULE</strong></h3>\n<blockquote>\n<p>You’re in the process of putting together two websites. One is for the Mythical Wildlife Fund: <code>MWF.com</code>. The other site is an adoption site for stray unicorns called <code>unicornrescues.com</code>. Both sites will share code for a JavaScript image gallery along with the associated css. Let’s get started by adding a submodule containing the JavaScript at <code>&quot;git@petstore.com:gallery_js.git&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> submodule add git<span class=\"variable\">@petstore</span>.com:gallery_js.git</div></pre></td></tr></table></figure>\n\n<h3 id=\"STAGING_A_SUBMODULE\"><strong>STAGING A SUBMODULE</strong></h3>\n<blockquote>\n<p>All that’s left to do is to commit your submodule so that other collaborators can use it. Using a single git command, stage the current changes to <code>.gitmodules</code> and <code>gallery_js</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> -A</div></pre></td></tr></table></figure>\n\n<h3 id=\"COMMITTING_A_SUBMODULE\"><strong>COMMITTING A SUBMODULE</strong></h3>\n<blockquote>\n<p>Great! Now go ahead and commit the submodule. Don’t forget the commit message!</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">\"Add submodule\"</span></span></div></pre></td></tr></table></figure>\n\n<h3 id=\"INIT_SUBMODULE\"><strong>INIT SUBMODULE</strong></h3>\n<blockquote>\n<p>You’re helping a co worker get set up to work on unicornrescues.com. You’ve already cloned the repo. Next, initialize the submodules so they download their own contents.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule <span class=\"keyword\">init</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"UPDATE_SUBMODULES\"><strong>UPDATE SUBMODULES</strong></h3>\n<blockquote>\n<p>Now that you have the submodules initialized, you need to check for updates and make sure they have the correct commits checked out. Run the submodule command that does this.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule <span class=\"keyword\">update</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"DETACHED_HEAD\"><strong>DETACHED HEAD</strong></h3>\n<blockquote>\n<p>You’ve just committed a few changes to the <code>gallery_css</code> submodule. When you go to push, you realize that you’re in a detached head state. Don’t panic, though! We can fix it. Let’s start out by creating a new branch with your most recent commit: “a7eded4”. Name the branch <code>temp_changes</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> branch temp_changes a7eded4</div></pre></td></tr></table></figure>\n\n<h3 id=\"BRANCH_MERGE\"><strong>BRANCH MERGE</strong></h3>\n<blockquote>\n<p>Your seemingly lost changes now reside on the <code>temp_changes</code> branch. Go ahead and merge the <code>temp_changes</code> branch back into master.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> temp_changes</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"PUSH_CHECK\"><strong>PUSH CHECK</strong></h3>\n<blockquote>\n<p>After finishing up a bunch of changes, you want to push them up to the remote so you can share it with your other co-workers that are working on the project. Since you’re using submodules, you should make sure to use the option which checks whether you have un-pushed submodules.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git push --recurse-submodules</span>=<span class=\"string\">check</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"ON_DEMAND_PUSH\"><strong>ON DEMAND PUSH</strong></h3>\n<blockquote>\n<p>We need to push submodule changes again. But this time, instead of going into the submodule to push it, just use the <code>on-demand</code> option for the <code>--recurse-submodules</code> option. This way submodules that need it will be pushed automatically.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> push --recurse-submodules=<span class=\"built_in\">on</span>-demand</div></pre></td></tr></table></figure>\n\n<h3 id=\"ON_DEMAND_ALIAS\"><strong>ON DEMAND ALIAS</strong></h3>\n<blockquote>\n<p>Wouldn’t it be nice if you didn’t have to type that long line out every time you wanted to push this project? Let’s make the command easier to use. Create an alias which will run the git push <code>--recurse-submodules=on-demand</code> command. Name the alias anything you want.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config <span class=\"keyword\">alias</span>.pushall <span class=\"string\">\"push --recurse-submodules=on-demand\"</span></div><div class=\"line\">git pushall</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"REFLOG\"><strong>REFLOG</strong></h1>\n<h3 id=\"THE_MISTAKE\"><strong>THE MISTAKE</strong></h3>\n<blockquote>\n<p>You decided that unicorns should leave a rainbow trail when they jump. You made the upgrade, and committed the changes. There is a problem, though: this change caused a bug which prevents the unicorns from jumping at all. You panic! Hurry, do a “hard reset” back to the commit before the rainbow jumping was added: <code>&quot;ab27026&quot;</code>.<br>$ git log —oneline<br>8791492 Rainbow trail when jumping.<br>ab27026 Implement unicorn jumping.<br>…..</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--hard ab27026</span></span></div></pre></td></tr></table></figure>\n\n<h3 id=\"REFLOG-1\"><strong>REFLOG</strong></h3>\n<blockquote>\n<p>You realize after the fact that maybe the hard reset was a bit overkill. You still wanted your code used to add rainbow jumps. It’s a good thing git never really gets rid of commits. Let’s look at the reflog to see if there is anything we can do.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/25.jpg\" alt=\"25\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reflog <span class=\"comment\">//查看</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/26.jpg\" alt=\"26\"></p>\n<h3 id=\"RESETTING_THE_REFLOG\"><strong>RESETTING THE REFLOG</strong></h3>\n<blockquote>\n<p>Great, we can see that there is a log of the reset! Take note of the reflog entry right before your earlier reset. Then do a “hard reset” to that commit to get your work back.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> --hard <span class=\"number\">8791492</span> // git <span class=\"keyword\">reset</span> --hard HEAD<span class=\"variable\">@{1}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"DELETING_A_BRANCH\"><strong>DELETING A BRANCH</strong></h3>\n<blockquote>\n<p>You decide to clean house a bit. You know that all branches have either been merged or abandoned, so you’re going to delete them to keep a tidy repository. Go ahead and get started by deleting the <code>fluffy_poodle</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -<span class=\"keyword\">D</span> fluffy_poodle</div></pre></td></tr></table></figure>\n\n<h3 id=\"WALKING_REFLOGS\"><strong>WALKING REFLOGS</strong></h3>\n<blockquote>\n<p>Then you realize that you needed the styles menu from that <code>fluffy_poodle</code> branch you just deleted. Good thing git never really gets rid of anything. List all commits in the reflog by using the <code>--walk-reflogs</code> option of git log.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/27.jpg\" alt=\"27\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> --walk-reflogs <span class=\"comment\">//查看</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"BRANCH_RECOVERY\"><strong>BRANCH RECOVERY</strong></h3>\n<blockquote>\n<p>Now that you know what the last commit was on the deleted branch, you can create a new branch and attach the commit to it. Create a new branch named <code>fluffy_poodle</code> using the most recent commit from the deleted branch.<br>$ git log —walk-reflogs —oneline<br>b8ec575 HEAD@{0}: checkout: moving from fluffy_poodle to master<br>aaafb5e HEAD@{1}: commit: Fluff poodle.<br>….</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch fluffy_poodle HEAD<span class=\"variable\">@{1}</span> <span class=\"comment\">//git branch fluffy_poodle aaafb5e</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/Git Real 2.markdown","raw":"---\nlayout: post\ntitle: \"Git Real 2\"\ndate: 2014-11-09 12:18\ncomments: true\ntags: \n\t- git\n\n---\n\n![0](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg)\n#**INTERACTIVE REBASE**#\n###**REBASE RECAP**###\n> So you've been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.\n<!--more-->\n```\ngit rebase master\n```\n\n###**INTERACTIVE REBASE**###\n> You're getting ready to merge in your feature branch, but first you want to clean up your commits a bit. Go ahead and use interactive rebase to edit your last 4 commits.\n\n```\ngit rebase -i HEAD~4  /*alter commits in the same branch*/\n```\nWe want to re-order these four commits.\n\n\n###**COMMIT ORDERING**###\n> You notice a critical error on your part. The commit where you wrote tests comes after the commit where you made the actual changes. Let's swap these 2 commits so that it looks like you wrote the tests first. Swap the 'Add tests' commit so that it comes before the 'Implement poodles' commit.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick f239187 Implement poodles  //change to pick 4b65a5a Add tests \npick 4b65a5a Add tests          //change to pick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\nSwap the order,save and close the editor.Commits get replayed in new order.\n\n###**REWORDING A COMMIT**###\n> 1.As you're editing your commits, you notice that the commit that says 'Add tests' is a little vague, maybe you should change it to something more specific. Use the reword command to change the message of this commit.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick 4b65a5a Add tests // reword 4b65a5a Add tests\npick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\nCommands:\np, pick = use commit\nr, reword = use commit, but edit the commit message\ne, edit = use commit, but stop for amending\ns, squash = use commit, but meld into previous commit\nf, fixup = like \"squash\", but discard this commit's log message\nx, exec = run command (the rest of the line) using shell\n\n> 2.After setting the `reword` command in the interactive rebase editor **another editor window has opened up**. This is where you actually change the commit message. Go ahead and change the commit message to: `Add tests for poodles` to be more descriptive.\n\n`editor:`\n```\nAdd tests //Add tests for poodles\n```\n###**SPLIT COMMITS**###\n> 1.You remember that the 'Add unicorn' commit also contains the testing changes. Since we have separate commits for adding tests for poodles it makes sense to split out the test changes into a separate commit. Tell git to stop at this commit so we can reorganize it a bit.\n\n`editor:`\n```\npick b3f1649 Add unicorn   //edit b3f1649 Add unicorn\npick 4b65a5a Added tests for poodles\npick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\n> 2.After saving the interactive rebase text file, git has stopped at the 'Add unicorn' commit. The first thing we need to do is to reset back to the previous commit, so the changes in the most recent commit are back in the file and unstaged.\n\n```\ngit reset HEAD^ \n```\n\n> 3.Great! You've already re-committed the changes needed in 2 different commits. All that's left to do is to resume the rebase with the continue option.\n\n```\ngit rebase --continue\n```\nOne commit is now two.\n\n###**SQUASHING COMMITS**###\n> 1.You noticed another bug with those pesky poodles, so you've gone ahead and fixed it, making another commit in the process. Now you have 2 commits that both affect the poodles page. You should squash them into one commit to simplify your git logs.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick 4b65a5a Add tests\npick f239187 Implement poodles\npick c3f863f Add title to poodle page //squash c3f863f Add title to poodle page\n```\n\n> 2.After designating a commit to be squashed, another editor pops up enabling you to set a commit message for the resulting commit. Go ahead and set to: `squashed some poodles`.\n\n`editor:`\n```\n# This is a combination of 2 commits.\n# The first commit's message is:\n\nImplement poodles //注释掉\n\n# This is the 2nd commit message:\n\nAdd title to poodle page //注释掉\n\n#合并成你想的名字：\nsquashed some poodles\n```\nThe content of two commits is replayed, but only one commit is made.\n<br>\n#**STASHING**#\n###**GIT STASH**###\n> You're not quite ready to commit what you're working on, but need to make a quick fix to master. Fear not, just stash your current changes so you can switch to master quick.\n\n```\ngit stash save  // = git stash\n```\n\n###**GIT STASH LIST**###\n> You just finished making those quick changes to master. You're now ready to resume your work on the feature you had started on before you had to fix master. Let's first list all the stashes to make sure we get the right one.\n\n```\ngit stash list   //stash names are shown in the list \n```\n\n###**GIT STASH APPLY**###\n> Great! As you can see, your stash is in the stash list. Let's apply the stash so you can get back to work.\n\n```\ngit stash apply stash@{0} // = git stash apply\n```\n`stash@{0}` is the default.\nstash has been applied but it's still here.\n###**GIT STASH DROP**###\n> Ok, so now that you have all your stashed changes back, let's clean up the stash list. There's only one stash; go ahead and drop it.\n\n```\ngit stash drop  //Delete stash@{0} from list\ngit stash clear //Clear all of them at once\n```\n###**CONFLICTS**###\n> 1.You came back from master and resumed working on your feature, when you realize that you forgot to apply your saved stash. Go ahead and apply it now.\n\n```\ngit stash apply\n```\n\n> 2.Uh oh! There was a conflict when trying to apply your previous stash. It's no problem, you were just trying things anyway. Go ahead and do a hard reset back to the last commit.\n\n```\ngit reset --hard HEAD\ngit stash apply\n```\n\n###**GIT STASH POP**###\n> Now that you have the file reset, use the `pop` command to **apply and delete the stash at the same time**. \n\n```\ngit stash pop \n```\n\n###**KEEPING THE INDEX**###\n> You need to swap branches again, but this time some of your changes are ready to be committed. Stash all the unstaged changes, but leave the staged changes intact so they can be committed afterwards.\n\n```\ngit stash save --keep-index //cause the staging area not to be stashed\n```\n\n###**INCLUDE UNTRACKED**###\n> Wow, there are so many small fixes on master today! You really need to stash some more changes, but it doesn't seem to be working on these untracked files you just created. Try using the `--include-untracked` option to stash all those new files.\n\n```\ngit stash save --include-untracked //cause untracked files to be stashed,too\n```\n\n###**LIST OPTIONS**###\n> You've been stashing stuff all day since you keep having to make small quick fixes to master. Now you have a bunch of stashed changes and you're not sure which one you need to apply. You could look through them all one by one, or you could use the `--stat` option to list information about each stash. Give that a try.\n```\ngit stash list --stat //summarizes file changes\n```\n###**STASH DETAILS**###\n> You now have a list of stashes that are showing you more information, and you think you may have spotted the stash that you need. Take a more detailed look at the stash@{2} stash with the `--patch` option.\n\n```\ngit stash show stash@{2} --patch //show file differents\n```\n###**STASH MESSAGE**###\n> You're halfway through a large feature. Your team has decided that they want you to deploy what you have so far, but you have a smaller unfinished feature that isn't ready to be committed yet. Go ahead and stash your current changes with the **message `Added groom method`**, so you know which stash has your changes.\n\n```\ngit stash save \"Added groom method\" \n```\n###**STASH BRANCHING**###\n> Now that you've deployed the main part of your feature, you need to finish up what is left. Create a new branch named `poodle` and apply your most current stash all in one command.\n\n```\ngit stash branch poodle stash@{0}\n```\n`git stash branch`checks a new branch out automatically, and drops the stash automatically.\n<br>\n#**PURGING HISTORY**#\n![17](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/17.jpg)\n###**REPO COPY**###\n> Now you've done it. You accidentally put the company's master password into one of your files. You're beginning to panic because you know that it's pretty hard to delete something forever in git. That's what you really need to do, though, or you're in big trouble. You're going to need to purge the history. First, though, make a copy of your repo in case you mess it up. Make a copy of the `poodles` repository, and name it whatever you want.\n\n```\ngit clone poodles poodles_copy\n```\n\n###**TREE FILTER**###\n> Luckily for you, the password you accidentally committed was in the `master_password.txt` file. Use the `filter-branch` command and remove this file from all of your commits.\n\n```\n//git filter-branch --tree-filter <command> ... \n//specify any shell commend\ngit filter-branch --tree-filter 'rm -f master_password.txt'\n```\n`...`: \n\n- `--all` option filter all commits in all branches.\n- `HEAD` filter only current branch.\n\nGit will check each commit out into **working directory**, run your command, and re-commit.\n\n###**INDEX FILTER**###\n> This repository is so large, using `--tree-filter` is going to take all day. Use `--index-filter` to remove `master_password.txt` instead. Remember, `--index-filte`r will need a command that works on the staging area, which is going to be some sort of git command.\n\n```\n//git filter-branch --index-filter <command> ...\n//command must operate on staging area.\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch master_password.txt'\n```\nIt operates on **staging area**. \n`--ignore-unmatch`: succeeds even if file isn't present.\nGit will run your command against each commit, but without checking it out first(so it's faster).\n###**FORCE**###\n> You just realized that you also have a `master_username.txt` file that should probably be removed too, just to be safe. Use either technique you have learned to remove this file. Don't forget, you have a history backup from the first time you used `filter-branch`. Use the correct option to force git to overwrite it.\n\nAfter you run filter-branch, Git leaves a backup of your tree in the \".git\" directory.By default, you can't run filter-branch again because it won't overwrite the backup.You can force it with the -f option.\n```\ngit filter-branch -f --tree-filter 'git rm --cached --ignore-unmatch master_username.txt'\n```\n\n###**PRUNING**###\n> Great! Now we're getting somewhere. There is one more problem though, you realize that some of the commits don't contain anything anymore, since you removed the password file that they referenced. You should probably use the `--prune-empty` option do something to clean these out.\n\n```\ngit filter-branch -f --prune-empty\n```\n`--prune-empty` option drops commits that don't alter any files.\n\n<br>\n#**WORKING TOGETHER**#\n\n###**LINE ENDINGS**###\n> 1.Your company just hired a new developer who works on a Windows computer, and you notice that some files seem to be missing line separators. You realize that the Windows machine is saving files with a different line separator character than the Unix stations. Here on your Unix machine, set your 'git config' variable to convert line endings to the Unix way on commit.\n\n![18](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/18.jpg)\n\n```\ngit config --global core.autocrlf input\n```\n\n> 2.Because you're a nice person, you decide to go help the new developer convert line endings to work on his windows computer. Set the `git config` variable to convert line endings from Unix to Windows formats on checkout.\n\n```\ngit config --global core.autocrlf true\n```\n![19](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/19.jpg)\n> 3.After helping a 3rd Windows developer set up their workstation, you've decided enough is enough. It's time to add a `.gitattributes` file to handle all these line ending problems. Finish adding the options to the `*.bat` and `*.sh files`. Remember, `*.bat` is a windows file, while `*.sh` is a unix file.\n\n![20](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/20.jpg)\n\n`text=auto` Choose conversion automatically\n`text` Treat files as text -convert to OS's line endings back to LF on commit\n`text eol = crlf` `text eol = lf` Convert to specified format on checkout back to LF commit\n`binary` Treat files as binary - do no conversion\n\n![21](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/21.jpg)\n\n###**CHERRY PICKING**###\n![22](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/22.jpg)\n> You were working on a new feature for the Unicorn class, when you happened to find a fix for a bug that was causing Unicorns to stop sparkling on occasion. You really want this commit in master ASAP. Cherry-pick the commit with a sha of `3fbd473` to the master branch.\n\n```\ngit cherry-pick 3fbd473 //specify commit you want\n```\nWe copied a single commit a single commit to the current branch\n###**EDIT A CHERRY PICK**###\n\n> You've realized that this commit `3fbd473`, which you need to cherry pick, has a rather vague message. Do another cherry-pick, but edit the commit message this time.\n\n```\ngit cherry-pick --edit 3fbd473\n```\nThen enter your message, save ,and quit.\n\n\n###**CHERRY PICK SQUASH**###\n> 1.You've fixed another bug that was causing the unicorn horn to be blunt instead of nice and sharp, but you had to make an extra commit to remove some debugging code. We want to convert these two commits to a single commit on the master branch. Cherry-pick commits `b447335`\" and `b59d285`, without committing them to the current branch.\n```\ngit cherry-pick --no-commit b447335 b59d285\n```\n`--no-commit` pulls in changes and stages them, but doesn't commit\n\n> 2.The changes from both cherry picked commits are now on master, and all that's left to do is to commit these changes. (Don't forget the commit message!)\n\n```\ngit commit -m \"add both\"\n```\n###**TRACKING CHERRY PICKS**###\n> There has been a lot of cherry picking lately, so the decision has been made to keep track of where these commits are coming from. Cherry pick the \"bug fix\" commit with a sha of `bdf9578`. Use the option which keeps a record of where the commit was cherry picked.\n\n```\ngit cherry-pick -x bdf9578\n```\n`-x` adds source SHA to commit message.\nOnly useful with public branches; don't use for local branches\n\n###**SIGNING OFF**###\n> You've decided that it is probably a good idea to put your name on these commits you're cherry picking. Go ahead and get started by cherry picking the commit with a sha of `bdf9578`. Don't forget to use the option which will sign off on the cherry pick!\n\n```\ngit cherry-pick --signoff bdf9578\n```\n`--signoff` adds current user's name to commit message.\n\n<br>\n#**SUBMODULES**#\n###**BAD WAYS TO SHARE LIBRARIES**###\n![23](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/23.jpg)\n###**GIT SUBMODULES**###\n![24](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/24.jpg)\n###**SUBMODULE**###\n> You're in the process of putting together two websites. One is for the Mythical Wildlife Fund: `MWF.com`. The other site is an adoption site for stray unicorns called `unicornrescues.com`. Both sites will share code for a JavaScript image gallery along with the associated css. Let's get started by adding a submodule containing the JavaScript at `\"git@petstore.com:gallery_js.git\"`.\n\n```\ngit submodule add git@petstore.com:gallery_js.git\n```\n\n###**STAGING A SUBMODULE**###\n> All that's left to do is to commit your submodule so that other collaborators can use it. Using a single git command, stage the current changes to `.gitmodules` and `gallery_js`.\n\n```\ngit add -A\n```\n\n###**COMMITTING A SUBMODULE**###\n> Great! Now go ahead and commit the submodule. Don't forget the commit message!\n\n```\ngit commit -m \"Add submodule\"\n```\n\n###**INIT SUBMODULE**###\n> You're helping a co worker get set up to work on unicornrescues.com. You've already cloned the repo. Next, initialize the submodules so they download their own contents.\n\n```\ngit submodule init\n```\n\n###**UPDATE SUBMODULES**###\n> Now that you have the submodules initialized, you need to check for updates and make sure they have the correct commits checked out. Run the submodule command that does this.\n\n```\ngit submodule update\n```\n\n###**DETACHED HEAD**###\n> You've just committed a few changes to the `gallery_css` submodule. When you go to push, you realize that you're in a detached head state. Don't panic, though! We can fix it. Let's start out by creating a new branch with your most recent commit: \"a7eded4\". Name the branch `temp_changes`.\n\n```\ngit branch temp_changes a7eded4\n```\n\n###**BRANCH MERGE**###\n> Your seemingly lost changes now reside on the `temp_changes` branch. Go ahead and merge the `temp_changes` branch back into master.\n\n```\ngit merge temp_changes\n```\n\n###**PUSH CHECK**###\n> After finishing up a bunch of changes, you want to push them up to the remote so you can share it with your other co-workers that are working on the project. Since you're using submodules, you should make sure to use the option which checks whether you have un-pushed submodules.\n\n```\ngit push --recurse-submodules=check\n```\n\n###**ON DEMAND PUSH**###\n> We need to push submodule changes again. But this time, instead of going into the submodule to push it, just use the `on-demand` option for the `--recurse-submodules` option. This way submodules that need it will be pushed automatically.\n\n```\ngit push --recurse-submodules=on-demand\n```\n\n###**ON DEMAND ALIAS**###\n> Wouldn't it be nice if you didn't have to type that long line out every time you wanted to push this project? Let's make the command easier to use. Create an alias which will run the git push `--recurse-submodules=on-demand` command. Name the alias anything you want.\n\n```\ngit config alias.pushall \"push --recurse-submodules=on-demand\"\ngit pushall\n```\n\n<br>\n#**REFLOG**#\n###**THE MISTAKE**###\n> You decided that unicorns should leave a rainbow trail when they jump. You made the upgrade, and committed the changes. There is a problem, though: this change caused a bug which prevents the unicorns from jumping at all. You panic! Hurry, do a \"hard reset\" back to the commit before the rainbow jumping was added: `\"ab27026\"`.\n$ git log --oneline\n8791492 Rainbow trail when jumping.\nab27026 Implement unicorn jumping.\n.....\n\n```\ngit reset --hard ab27026\n```\n\n###**REFLOG**###\n> You realize after the fact that maybe the hard reset was a bit overkill. You still wanted your code used to add rainbow jumps. It's a good thing git never really gets rid of commits. Let's look at the reflog to see if there is anything we can do.\n\n![25](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/25.jpg)\n```\ngit reflog //查看\n```\n![26](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/26.jpg)\n\n###**RESETTING THE REFLOG**###\n> Great, we can see that there is a log of the reset! Take note of the reflog entry right before your earlier reset. Then do a \"hard reset\" to that commit to get your work back.\n\n```\ngit reset --hard 8791492 // git reset --hard HEAD@{1}\n```\n\n###**DELETING A BRANCH**###\n> You decide to clean house a bit. You know that all branches have either been merged or abandoned, so you're going to delete them to keep a tidy repository. Go ahead and get started by deleting the `fluffy_poodle` branch.\n\n```\ngit branch -D fluffy_poodle\n```\n\n###**WALKING REFLOGS**###\n> Then you realize that you needed the styles menu from that `fluffy_poodle` branch you just deleted. Good thing git never really gets rid of anything. List all commits in the reflog by using the `--walk-reflogs` option of git log.\n\n![27](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/27.jpg)\n\n```\ngit log --walk-reflogs //查看\n```\n\n###**BRANCH RECOVERY**###\n> Now that you know what the last commit was on the deleted branch, you can create a new branch and attach the commit to it. Create a new branch named `fluffy_poodle` using the most recent commit from the deleted branch.\n$ git log --walk-reflogs --oneline\nb8ec575 HEAD@{0}: checkout: moving from fluffy_poodle to master\naaafb5e HEAD@{1}: commit: Fluff poodle.\n....\n\n```\ngit branch fluffy_poodle HEAD@{1} //git branch fluffy_poodle aaafb5e\n```","slug":"Git Real 2","updated":1415698188000,"excerpt":"<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg\" alt=\"0\"></p>\n<h1 id=\"INTERACTIVE_REBASE\"><strong>INTERACTIVE REBASE</strong></h1>\n<h3 id=\"REBASE_RECAP\"><strong>REBASE RECAP</strong></h3>\n<blockquote>\n<p>So you’ve been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.<br>","_id":"dt414rain3tka9lj","categories":[],"photos":[],"link":""},{"layout":"post","title":"Learning how to learn","date":1414505880000,"comments":true,"tags":["e9wjh8jqdvdpwfs6","aecmdjdeh5rhp9mq","kda4984hd0e8h1qo"],"content":"<p>cousera课:<a href=\"https://class.coursera.org/learning-002\" target=\"_blank\" rel=\"external\">learning how to learn</a>笔记</p>\n<h2 id=\"Focused_versus_Diffuse_Thinking\"><strong>Focused versus Diffuse Thinking</strong></h2>\n<h3 id=\"专注模式和发散模式\"><strong>专注模式和发散模式</strong></h3>\n<p>我们人类有两种最基本的思考模式：</p>\n<ul>\n<li>专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。</li>\n<li>发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg\" alt=\"思考模式\"><br><a id=\"more\"></a><br>这两种思考模式就像硬币的两个面，人类不能同时使用两种思考模式。以现代神经学的知识，我们不能同时处在集中模式和发散模式下进行思考，就像一枚硬币不能同时正面和反面朝上一样。但这并不意味着我们不能同时交替使用他们来解决问题，当学习新的比较难懂的东西时，思维需要在两种完全不同的模式中转换，这能帮助我们更有效地学习。</p>\n<p>Eg： Dali and Edison，他们放松自己让思绪漫游，考虑他们之前专注的内容，一旦要睡着，钥匙 or钢球将他们惊醒，然后带着在发散模式下得到的灵感，转而进入专注模式，将这些灵感变成现实。当然这些需要每天的练习。</p>\n<p>要想有强健的体魄，需要每天运动，让肌肉增长；同样地，想建立神经结构，也需要每天练习，这是关键。</p>\n<h3 id=\"拖延症\"><strong>拖延症</strong></h3>\n<ul>\n<li>拖延症的产生：当你不想去做一件事的时候，大脑中相关区域的痛苦会被激发出来，为了避免这种痛苦，大脑将注意力转向其他地方。结果是，你只是感到暂时的愉悦，但是事情被拖延了。</li>\n<li>如何克服拖延症： <strong>立即去做</strong>！！研究发现，当人们开始做不喜欢的事不久，大脑中痛苦的感觉就消失了！</li>\n</ul>\n<h3 id=\"熟能生巧\"><strong>熟能生巧</strong></h3>\n<p>当我们学习一些具体事物的时候，只要将它和现实中的事物进行“链接”，我们就能掌握这个知识。但如果我们要学习的内容是抽象的数学概念和情感感觉或者其他事物的时候，由于现实生活中没有这种具体或者类比事物，我们很难对其进行学习和掌握。因此在学习这类概念的时候，我们需要人为地创建“思维模式”（PATTERN），并通过练习，不断增强这种思维模式。<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/2.jpg\" alt=\"\"></p>\n<p>在理解一些抽象概念时，在思考过程中创建的思维模式是具体而真实的，都是从起点开始一个神经元通过轴突、突触、树突传递到另一个神经元。当你不断地运用某一种思维模式的时候，他在你的脑海中就不断地根深蒂固（颜色越来越深）。</p>\n<p>第一次形成的思考模式是用“发散模式”发现问题解决路径之后，大脑将切换到“集中模式”，并记录该模式，在之后解决同样问题的时候，便直接调用这个模式，从而其在大脑中的路径颜色就越来越深，越来越牢固</p>\n<h3 id=\"关于记忆\"><strong>关于记忆</strong></h3>\n<p>记忆分为工作记忆和长期记忆。</p>\n<ul>\n<li>工作记忆：与要立即处理的问题相关的记忆，位于大脑前额皮质层（prefrontal cortex），现在广泛认为工作记忆能记住4个信息块。工作记忆就像一块黑板，并不是很好用，为了将要记忆的东西储存到工作记忆中，需要经常重复。当我们集中精力记忆一些东西时，会闭上眼睛，避免再摄入其他的新信息进入工作性记忆中，所以短期性记忆的效果很差。</li>\n<li>长期记忆：类似于仓库，有巨大的存储空间，但需要多次练习才能在众多信息中找到你想要的信息。不同的长期记忆储存在大脑的不同区域。研究发现，当第一次将工作记忆转化成长期记忆储存时，需要不断重复这个过程几次，这样能提高日后在你需要的时候找到他的几率。要将记忆转化为长期记忆，用间隔时间重复练习效果更好（类似艾宾浩斯曲线）。</li>\n</ul>\n<h3 id=\"睡眠的重要性\"><strong>睡眠的重要性</strong></h3>\n<p>在醒着的时候，大脑会产生有害物质（toxic），当睡着的时候，脑细胞与脑细胞之间的间距增大，通过脑中的液体将有害物质从脑细胞的间隙冲走，从而清理掉有害物质。所以睡眠不足意味着你的大脑毒素没有清理干净，毒素会导致你不能清晰地思考。长期睡眠不足还会导致头痛、抑郁、心脏病。糖尿病等。</p>\n<p>在睡觉的时候：</p>\n<ul>\n<li>大脑将你正在学习和思考的一些内容和概念更紧密地结合在一起。</li>\n<li>将记忆中不太重要的部分抹去，同时将你想要记住的部分进行强化。</li>\n<li>大脑会反复练习学习内容中比较难的部分，这样新的神经元模式会不断加深和强化</li>\n<li>增强理解和解决复杂问题的能力。睡觉时，大脑前额皮质层的意识钝化，这使得大脑的其他部分更容易交流，从而将正在学习的内容进行有序的整合，以利于理解和记忆。</li>\n</ul>\n<p><strong>所以在睡前复习今天所学的知识，能在睡梦中更好地理解和强化这些内容。</strong><br><br></p>\n<h2 id=\"Chunking\"><strong>Chunking</strong></h2>\n<h3 id=\"What_is_a_chunk?\"><strong>What is a chunk?</strong></h3>\n<ul>\n<li>Chunking is the mental leap that helps you unite bits of information together through meaning.</li>\n<li>A chunk means a network of neurons that are used to firing together so you can think a thought or perform an action smoothly and effectively.</li>\n</ul>\n<p>When you’re focusing your attention on something it’s almost as if you have an octopus.<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/3.jpg\" alt=\"octopus\"><br>The octopus of attention that slips it’s tentacles through those four slots of working memory when necessary to help you make connections to information that you might have in various parts of your brain.</p>\n<h3 id=\"How_to_form_a_chunk?\"><strong>How to form a chunk?</strong></h3>\n<p>Chunks are best built with focused, undivided attention, understanding of the basic idea.</p>\n<blockquote>\n<ol>\n<li>The first step on chunking is simply to focus your undivided attention on the information you want to chunk.</li>\n<li>The second step in chunking is to understand the basic idea you’re trying to chunk, whether it’s understanding a concept. Understanding is like a superglue that helps hold the underlying memory traces together. It creates broad encompassing traces that can link to other memory traces.</li>\n<li>The third step to chunking is gaining context, so you can see not just how, but also when to use this chunk. Context means going beyond the initial problem and seeing more broadly, repeating and practicing with both related and unrelated problems, so that you can see not only when to use the chunk, but when not to use it. This helps you see how your newly formed chunk fits into the bigger picture.</li>\n</ol>\n</blockquote>\n<hr>\n<ul>\n<li>Focused practice and repetition, the creation of strong memory traces, helps you to create chunks.</li>\n<li>Doing a rapid two-minute picture walk through a chapter in a book before you begin studying it, glancing at pictures and section headings, can allow you to gain a sense of the big picture.</li>\n<li>Simple recall, trying to remember the key points without looking at the page, is one of the best ways to help the chunking process along, rather than passive rereading, will make your study time more focused and effective.</li>\n<li>Test yourself frequently. Mistakes are a good thing to make when you’re learning.</li>\n<li>Try to avoid depending too much on highlighting, which can fool you into thinking that the material is going into your brain when it actually isn’t.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/4.jpg\" alt=\"\"></p>\n<p><strong>When you’re trying to figure something out, if you have a good library of these chunks, you can more easily skip to the right solution by metaphorically speaking, listening to whispers from your diffuse mode. Your diffuse mode can help you connect two or more chunks together in new ways to solve novel problems.</strong><br><br></p>\n<h3 id=\"如何阅读\"><strong>如何阅读</strong></h3>\n<p>最有效的办法是读完一遍后马上再读一遍，共两遍。</p>\n<ul>\n<li>第一遍是正常通读，不要追求快，需要时不时停下来思考。</li>\n<li>读第二遍时同时写下<strong>读书笔记</strong>，书中作为例子的故事可以跳过。要专注于思想脉络。读一章，记一章笔记，直至读完。回顾笔记，整理思路。<blockquote>\n<p>①清晰地表现每一章的逻辑脉络。<br>②带走书中所有的亮点（小故事、想法等）。<br>③有大量的自己的看法和心得。<br>④发现这本书和你脑中知识的联系。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li>只在“<code>学习区</code>”练习；<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/5.jpg\" alt=\"\"></li>\n<li>把要训练的内容分成有针对性的<code>小块</code>, 对每一个小块进行<code>重复练习</code>；</li>\n<li>在整个练习过程中， 随时能获得有效的<code>反馈</code>；</li>\n<li>练习时注意力必须<code>高度集中</code>。<br><br><br><br><br><code>To be continued</code></li>\n</ol>\n<p>Reference:</p>\n<ol>\n<li>MOOC学院  <a href=\"http://mooc.guokr.com/course/1484/Learning-How-to-Learn--Powerful-mental-tools-to-help-you-master-tough-subjects/note/\" target=\"_blank\" rel=\"external\">learning how to learn 笔记</a></li>\n<li>cousera Reading</li>\n</ol>\n","source":"_posts/Learning how to learn.markdown","raw":"---\nlayout: post\ntitle: \"Learning how to learn\"\ndate: 2014-10-28 22:18\ncomments: true\ntags: \n\t- 思维\n\t- 记忆力\n\t- Open Courses\n\n---\ncousera课:[learning how to learn](https://class.coursera.org/learning-002)笔记\n##**Focused versus Diffuse Thinking**##\n###**专注模式和发散模式**###\n\n我们人类有两种最基本的思考模式：\n\n- 专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。\n- 发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。\n\n![思考模式](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg)\n<!--more-->\n这两种思考模式就像硬币的两个面，人类不能同时使用两种思考模式。以现代神经学的知识，我们不能同时处在集中模式和发散模式下进行思考，就像一枚硬币不能同时正面和反面朝上一样。但这并不意味着我们不能同时交替使用他们来解决问题，当学习新的比较难懂的东西时，思维需要在两种完全不同的模式中转换，这能帮助我们更有效地学习。\n\nEg： Dali and Edison，他们放松自己让思绪漫游，考虑他们之前专注的内容，一旦要睡着，钥匙 or钢球将他们惊醒，然后带着在发散模式下得到的灵感，转而进入专注模式，将这些灵感变成现实。当然这些需要每天的练习。\n\n要想有强健的体魄，需要每天运动，让肌肉增长；同样地，想建立神经结构，也需要每天练习，这是关键。\n\n###**拖延症**###\n\n- 拖延症的产生：当你不想去做一件事的时候，大脑中相关区域的痛苦会被激发出来，为了避免这种痛苦，大脑将注意力转向其他地方。结果是，你只是感到暂时的愉悦，但是事情被拖延了。\n- 如何克服拖延症： **立即去做**！！研究发现，当人们开始做不喜欢的事不久，大脑中痛苦的感觉就消失了！\n\n###**熟能生巧**###\n\n当我们学习一些具体事物的时候，只要将它和现实中的事物进行“链接”，我们就能掌握这个知识。但如果我们要学习的内容是抽象的数学概念和情感感觉或者其他事物的时候，由于现实生活中没有这种具体或者类比事物，我们很难对其进行学习和掌握。因此在学习这类概念的时候，我们需要人为地创建“思维模式”（PATTERN），并通过练习，不断增强这种思维模式。\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/2.jpg)\n\n在理解一些抽象概念时，在思考过程中创建的思维模式是具体而真实的，都是从起点开始一个神经元通过轴突、突触、树突传递到另一个神经元。当你不断地运用某一种思维模式的时候，他在你的脑海中就不断地根深蒂固（颜色越来越深）。\n\n第一次形成的思考模式是用“发散模式”发现问题解决路径之后，大脑将切换到“集中模式”，并记录该模式，在之后解决同样问题的时候，便直接调用这个模式，从而其在大脑中的路径颜色就越来越深，越来越牢固\n\n###**关于记忆**###\n\n记忆分为工作记忆和长期记忆。\n\n- 工作记忆：与要立即处理的问题相关的记忆，位于大脑前额皮质层（prefrontal cortex），现在广泛认为工作记忆能记住4个信息块。工作记忆就像一块黑板，并不是很好用，为了将要记忆的东西储存到工作记忆中，需要经常重复。当我们集中精力记忆一些东西时，会闭上眼睛，避免再摄入其他的新信息进入工作性记忆中，所以短期性记忆的效果很差。\n- 长期记忆：类似于仓库，有巨大的存储空间，但需要多次练习才能在众多信息中找到你想要的信息。不同的长期记忆储存在大脑的不同区域。研究发现，当第一次将工作记忆转化成长期记忆储存时，需要不断重复这个过程几次，这样能提高日后在你需要的时候找到他的几率。要将记忆转化为长期记忆，用间隔时间重复练习效果更好（类似艾宾浩斯曲线）。\n\n\n###**睡眠的重要性**###\n\n在醒着的时候，大脑会产生有害物质（toxic），当睡着的时候，脑细胞与脑细胞之间的间距增大，通过脑中的液体将有害物质从脑细胞的间隙冲走，从而清理掉有害物质。所以睡眠不足意味着你的大脑毒素没有清理干净，毒素会导致你不能清晰地思考。长期睡眠不足还会导致头痛、抑郁、心脏病。糖尿病等。\n\n在睡觉的时候：\n\n- 大脑将你正在学习和思考的一些内容和概念更紧密地结合在一起。\n- 将记忆中不太重要的部分抹去，同时将你想要记住的部分进行强化。\n- 大脑会反复练习学习内容中比较难的部分，这样新的神经元模式会不断加深和强化\n- 增强理解和解决复杂问题的能力。睡觉时，大脑前额皮质层的意识钝化，这使得大脑的其他部分更容易交流，从而将正在学习的内容进行有序的整合，以利于理解和记忆。\n\n**所以在睡前复习今天所学的知识，能在睡梦中更好地理解和强化这些内容。**\n<br>\n##**Chunking**##\n###**What is a chunk?**###\n- Chunking is the mental leap that helps you unite bits of information together through meaning.\n- A chunk means a network of neurons that are used to firing together so you can think a thought or perform an action smoothly and effectively.\n\nWhen you're focusing your attention on something it's almost as if you have an octopus.\n![octopus](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/3.jpg)\nThe octopus of attention that slips it's tentacles through those four slots of working memory when necessary to help you make connections to information that you might have in various parts of your brain.\n\n\n###**How to form a chunk?**\nChunks are best built with focused, undivided attention, understanding of the basic idea.\n> \n1. The first step on chunking is simply to focus your undivided attention on the information you want to chunk.\n2. The second step in chunking is to understand the basic idea you're trying to chunk, whether it's understanding a concept. Understanding is like a superglue that helps hold the underlying memory traces together. It creates broad encompassing traces that can link to other memory traces.\n3. The third step to chunking is gaining context, so you can see not just how, but also when to use this chunk. Context means going beyond the initial problem and seeing more broadly, repeating and practicing with both related and unrelated problems, so that you can see not only when to use the chunk, but when not to use it. This helps you see how your newly formed chunk fits into the bigger picture.\n\n---\n- Focused practice and repetition, the creation of strong memory traces, helps you to create chunks.\n- Doing a rapid two-minute picture walk through a chapter in a book before you begin studying it, glancing at pictures and section headings, can allow you to gain a sense of the big picture.\n- Simple recall, trying to remember the key points without looking at the page, is one of the best ways to help the chunking process along, rather than passive rereading, will make your study time more focused and effective.\n- Test yourself frequently. Mistakes are a good thing to make when you're learning.\n- Try to avoid depending too much on highlighting, which can fool you into thinking that the material is going into your brain when it actually isn't.\n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/4.jpg)\n\n\n**When you're trying to figure something out, if you have a good library of these chunks, you can more easily skip to the right solution by metaphorically speaking, listening to whispers from your diffuse mode. Your diffuse mode can help you connect two or more chunks together in new ways to solve novel problems.**\n<br>\n\n###**如何阅读**###\n最有效的办法是读完一遍后马上再读一遍，共两遍。\n\n- 第一遍是正常通读，不要追求快，需要时不时停下来思考。\n- 读第二遍时同时写下**读书笔记**，书中作为例子的故事可以跳过。要专注于思想脉络。读一章，记一章笔记，直至读完。回顾笔记，整理思路。\n> ①清晰地表现每一章的逻辑脉络。\n  ②带走书中所有的亮点（小故事、想法等）。\n  ③有大量的自己的看法和心得。\n  ④发现这本书和你脑中知识的联系。\n\n**总结：**\n1. 只在“`学习区`”练习；\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/5.jpg)\n2. 把要训练的内容分成有针对性的`小块`, 对每一个小块进行`重复练习`；\n3. 在整个练习过程中， 随时能获得有效的`反馈`；\n4. 练习时注意力必须`高度集中`。\n<br>\n<br>\n`To be continued`\n\nReference:\n1. MOOC学院  [learning how to learn 笔记](http://mooc.guokr.com/course/1484/Learning-How-to-Learn--Powerful-mental-tools-to-help-you-master-tough-subjects/note/)\n2. cousera Reading","slug":"Learning how to learn","updated":1415698744000,"excerpt":"<p>cousera课:<a href=\"https://class.coursera.org/learning-002\" target=\"_blank\" rel=\"external\">learning how to learn</a>笔记</p>\n<h2 id=\"Focused_versus_Diffuse_Thinking\"><strong>Focused versus Diffuse Thinking</strong></h2>\n<h3 id=\"专注模式和发散模式\"><strong>专注模式和发散模式</strong></h3>\n<p>我们人类有两种最基本的思考模式：</p>\n<ul>\n<li>专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。</li>\n<li>发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg\" alt=\"思考模式\"><br>","_id":"xxsmyasx20hoqbkw","categories":[],"photos":[],"link":""},{"layout":"post","title":"How to start a startup","date":1414729080000,"comments":true,"tags":["fq0qem8t0y0moazl","kda4984hd0e8h1qo"],"content":"<p>网易公开课：<a href=\"http://v.163.com/special/opencourse/startup.html\" target=\"_blank\" rel=\"external\">如何创业</a> Stanford CS183B</p>\n<p><strong>Outcome</strong> =<code>Idea</code> x <code>Product</code> x <code>Teams</code> x <code>Execution</code> x <code>Luck</code>(random # between 0 and 10,000)</p>\n<p><strong>Four critical parts:</strong></p>\n<h3 id=\"A_Great_Idea\"><strong>A Great Idea</strong></h3>\n<p>It includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.</p>\n<ul>\n<li>Even though plans themselves are worthless,to exercise a planning is really valuable.</li>\n<li>You need to build a business that is difficult to replicate.</li>\n<li>Startup should feel like an important mission.</li>\n<li>You want an idea that turns into a monopoly,but you can’t get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.<br><a id=\"more\"></a><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/1.jpg\" alt=\"\"></li>\n<li>This is why the best ideas often look terrible at the beginning.</li>\n<li>You need a market that’s going to be big in ten years.</li>\n<li>More important than starting any particular startup is getting to know a lot of potential co-founders.</li>\n<li>The importance of thinking about what customers want, and thinking about the demands of the market.<br><br></li>\n</ul>\n<h3 id=\"Building_a_Great_Product\"><strong>Building a Great Product</strong></h3>\n<p>Broad definition: It includes customer support and copyright explaining the product.Anything involved in your customers interaction with what you build for them. </p>\n<ul>\n<li>Great Ideas turn to great product. A great product is the secret to long term growth hacking.</li>\n<li>Build something users love.Its better to build something that a small number of users love, than to build something that a large number of users like. </li>\n<li>Start with something simple. Its much much easier to make a great product if you have something simple.</li>\n<li>Talk to users. You need some users to help with the feedback cycle.The way to get those users is manually.You should go recruit them by hand. Don’t do things like buy google ads in the early days to get initial users.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/2a.jpg\" alt=\"\"></p>\n<ul>\n<li>You should make this feedback loop as tight as possible.The best companies usually have the tightest feedback loops.</li>\n</ul>\n<p><br></p>\n<h3 id=\"Team\"><strong>Team</strong></h3>\n<p>Cofounder relationships are among the most important in the entire company. The number one cause of early death for startups is cofounder blowups.</p>\n<ul>\n<li>It’s better to have no cofounder than to have a bad cofounder, but it’s still bad to be a solo founder. Two or three cofounders seems to be about perfect. </li>\n<li>At the beginning, you should only hire when you desperately need to,because the cost of getting an early hire wrong is really high. </li>\n<li>Do not hire mediocre people.Mediocre people at huge companies will cause some problems, but it won’t kill the company. A single mediocre hire within the first five will often in fact kill a startup.</li>\n</ul>\n<p><strong>There are three things I look for in a hire.</strong> </p>\n<ul>\n<li>Are they smart? </li>\n<li>Do they get things done? </li>\n<li>Do I want to spend a lot of time around them?</li>\n</ul>\n<p>You can learn a lot about all three of these things in an interview but the very best way is working together, so ideally someone you’ve worked together with in the past and in that case you probably don’t even need an interview. If you haven’t, then I think it’s way better to work with someone on a project for a day or two before hiring them. </p>\n<p>For most of the early hires that you make at a startup, experience probably doesn’t matter that much and you should go for aptitude and belief in what you’re doing. </p>\n<ul>\n<li>good communication skills tend to correlate with hires that work out.</li>\n<li>Good communication skills</li>\n<li>Manically determined</li>\n<li>Pass the animal test</li>\n<li>Would feel comfortable reporting to them</li>\n</ul>\n<p><strong>You’ve hired the best - now keep them around!</strong><br>You have to make sure your employees are happy and feel valued.</p>\n<blockquote>\n<p>Dan Pink talks about these three things that motivate people to do great work:<br> autonomy, mastery, and purpose.</p>\n</blockquote>\n<p>Firing people fast when it’s not working.<br><br></p>\n<h3 id=\"Execution\"><strong>Execution</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/3.jpg\" alt=\"\"></p>\n<p>Execution gets divided into two key questions. </p>\n<ul>\n<li>Can you figure out what to do ?</li>\n<li>Can you get it done?<br><br>    <em>1.Focus</em><ul>\n<li>what are you spending time and money on?</li>\n<li>what are the two or three most important things?</li>\n</ul>\n</li>\n</ul>\n<p>One of the hardest parts about being a founder is that there are a hundred important things competing for your attention every day. And you have to identify the right two or three, work on those, and then ignore, delegate, or defer the rest.You only get points when you make something the market wants. So if you work really hard on the wrong things, no one will care.</p>\n<p><em>2.intense</em> </p>\n<ul>\n<li>Startups only work at a fairly intense level. </li>\n<li>The secret to start up success is extreme focus and extreme dedication. </li>\n<li>Startups are not the best choice for work life balance and that’s sort of just the sad reality.<br>The good news here is that a small amount of extra work on the right thing makes a huge difference. One example that I like to give is thinking about the viral coefficient for a consumer web product. How many new users each existing user brings in. If it’s .99 the company will eventually flatline and die. And if it’s 1.01 you’ll be in this happy place of exponential growth forever.<br>  <img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/4.jpg\" alt=\"\"><br>  So this is one concrete example of where a tiny extra bit of work is the difference between success and failure. </li>\n</ul>\n<p><br><br><strong>The momentum and growth are the lifeblood of startups.</strong></p>\n<blockquote>\n<p>A good way to keep momentum is to establish an operating rhythm at the company early. Where you ship product and launch new features on a regular basis. Where you’re reviewing metrics every week with the entire company. </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/5.jpg\" alt=\"\"></p>\n<p>Don’t worry about a competitor at all, until they’re actually beating you with a real, shipped product. Press releases are easier to write than code, and that is still easier than making a great product. So remind your company of this, and this is sort of a founder’s role, is not to let the company get down because of the competitors in the press.</p>\n<p><br><br><br><br><br><br><br><br><code>To be continued</code></p>\n","source":"_posts/How to start a startup.markdown","raw":"---\nlayout: post\ntitle: \"How to start a startup\"\ndate: 2014-10-31 12:18\ncomments: true\ntags: \n\t- 创业\n\t- Open Courses\n\n---\n网易公开课：[如何创业](http://v.163.com/special/opencourse/startup.html) Stanford CS183B\n\n**Outcome** =`Idea` x `Product` x `Teams` x `Execution` x `Luck`(random # between 0 and 10,000)\n\n**Four critical parts:**\n\n###**A Great Idea**\nIt includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.\n\n- Even though plans themselves are worthless,to exercise a planning is really valuable.\n- You need to build a business that is difficult to replicate.\n- Startup should feel like an important mission.\n- You want an idea that turns into a monopoly,but you can't get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.\n<!--more-->\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/1.jpg)\n- This is why the best ideas often look terrible at the beginning.\n- You need a market that's going to be big in ten years.\n- More important than starting any particular startup is getting to know a lot of potential co-founders.\n- The importance of thinking about what customers want, and thinking about the demands of the market.\n<br>\n\n###**Building a Great Product**\nBroad definition: It includes customer support and copyright explaining the product.Anything involved in your customers interaction with what you build for them. \n\n- Great Ideas turn to great product. A great product is the secret to long term growth hacking.\n- Build something users love.Its better to build something that a small number of users love, than to build something that a large number of users like. \n- Start with something simple. Its much much easier to make a great product if you have something simple.\n- Talk to users. You need some users to help with the feedback cycle.The way to get those users is manually.You should go recruit them by hand. Don't do things like buy google ads in the early days to get initial users.\n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/2a.jpg)\n\n- You should make this feedback loop as tight as possible.The best companies usually have the tightest feedback loops.\n\n<br>\n###**Team**\nCofounder relationships are among the most important in the entire company. The number one cause of early death for startups is cofounder blowups.\n\n-  It's better to have no cofounder than to have a bad cofounder, but it's still bad to be a solo founder. Two or three cofounders seems to be about perfect. \n-  At the beginning, you should only hire when you desperately need to,because the cost of getting an early hire wrong is really high. \n-  Do not hire mediocre people.Mediocre people at huge companies will cause some problems, but it won't kill the company. A single mediocre hire within the first five will often in fact kill a startup.\n\n**There are three things I look for in a hire.** \n\n- Are they smart? \n- Do they get things done? \n- Do I want to spend a lot of time around them?\n\nYou can learn a lot about all three of these things in an interview but the very best way is working together, so ideally someone you've worked together with in the past and in that case you probably don't even need an interview. If you haven't, then I think it's way better to work with someone on a project for a day or two before hiring them. \n\nFor most of the early hires that you make at a startup, experience probably doesn't matter that much and you should go for aptitude and belief in what you're doing. \n\n- good communication skills tend to correlate with hires that work out.\n- Good communication skills\n- Manically determined\n- Pass the animal test\n- Would feel comfortable reporting to them\n\n**You've hired the best - now keep them around!**\nYou have to make sure your employees are happy and feel valued.\n\n> Dan Pink talks about these three things that motivate people to do great work:   \n autonomy, mastery, and purpose.\n\nFiring people fast when it's not working.\n<br>\n###**Execution**\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/3.jpg)\n\nExecution gets divided into two key questions. \n\n- Can you figure out what to do ?\n- Can you get it done?\n<br>    *1.Focus*\n    - what are you spending time and money on?\n    - what are the two or three most important things?\n    \nOne of the hardest parts about being a founder is that there are a hundred important things competing for your attention every day. And you have to identify the right two or three, work on those, and then ignore, delegate, or defer the rest.You only get points when you make something the market wants. So if you work really hard on the wrong things, no one will care.\n\n  \n*2.intense* \n\n- Startups only work at a fairly intense level. \n- The secret to start up success is extreme focus and extreme dedication. \n- Startups are not the best choice for work life balance and that's sort of just the sad reality.\nThe good news here is that a small amount of extra work on the right thing makes a huge difference. One example that I like to give is thinking about the viral coefficient for a consumer web product. How many new users each existing user brings in. If it's .99 the company will eventually flatline and die. And if it's 1.01 you'll be in this happy place of exponential growth forever.\n    ![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/4.jpg)\n    So this is one concrete example of where a tiny extra bit of work is the difference between success and failure. \n    \n<br>\n**The momentum and growth are the lifeblood of startups.**\n\n> A good way to keep momentum is to establish an operating rhythm at the company early. Where you ship product and launch new features on a regular basis. Where you’re reviewing metrics every week with the entire company. \n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/5.jpg)\n\nDon’t worry about a competitor at all, until they’re actually beating you with a real, shipped product. Press releases are easier to write than code, and that is still easier than making a great product. So remind your company of this, and this is sort of a founder’s role, is not to let the company get down because of the competitors in the press.\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n<br>\n<br>\n`To be continued`\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"How to start a startup","updated":1415698680000,"excerpt":"<p>网易公开课：<a href=\"http://v.163.com/special/opencourse/startup.html\" target=\"_blank\" rel=\"external\">如何创业</a> Stanford CS183B</p>\n<p><strong>Outcome</strong> =<code>Idea</code> x <code>Product</code> x <code>Teams</code> x <code>Execution</code> x <code>Luck</code>(random # between 0 and 10,000)</p>\n<p><strong>Four critical parts:</strong></p>\n<h3 id=\"A_Great_Idea\"><strong>A Great Idea</strong></h3>\n<p>It includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.</p>\n<ul>\n<li>Even though plans themselves are worthless,to exercise a planning is really valuable.</li>\n<li>You need to build a business that is difficult to replicate.</li>\n<li>Startup should feel like an important mission.</li>\n<li>You want an idea that turns into a monopoly,but you can’t get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.<br>","_id":"cu5fm03blj5tc1xm","categories":[],"photos":[],"link":""},{"layout":"post","title":"Git Real","date":1415420280000,"comments":true,"tags":["pt7sjs1fm0102uah"],"content":"<h1 id=\"STAGING_&amp;_REMOTES\"><strong>STAGING &amp; REMOTES</strong></h1>\n<h3 id=\"UNSTAGED_DIFFERENCES\"><strong>UNSTAGED DIFFERENCES</strong></h3>\n<blockquote>\n<p>A new file has been added to the site. Run the command to see what all has changed since your last commit.</p>\n</blockquote>\n<p><code>git status</code> will list out which files have changed. If we want to see the actual changes:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<h3 id=\"STAGE_NEW_FILE\"><strong>STAGE NEW FILE</strong></h3>\n<blockquote>\n<p>There it is: <code>ostrich.html</code>. Stage it to be committed.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> ostrich.html</div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a></p>\n<h3 id=\"STAGED_DIFFERENCES\"><strong>STAGED DIFFERENCES</strong></h3>\n<blockquote>\n<p>We’ve added <code>ostrich.html</code> to the staging area, but your co-worker has stopped by and asked to see the new page first. Run a <code>diff</code> on the staged changes.</p>\n</blockquote>\n<p><code>git diff</code> is great for seeing <strong>unstaged differences</strong> since last commit, but you need the <code>--staged</code> option in order to see staged changes.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">diff</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">staged</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"UNSTAGE_FILES\"><strong>UNSTAGE FILES</strong></h3>\n<blockquote>\n<p>“Wait,” says the co-worker. “They didn’t tell you? The client “wants the ostrich section pulled - they couldn’t get a license to “sell them.” Better unstage <code>ostrich.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> HEAD ostrich.html</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"SKIP_STAGING\"><strong>SKIP STAGING</strong></h3>\n<blockquote>\n<p>We’ve modified the <code>index.html</code> file, adding a link to the cats section. Since that file is already tracked, you can just skip staging and commit it with one command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit <span class=\"operator\">-a</span> -m <span class=\"string\">\"index.html adding a link\"</span></div></pre></td></tr></table></figure>\n\n<p><code>-a</code>: Add changes from all tracked files. Doesn’t add new(untracked) files.</p>\n<h3 id=\"ADD_TO_COMMIT\"><strong>ADD TO COMMIT</strong></h3>\n<blockquote>\n<p>Whoops! We forgot to add the <code>cats.html</code> page that <code>index.html</code> links to, and it should really be <code>amended</code> on the same commit. To do this, let’s first stage <code>cats.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> cats.html</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Second, let’s add <code>cats.html</code> to the prior commit and change the commit message in one step. </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m \"modified index.html & add cats.html\"</span></span></div></pre></td></tr></table></figure>\n\n<p>You don’t want to make a new commit, you want to amend the previous one, so what I’m trying to say is: Use the amend option(<strong>add to the last commit</strong>)<br>Whatever has been staged is added to last commit!</p>\n<h3 id=\"ROLL_BACK_COMMIT\"><strong>ROLL BACK COMMIT</strong></h3>\n<blockquote>\n<p>Wait, you’re getting word that the cats section might be cancelled. <strong>Undo the commit, and put the files back in staging.</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span></div></pre></td></tr></table></figure>\n\n<p><code>soft</code>: Reset into staging<br><code>HEAD^</code>: Move to commit before ‘HEAD’<br>Now I can make changes, and re-commit</p>\n<h3 id=\"DISCARD_CHANGES\"><strong>DISCARD CHANGES</strong></h3>\n<blockquote>\n<p>Forget the whole thing - the client’s license to sell cats is suspended during some kind of “investigation”. Discard your changes to <code>cats.html</code> and <code>index.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- cats.html <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<p>Blow away all changes since last commit.</p>\n<h3 id=\"REMOVE_COMMIT\"><strong>REMOVE COMMIT</strong></h3>\n<blockquote>\n<p>1.The next feature is a banner on the main page, saying the pet shop will soon be offering badgers. Add and commit <code>index.html</code> in one step, skipping the staging area.<br>2.Your co-worker is back, looking sheepish. “Never mind the badgers ad. The client’s legal department said that was a liability risk.” <strong>You’ll need to remove the most recent commit, and all its changes.</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -am <span class=\"string\">\"add index.html\"</span></span></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD^</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"NEW_REMOTE_REPOS_AND_PUSH\"><strong>NEW REMOTE REPOS AND PUSH</strong></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add <span class=\"variable\">&lt;name&gt;</span> <span class=\"variable\">&lt;address&gt;</span> /<span class=\"keyword\">*</span>To add new remotes<span class=\"keyword\">*</span>/</div><div class=\"line\">git remote rm <span class=\"variable\">&lt;name&gt;</span> /<span class=\"keyword\">*</span>To remove remotes<span class=\"keyword\">*</span>/</div><div class=\"line\">git remote -v /<span class=\"keyword\">*</span>show remote repositories<span class=\"keyword\">*</span>/</div><div class=\"line\">git push -u <span class=\"variable\">&lt;name&gt;</span> <span class=\"variable\">&lt;branch&gt;</span> /<span class=\"keyword\">*</span>To push to remotes. The -u tells Git to remember the parameters, so that next time we can simply run git push <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"CLONING_&amp;_BRANCHING\"><strong>CLONING &amp; BRANCHING</strong></h1>\n<h3 id=\"CLONE_A_REPO\"><strong>CLONE A REPO</strong></h3>\n<blockquote>\n<p>The IT department installed an OS update on your workstation - and wiped the hard drive in the process. Clone the Pet Shop repo from <code>git@example.com:example/petshop.git</code> so you can resume work.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> clone git<span class=\"variable\">@example</span>.com:example/petshop.git</div></pre></td></tr></table></figure>\n\n<h3 id=\"LIST_REMOTES\"><strong>LIST REMOTES</strong></h3>\n<blockquote>\n<p>Our repo is cloned locally, but how do we check to a list of our remotes? Lets get a list of all our remotes with a verbose output.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v /<span class=\"keyword\">*</span>show remote repositories<span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE_A_BRANCH\"><strong>CREATE A BRANCH</strong></h3>\n<blockquote>\n<p>We need to add a section for the pet grooming salon on the site. You want to isolate this new feature from your other work. Create a new branch named <code>grooming</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> branch grooming</div></pre></td></tr></table></figure>\n\n<h3 id=\"SWITCH_TO_BRANCH\"><strong>SWITCH TO BRANCH</strong></h3>\n<blockquote>\n<p>You’ve made the new branch, but your commits are still going to the old one. Switch to the <code>grooming</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout grooming</div></pre></td></tr></table></figure>\n\n<h3 id=\"COMBINE_BRANCH\"><strong>COMBINE BRANCH</strong></h3>\n<blockquote>\n<p>You’ve finished work on the <code>grooming</code> branch and are ready to bring your work back into <code>master</code>. First, check out the master branch…<br>Then,bring your changes from the grooming branch into the …master branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> grooming</span></div><div class=\"line\">git branch -d grooming <span class=\"comment\">/*delete the local branch*/</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"BRANCH_SHORTCUTS\"><strong>BRANCH SHORTCUTS</strong></h3>\n<blockquote>\n<p>The pet shop wants to try selling yet another product line! Let’s do this one in a branch in case it gets cancelled like the others. Using a single command, create and check out an <code>octopus</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout -b octopus</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"COLLABORATION_BASICS\"><strong>COLLABORATION BASICS</strong></h1>\n<h3 id=\"SEND_CHANGES\"><strong>SEND CHANGES</strong></h3>\n<blockquote>\n<p>You’ve committed some work so now it’s time to share! Push it out for your co-workers to see.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">push</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"GET_CHANGES\"><strong>GET CHANGES</strong></h3>\n<blockquote>\n<p>Looks like your co-worker pushed some changes before you did! Your push was rejected. Retrieve the latest changes, and merge them into your branch in one step.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> pull</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/1.pull.jpg\" alt=\"1.pull\"></p>\n<h3 id=\"FIX_CONFLICTS\"><strong>FIX CONFLICTS</strong></h3>\n<blockquote>\n<p>Git is reporting a conflict with your co-worker’s changes in “readme”. Just discard his changes, and keep your own (the HEAD).</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/2.jpg\" alt=\"2\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/3.jpg\" alt=\"3\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/4.jpg\" alt=\"4\"></p>\n<p><br></p>\n<h1 id=\"BRANCHING\"><strong>BRANCHING</strong></h1>\n<h3 id=\"PUSH_BRANCH\"><strong>PUSH BRANCH</strong></h3>\n<blockquote>\n<p>A new kind of pet is for sale at the store! Maybe this one will catch on with the public. You’ve committed your work to the local <code>hamsters</code> branch; now publish this branch in the <code>origin</code> repo.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">push</span> origin hamsters</div></pre></td></tr></table></figure>\n\n<p>Links locak branch to the remote branch(tracking)</p>\n<h3 id=\"GET_REMOTE_BRANCH\"><strong>GET REMOTE BRANCH</strong></h3>\n<blockquote>\n<p>“git branch -r” does not query the remotes to check for new branches. In order to see a new remote branch you first have to do a fetch or a pull. So retrieve the remote “weasel” branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<p>Pull seems like a good choice, but pull will auto merge branches, you only want to update your local branch information, so use fetch instead</p>\n<h3 id=\"REMOTE_BRANCHES\"><strong>REMOTE BRANCHES</strong></h3>\n<blockquote>\n<p>Your co-worker said he wants you to look over a new branch on “origin”, but he didn’t tell you its name. Get a list of remote branches.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -<span class=\"keyword\">r</span> /*<span class=\"keyword\">list</span> <span class=\"keyword\">all</span> remote branches*/</div></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE_ON_REMOTE\"><strong>DELETE ON REMOTE</strong></h3>\n<blockquote>\n<p>Guess how the product launch went with the weasels? Better delete the “weasel” branch on “origin”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin <span class=\"symbol\">:weasel</span></div></pre></td></tr></table></figure>\n\n<p>Use git push to delete the <strong>remote branch</strong></p>\n<h3 id=\"BRANCH_STATUS\"><strong>BRANCH STATUS</strong></h3>\n<blockquote>\n<p>Wait, did you already pull that branch locally? Check for stale branches that are tracking “origin”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"literal\">show</span> origin <span class=\"comment\">/* show the state of your branches*/</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"CLEAN_BRANCHES\"><strong>CLEAN BRANCHES</strong></h3>\n<blockquote>\n<p>You still have a stale local branch tracking the now-deleted <code>origin/weasel</code>. Clean up your local references.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote prune origin /<span class=\"keyword\">*</span> remove deleted remote<span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<h3 id=\"LIST_TAGS\"><strong>LIST TAGS</strong></h3>\n<blockquote>\n<p>With the weasel threat eliminated, the pet store wants to deploy the site. Let’s see, what was the previous version number? Display the tags to find out.Create a tag accordingly</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span>  /*<span class=\"keyword\">list</span> <span class=\"keyword\">all</span> <span class=\"keyword\">tags</span>*/</div></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE_TAG\"><strong>CREATE TAG</strong></h3>\n<blockquote>\n<p>Ah, yes, the last release was “v1.3.1”. You’ve added the hamsters, so it would be best to release this as “v1.3.2”. Create a tag accordingly.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span> -<span class=\"keyword\">a</span> v1.<span class=\"number\">3.2</span> -<span class=\"keyword\">m</span> <span class=\"string\">\"version 0.03\"</span>  /*<span class=\"built_in\">add</span> <span class=\"keyword\">a</span> <span class=\"keyword\">new</span> <span class=\"keyword\">tag</span>*/</div></pre></td></tr></table></figure>\n\n<h3 id=\"SEND_TAGS\"><strong>SEND TAGS</strong></h3>\n<blockquote>\n<p>Push your tag to origin.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push --<span class=\"keyword\">tags</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"RETRIEVE_TAG\"><strong>RETRIEVE TAG</strong></h3>\n<blockquote>\n<p>The client is requesting that you roll back to the prior release. (Seriously? What could have gone wrong with the hamsters?) Retrieve the release tagged “v1.3.1”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout v1.<span class=\"number\">3</span>.<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"REBASE_BELONG_TO_US\"><strong>REBASE BELONG TO US</strong></h1>\n<h3 id=\"REBASE\"><strong>REBASE</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/7.jpg\" alt=\"7\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/8.jpg\" alt=\"8\"></p>\n<blockquote>\n<p>You’ve made some commits to a feature branch, but you’ve also committed a hotfix on master that would make a merge messy. Check out the <code>kennel</code> branch so you can rebase it on <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout kennel</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>OK, you’re on the <code>kennel</code> branch. Our goal is to be able to merge <code>kennel</code> back into <code>master</code> without conflicts or a merge commit. Rebase the current <code>kennel</code> branch on <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase master</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>With the rebase complete, <code>kennel</code> should merge with <code>master</code> cleanly. Switch branches back to <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout master</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>We’re on master, and we know the <code>kennel</code> will merge cleanly. Go ahead and merge in the <code>kennel</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> kennel</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"REMOTE\"><strong>REMOTE</strong></h3>\n<blockquote>\n<p>Your co-worker has pushed changes to the <code>master</code> branch on the <code>origin</code> repo. Retrieve it without merging it so we can replay our work on top of it.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/5.jpg\" alt=\"5\"></p>\n<blockquote>\n<p>Now that your local repo knows of the latest changes on origin/master, move your master commits after the commits from origin/master.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase</div></pre></td></tr></table></figure>\n\n<p>Use <code>git rebase</code> to apply your local commits ahead of those on origin/master.Current branch master is up to date. Success!<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/6.jpg\" alt=\"6\"></p>\n<h3 id=\"CONFLICT\"><strong>CONFLICT</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/9.jpg\" alt=\"9\"></p>\n<blockquote>\n<p>Your co-worker has pushed before you yet again. Better fetch the changes…</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now run another rebase to move your commit after the latest fetched one.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Uh, oh! Looks like the rebase is in conflict this time! Edit <code>index.html</code> to fix the conflicting lines. We want to keep our version with <code>Cats</code> and <code>Dogs</code>.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=\"en\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;title&gt;Our Cat-alog&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;nav&gt;</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD   &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"cat.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"dog.html\"&gt;Dogs&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">======= &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"cat.html\"&gt;Felines&lt;/a&gt;&lt;/li&gt;   &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"dog.html\"&gt;Canines&lt;/a&gt;&lt;/li&gt;   &lt;!--删除 --&gt;</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add dogs.  &lt;!--删除 --&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    &lt;/nav&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now mark the conflicts in “index.html” as resolved.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now that all conflicts have been resolved and those files added, continue the current rebase in process.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"HISTORY_AND_CONFIGURATION\"><strong>HISTORY AND CONFIGURATION</strong></h1>\n<blockquote>\n<p>1.All those e-mail addresses and SHAs are making it hard to see commit messages in your history. Try viewing the log with one commit per line.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">--pretty=oneline</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.The client called with an urgent question about chew toys, and now you can’t remember what you last modified. Bring up a summary of file changes.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<p>‘git log’ will show you your past commits, but it doesn’t show you any changes in files, that’s what ‘git diff’ is for.</p>\n<blockquote>\n<p>3.You’ve finished adding elephants to the catalog. You need to write up a change log for the client, and you want to ensure you don’t miss anything. Compare the <code>master</code> branch to your <code>elephant</code> branch to show what’s new.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff master elephant</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>4.You rebased your latest commit after a commit from your co-worker, but now the page is rendering strangely. To figure out why, get a diff that includes the previous commit, as well as its parent.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff HEAD~<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.Well, you see the changes, but you’re not sure what your co-worker was trying to accomplish. Display the diffs along with the log to determine what’s going on.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> -<span class=\"keyword\">p</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>6.Wait, what? You don’t understand these lines in <code>index.html</code>. You’d better find out who committed them, so you can ask them what they’re supposed to do.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git blame <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<p>Use <code>git blame</code> to see the annotated source, so you can figure out who made all these changes</p>\n<h3 id=\"EXCLUDING\"><strong>EXCLUDING</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/10.jpg\" alt=\"10\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/11.jpg\" alt=\"11\"></p>\n<h3 id=\"REMOVING\"><strong>REMOVING</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/12.jpg\" alt=\"12\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/13.jpg\" alt=\"13\"></p>\n<h3 id=\"CONFIG\"><strong>CONFIG</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/14.jpg\" alt=\"14\"></p>\n<h3 id=\"ALIASES\"><strong>ALIASES</strong></h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/15.jpg\" alt=\"15\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/16.jpg\" alt=\"16\"></p>\n","source":"_posts/Git Real.markdown","raw":"---\nlayout: post\ntitle: \"Git Real\"\ndate: 2014-11-08 12:18\ncomments: true\ntags: \n\t- git\n\n---\n\n#**STAGING & REMOTES**#\n###**UNSTAGED DIFFERENCES**###\n> A new file has been added to the site. Run the command to see what all has changed since your last commit.\n\n`git status` will list out which files have changed. If we want to see the actual changes:\n```\ngit diff\n```\n\n###**STAGE NEW FILE**###\n> There it is: `ostrich.html`. Stage it to be committed.\n\n```\ngit add ostrich.html\n```\n<!--more-->\n###**STAGED DIFFERENCES**###\n> We've added `ostrich.html` to the staging area, but your co-worker has stopped by and asked to see the new page first. Run a `diff` on the staged changes.\n\n`git diff` is great for seeing **unstaged differences** since last commit, but you need the `--staged` option in order to see staged changes.\n```\ngit diff --staged\n```\n\n###**UNSTAGE FILES**###\n> \"Wait,\" says the co-worker. \"They didn't tell you? The client \"wants the ostrich section pulled - they couldn't get a license to \"sell them.\" Better unstage `ostrich.html`.\n```\ngit reset HEAD ostrich.html\n```\n\n###**SKIP STAGING**###\n> We've modified the `index.html` file, adding a link to the cats section. Since that file is already tracked, you can just skip staging and commit it with one command.\n\n```\ngit commit -a -m \"index.html adding a link\"\n```\n`-a`: Add changes from all tracked files. Doesn't add new(untracked) files.\n\n###**ADD TO COMMIT**###\n> Whoops! We forgot to add the `cats.html` page that `index.html` links to, and it should really be `amended` on the same commit. To do this, let's first stage `cats.html`.\n\n```\ngit add cats.html\n```\n> Second, let's add `cats.html` to the prior commit and change the commit message in one step. \n```\ngit commit --amend -m \"modified index.html & add cats.html\"\n```\nYou don't want to make a new commit, you want to amend the previous one, so what I'm trying to say is: Use the amend option(**add to the last commit**)\nWhatever has been staged is added to last commit!\n\n###**ROLL BACK COMMIT**###\n> Wait, you're getting word that the cats section might be cancelled. **Undo the commit, and put the files back in staging.**\n\n```\ngit reset --soft HEAD^\n```\n`soft`: Reset into staging\n`HEAD^`: Move to commit before 'HEAD'\nNow I can make changes, and re-commit\n\n###**DISCARD CHANGES**###\n> Forget the whole thing - the client's license to sell cats is suspended during some kind of \"investigation\". Discard your changes to `cats.html` and `index.html`.\n\n```\ngit checkout -- cats.html index.html\n```\nBlow away all changes since last commit.\n\n###**REMOVE COMMIT**###\n> 1.The next feature is a banner on the main page, saying the pet shop will soon be offering badgers. Add and commit `index.html` in one step, skipping the staging area.\n2.Your co-worker is back, looking sheepish. \"Never mind the badgers ad. The client's legal department said that was a liability risk.\" **You'll need to remove the most recent commit, and all its changes.**\n\n```\ngit commit -am \"add index.html\"\ngit reset --hard HEAD^\n```\n###**NEW REMOTE REPOS AND PUSH**###\n```\ngit remote add <name> <address> /*To add new remotes*/\ngit remote rm <name> /*To remove remotes*/\ngit remote -v /*show remote repositories*/\ngit push -u <name> <branch> /*To push to remotes. The -u tells Git to remember the parameters, so that next time we can simply run git push */ \n\n```\n\n<br>\n#**CLONING & BRANCHING**#\n###**CLONE A REPO**###\n> The IT department installed an OS update on your workstation - and wiped the hard drive in the process. Clone the Pet Shop repo from `git@example.com:example/petshop.git` so you can resume work.\n\n```\ngit clone git@example.com:example/petshop.git\n```\n\n###**LIST REMOTES**###\n> Our repo is cloned locally, but how do we check to a list of our remotes? Lets get a list of all our remotes with a verbose output.\n\n```\ngit remote -v /*show remote repositories*/\n```\n###**CREATE A BRANCH**###\n> We need to add a section for the pet grooming salon on the site. You want to isolate this new feature from your other work. Create a new branch named `grooming`.\n\n```\ngit branch grooming\n```\n\n###**SWITCH TO BRANCH**###\n> You've made the new branch, but your commits are still going to the old one. Switch to the `grooming` branch.\n\n```\ngit checkout grooming\n```\n\n###**COMBINE BRANCH**###\n>You've finished work on the `grooming` branch and are ready to bring your work back into `master`. First, check out the master branch...\nThen,bring your changes from the grooming branch into the ...master branch.\n\n```\ngit checkout master\ngit merge grooming\ngit branch -d grooming /*delete the local branch*/\n```\n\n###**BRANCH SHORTCUTS**###\n> The pet shop wants to try selling yet another product line! Let's do this one in a branch in case it gets cancelled like the others. Using a single command, create and check out an `octopus` branch.\n\n```\ngit checkout -b octopus\n```\n\n<br>\n#**COLLABORATION BASICS**#\n###**SEND CHANGES**###\n> You've committed some work so now it's time to share! Push it out for your co-workers to see.\n\n```\ngit push\n```\n###**GET CHANGES**###\n> Looks like your co-worker pushed some changes before you did! Your push was rejected. Retrieve the latest changes, and merge them into your branch in one step.\n\n```\ngit pull\n```\n![1.pull](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/1.pull.jpg)\n###**FIX CONFLICTS**###\n> Git is reporting a conflict with your co-worker's changes in \"readme\". Just discard his changes, and keep your own (the HEAD).\n\n![2](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/2.jpg)\n![3](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/3.jpg)\n![4](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/4.jpg)\n\n<br>\n#**BRANCHING**#\n###**PUSH BRANCH**###\n> A new kind of pet is for sale at the store! Maybe this one will catch on with the public. You've committed your work to the local `hamsters` branch; now publish this branch in the `origin` repo.\n\n```\ngit push origin hamsters \n```\nLinks locak branch to the remote branch(tracking)\n###**GET REMOTE BRANCH**###\n> \"git branch -r\" does not query the remotes to check for new branches. In order to see a new remote branch you first have to do a fetch or a pull. So retrieve the remote \"weasel\" branch.\n\n```\ngit fetch\n```\nPull seems like a good choice, but pull will auto merge branches, you only want to update your local branch information, so use fetch instead\n\n###**REMOTE BRANCHES**###\n> Your co-worker said he wants you to look over a new branch on \"origin\", but he didn't tell you its name. Get a list of remote branches.\n\n```\ngit branch -r /*list all remote branches*/\n```\n\n###**DELETE ON REMOTE**###\n> Guess how the product launch went with the weasels? Better delete the \"weasel\" branch on \"origin\".\n\n```\ngit push origin :weasel\n```\nUse git push to delete the **remote branch**\n\n###**BRANCH STATUS**###\n>Wait, did you already pull that branch locally? Check for stale branches that are tracking \"origin\".\n\n```\ngit remote show origin /* show the state of your branches*/\n```\n###**CLEAN BRANCHES**###\n> You still have a stale local branch tracking the now-deleted `origin/weasel`. Clean up your local references.\n\n```\ngit remote prune origin /* remove deleted remote*/\n```\n###**LIST TAGS**###\n> With the weasel threat eliminated, the pet store wants to deploy the site. Let's see, what was the previous version number? Display the tags to find out.Create a tag accordingly\n\n```\ngit tag  /*list all tags*/\n```\n###**CREATE TAG**###\n> Ah, yes, the last release was \"v1.3.1\". You've added the hamsters, so it would be best to release this as \"v1.3.2\". Create a tag accordingly.\n\n```\ngit tag -a v1.3.2 -m \"version 0.03\"  /*add a new tag*/\n```\n###**SEND TAGS**###\n> Push your tag to origin.\n\n```\ngit push --tags\n```\n###**RETRIEVE TAG**###\n> The client is requesting that you roll back to the prior release. (Seriously? What could have gone wrong with the hamsters?) Retrieve the release tagged \"v1.3.1\".\n\n```\ngit checkout v1.3.1\n```\n\n<br>\n#**REBASE BELONG TO US**#\n###**REBASE**###\n![7](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/7.jpg) \n![8](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/8.jpg)\n> You've made some commits to a feature branch, but you've also committed a hotfix on master that would make a merge messy. Check out the `kennel` branch so you can rebase it on `master`.\n\n```\ngit checkout kennel\n```\n> OK, you're on the `kennel` branch. Our goal is to be able to merge `kennel` back into `master` without conflicts or a merge commit. Rebase the current `kennel` branch on `master`.\n\n```\ngit rebase master\n```\n> With the rebase complete, `kennel` should merge with `master` cleanly. Switch branches back to `master`.\n\n```\ngit checkout master\n```\n> We're on master, and we know the `kennel` will merge cleanly. Go ahead and merge in the `kennel` branch.\n\n```\ngit merge kennel\n```\n\n###**REMOTE**###\n> Your co-worker has pushed changes to the `master` branch on the `origin` repo. Retrieve it without merging it so we can replay our work on top of it.\n\n```\ngit fetch\n```\n![5](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/5.jpg)\n> Now that your local repo knows of the latest changes on origin/master, move your master commits after the commits from origin/master.\n\n```\ngit rebase\n```\nUse `git rebase` to apply your local commits ahead of those on origin/master.Current branch master is up to date. Success!\n![6](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/6.jpg)\n###**CONFLICT**###\n![9](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/9.jpg)\n> Your co-worker has pushed before you yet again. Better fetch the changes...\n\n```\ngit fetch\n```\n> Now run another rebase to move your commit after the latest fetched one.\n\n```\ngit rebase\n```\n> Uh, oh! Looks like the rebase is in conflict this time! Edit `index.html` to fix the conflicting lines. We want to keep our version with `Cats` and `Dogs`.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Our Cat-alog</title>\n  </head>\n  <body>\n    <nav>\n      <ul>\n<<<<<<< HEAD   <!--删除 -->\n        <li><a href=\"cat.html\">Cats</a></li>\n        <li><a href=\"dog.html\">Dogs</a></li>\n======= <!--删除 -->\n        <li><a href=\"cat.html\">Felines</a></li>   <!--删除 -->\n        <li><a href=\"dog.html\">Canines</a></li>   <!--删除 -->\n>>>>>>> Add dogs.  <!--删除 -->\n      </ul>\n    </nav>\n  </body>\n</html>\n```\n> Now mark the conflicts in \"index.html\" as resolved.\n\n```\ngit add index.html\n```\n> Now that all conflicts have been resolved and those files added, continue the current rebase in process.\n\n```\ngit rebase --continue\n```\n<br>\n#**HISTORY AND CONFIGURATION**#\n> 1.All those e-mail addresses and SHAs are making it hard to see commit messages in your history. Try viewing the log with one commit per line.\n\n```\ngit log --pretty=oneline\n```\n> 2.The client called with an urgent question about chew toys, and now you can't remember what you last modified. Bring up a summary of file changes.\n\n```\ngit diff\n```\n'git log' will show you your past commits, but it doesn't show you any changes in files, that's what 'git diff' is for.\n\n> 3.You've finished adding elephants to the catalog. You need to write up a change log for the client, and you want to ensure you don't miss anything. Compare the `master` branch to your `elephant` branch to show what's new.\n    \n```\ngit diff master elephant\n```\n> 4.You rebased your latest commit after a commit from your co-worker, but now the page is rendering strangely. To figure out why, get a diff that includes the previous commit, as well as its parent.\n\n```\ngit diff HEAD~2\n```\n> 5.Well, you see the changes, but you're not sure what your co-worker was trying to accomplish. Display the diffs along with the log to determine what's going on.\n\n```\ngit log -p\n```\n> 6.Wait, what? You don't understand these lines in `index.html`. You'd better find out who committed them, so you can ask them what they're supposed to do.\n\n```\ngit blame index.html\n```\nUse `git blame` to see the annotated source, so you can figure out who made all these changes\n\n\n###**EXCLUDING**###\n![10](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/10.jpg)\n![11](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/11.jpg)\n###**REMOVING**###\n![12](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/12.jpg)\n![13](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/13.jpg)\n###**CONFIG**###\n![14](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/14.jpg)\n###**ALIASES**###\n![15](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/15.jpg)\n![16](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/16.jpg)","slug":"Git Real","updated":1415698592000,"excerpt":"<h1 id=\"STAGING_&amp;_REMOTES\"><strong>STAGING &amp; REMOTES</strong></h1>\n<h3 id=\"UNSTAGED_DIFFERENCES\"><strong>UNSTAGED DIFFERENCES</strong></h3>\n<blockquote>\n<p>A new file has been added to the site. Run the command to see what all has changed since your last commit.</p>\n</blockquote>\n<p><code>git status</code> will list out which files have changed. If we want to see the actual changes:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<h3 id=\"STAGE_NEW_FILE\"><strong>STAGE NEW FILE</strong></h3>\n<blockquote>\n<p>There it is: <code>ostrich.html</code>. Stage it to be committed.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> ostrich.html</div></pre></td></tr></table></figure>\n\n<p>","_id":"vyjyw0ydjwfzb32r","categories":[],"photos":[],"link":""},{"layout":"post","title":"Markdown笔记","date":1414286280000,"comments":true,"tags":["p20fim12gm8ple73"],"content":"<h3 id=\"斜体和粗体\"><strong>斜体和粗体</strong></h3>\n<p>使用 * 和 ** 表示斜体和粗体。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是 <span class=\"keyword\">*</span>斜体<span class=\"keyword\">*</span>，这是 <span class=\"keyword\">*</span><span class=\"keyword\">*</span>粗体<span class=\"keyword\">*</span><span class=\"keyword\">*</span>。</div></pre></td></tr></table></figure>\n\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>\n<h3 id=\"分级标题\"><strong>分级标题</strong></h3>\n<p>使用 === 表示一级标题，使用 —- 表示二级标题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"header\">这是一个一级标题</span></div><div class=\"line\">============================</div><div class=\"line\"></div><div class=\"line\"><span class=\"header\">这是一个二级标题</span></div><div class=\"line\">--------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">### 这是一个三级标题</div></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。<br><a id=\"more\"></a></p>\n<h3 id=\"外链接\"><strong>外链接</strong></h3>\n<p>使用 [描述](链接地址) 为文字增加外链接。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是去往 [<span class=\"link_label\">本人博客</span>](<span class=\"link_url\">www.tanghaoblog.me</span>) 的链接。</div></pre></td></tr></table></figure>\n\n\n<p>这是去往 <a href=\"http://thddaniel.github.com\" target=\"_blank\" rel=\"external\">本人博客</a> 的链接。</p>\n<h3 id=\"无序列表\"><strong>无序列表</strong></h3>\n<p>使用 *，+，- 表示无序列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">* </span>无序列表项 一</div><div class=\"line\"><span class=\"bullet\">+ </span>无序列表项 二</div><div class=\"line\"><span class=\"bullet\">- </span>无序列表项 三</div></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表项 一</li>\n</ul>\n<ul>\n<li>无序列表项 二</li>\n</ul>\n<ul>\n<li>无序列表项 三</li>\n</ul>\n<h3 id=\"有序列表\"><strong>有序列表</strong></h3>\n<p>使用数字和点表示有序列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">1. </span>有序列表项 一</div><div class=\"line\"><span class=\"bullet\">2. </span>有序列表项 二 </div><div class=\"line\"><span class=\"bullet\">3. </span>有序列表项 三</div></pre></td></tr></table></figure>\n\n<h3 id=\"文字引用\"><strong>文字引用</strong></h3>\n<p>使用 &gt; 表示文字引用。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"blockquote\">&gt; 一盏灯， 一片昏黄</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一盏灯， 一片昏黄</p>\n</blockquote>\n<p>注：  &gt; 和文本之间要保留一个字符的空格。</p>\n<h3 id=\"行内代码块\"><strong>行内代码块</strong></h3>\n<p>使用 `代码` 表示行内代码块。</p>\n<p>示例：</p>\n<p>让我们聊聊 <code>html</code>。</p>\n<h3 id=\"代码块\"><strong>代码块</strong></h3>\n<p>使用 四个缩进空格 表示代码块。</p>\n<pre><code>这是一个代码块，此行左侧有四个不可见的空格。\nhello world.\n</code></pre><h3 id=\"插入图像\"><strong>插入图像</strong></h3>\n<p>使用 ![描述](图片链接地址) 插入图像。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"link_label\">我的头像</span>](<span class=\"link_url\">https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg</span>)</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg\" alt=\"我的头像\"></p>\n<h3 id=\"删除线\"><strong>删除线</strong></h3>\n<p>使用 ~~ 表示删除线。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">~~这是一段错误的文本。~~</div></pre></td></tr></table></figure>\n\n<p><del>这是一段错误的文本。</del></p>\n<h3 id=\"加强的代码块\"><strong>加强的代码块</strong></h3>\n<p>支持编程语言的语法高亮的显示，行号显示。</p>\n<p>非代码示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">vim</span>-gnome</div></pre></td></tr></table></figure>\n\n<p>Python 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"decorator\">@requires_authorization</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span><span class=\"params\">(param1=<span class=\"string\">''</span>, param2=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''A docstring'''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Greater'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"prompt\">&gt;&gt;&gt; </span>message = <span class=\"string\">'''interpreter</span></div><div class=\"line\"><span class=\"prompt\">... </span>prompt'''</div></pre></td></tr></table></figure>\n\n<p>JavaScript 示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* nth element in the fibonacci series.</div><div class=\"line\">* @param n &gt;= 0</div><div class=\"line\">* @return the nth element, &gt;= 0.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp;</div><div class=\"line\">  <span class=\"keyword\">while</span> (--n &gt;= <span class=\"number\">0</span>) {</div><div class=\"line\">    tmp = a;</div><div class=\"line\">    a += b;</div><div class=\"line\">    b = tmp;</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">return</span> a;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(fib(<span class=\"number\">10</span>));</div></pre></td></tr></table></figure>\n\n<h3 id=\"表格支持\"><strong>表格支持</strong></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| 项目        | 价格   |  数量  |</div><div class=\"line\">| --------   | -----<span class=\"symbol\">:</span>  | <span class=\"symbol\">:----</span><span class=\"symbol\">:</span>  |</div><div class=\"line\">| 计算机     | <span class=\"variable\">$1600</span> |   <span class=\"number\">5</span>     |</div><div class=\"line\">| 手机        |   <span class=\"variable\">$12</span>   |   <span class=\"number\">12</span>   |</div><div class=\"line\">| 管线        |    <span class=\"variable\">$1</span>    |  <span class=\"number\">234</span>  |</div></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n","source":"_posts/Markdown笔记.markdown","raw":"---\nlayout: post\ntitle: \"Markdown笔记\"\ndate: 2014-10-26 9:18\ncomments: true\ntags: \n\t- markdown\n    \n---\n### **斜体和粗体** \n使用 \\* 和 \\** 表示斜体和粗体。\n```\n这是 *斜体*，这是 **粗体**。\n```\n这是 *斜体*，这是 **粗体**。\n\n### **分级标题**\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n<!-- more -->\n### **外链接**\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n```\n这是去往 [本人博客](www.tanghaoblog.me) 的链接。\n```  \n这是去往 [本人博客](http://thddaniel.github.com) 的链接。\n\n### **无序列表**\n\n使用 *，+，- 表示无序列表。\n\n```\n* 无序列表项 一\n+ 无序列表项 二\n- 无序列表项 三\n\n```\n* 无序列表项 一\n+ 无序列表项 二\n- 无序列表项 三\n\n\n\n### **有序列表**\n\n使用数字和点表示有序列表。\n```\n1. 有序列表项 一\n2. 有序列表项 二 \n3. 有序列表项 三\n```\n\n### **文字引用**\n\n使用 > 表示文字引用。\n\n```\n> 一盏灯， 一片昏黄\n```\n> 一盏灯， 一片昏黄\n\n注：  > 和文本之间要保留一个字符的空格。\n\n### **行内代码块**\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n### **代码块**\n\n使用 四个缩进空格 表示代码块。\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n    hello world.\n    \n### **插入图像**\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n```\n![我的头像](https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg)\n```\n![我的头像](https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg)\n\n\n\n### **删除线**\n\n使用 ~~ 表示删除线。\n```\n~~这是一段错误的文本。~~\n```\n~~这是一段错误的文本。~~\n\n\n### **加强的代码块**\n\n支持编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n\n\n### **表格支持**\n\n```\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n```\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n","slug":"Markdown笔记","updated":1415698943000,"excerpt":"<h3 id=\"斜体和粗体\"><strong>斜体和粗体</strong></h3>\n<p>使用 * 和 ** 表示斜体和粗体。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是 <span class=\"keyword\">*</span>斜体<span class=\"keyword\">*</span>，这是 <span class=\"keyword\">*</span><span class=\"keyword\">*</span>粗体<span class=\"keyword\">*</span><span class=\"keyword\">*</span>。</div></pre></td></tr></table></figure>\n\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>\n<h3 id=\"分级标题\"><strong>分级标题</strong></h3>\n<p>使用 === 表示一级标题，使用 —- 表示二级标题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"header\">这是一个一级标题</span></div><div class=\"line\">============================</div><div class=\"line\"></div><div class=\"line\"><span class=\"header\">这是一个二级标题</span></div><div class=\"line\">--------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">### 这是一个三级标题</div></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。<br>","_id":"ofqmog64q6zr2ydt","categories":[],"photos":[],"link":""},{"layout":"post","title":"使用hexo搭建博客","date":1414322280000,"comments":true,"tags":["quyybrbef7jh8ow2"],"content":"<h1 id=\"Hexo安装\"><strong>Hexo安装</strong></h1>\n<p>Hexo的作者是<a href=\"https://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。<br>参考<a href=\"http://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h3 id=\"安装Node-js\"><strong>安装Node.js</strong></h3>\n<p>在 Windows 环境下安装 Node.js非常简单，仅须<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">下载</a>安装文件并执行即可完成安装。</p>\n<h3 id=\"安装Hexo\"><strong>安装Hexo</strong></h3>\n<p>打开git。利用 <code>npm</code> 命令即可安装。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hexo</span></div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a></p>\n<h3 id=\"创建hexo文件夹\"><strong>创建hexo文件夹</strong></h3>\n<p>安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">init</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖包\"><strong>安装依赖包</strong></h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span></span></div></pre></td></tr></table></figure>\n\n<p>本地查看</p>\n<p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate <span class=\"preprocessor\">#生成静态页面至public目录</span></div><div class=\"line\">hexo <span class=\"keyword\">server</span> <span class=\"preprocessor\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div></pre></td></tr></table></figure>\n\n<p>出现了默认的网页界面。至此，本地博客已经搭建起来了。<br><br></p>\n<h1 id=\"Hexo的使用\"><strong>Hexo的使用</strong></h1>\n<p>首先大致了解下默认生成了一些文件。</p>\n<ul>\n<li><code>scaffolds</code>   layout模板文件目录，其中的md文件可以添加编辑</li>\n<li><code>scripts</code> 写文件的js，扩展hexo的功能</li>\n<li><code>source/_posts</code> 存放博客正文内容</li>\n<li><code>node_modules</code> 插件的目录</li>\n<li><code>themes</code> 存放皮肤的目录</li>\n<li><code>themes/landscape</code> 默认的主题</li>\n<li><code>_config.yml</code> 全局的配置文件，大多数的设置都在这里</li>\n<li><code>db.json</code> 静态常量</li>\n</ul>\n<p>_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。</p>\n<p>themes目录：是存放主题的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>\n<h3 id=\"安装插件和主题\"><strong>安装插件和主题</strong></h3>\n<p>Hexo提供丰富<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">主题</a>的以及<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">插件</a>。安装方法都是一样的。</p>\n<ul>\n<li>主题</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">$ git clone &lt;repository&gt;</span> themes/&lt;theme-name&gt;</span></div></pre></td></tr></table></figure>\n\n<p>无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。<br>主题目录里也有个_config.yml文件，不同主题配置方法不同。<br>我的博客左边一栏里的社交链接。图标来源设置在main.style里。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── layout <span class=\"preprocessor\">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></div><div class=\"line\"><span class=\"string\">|   ├── _partial   #局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></div><div class=\"line\"><span class=\"string\">|   </span></div><div class=\"line\">├── source <span class=\"preprocessor\">#源码</span></div><div class=\"line\"><span class=\"string\">|   ├── css#css源码 </span></div><div class=\"line\"><span class=\"string\">|   |   ├── _base  #*.styl基础css</span></div><div class=\"line\"><span class=\"string\">|   |   ├── _partial   #*.styl局部css</span></div><div class=\"line\"><span class=\"string\">|   |   ├── fonts  #字体</span></div><div class=\"line\"><span class=\"string\">|   |   ├── style.styl #*.styl引入需要的css源码</span></div><div class=\"line\"><span class=\"string\">|   ├── images #图片fancybox   </span></div><div class=\"line\"><span class=\"string\">|   |—— fancybox效果源码</span></div><div class=\"line\"><span class=\"string\">|   └── js #javascript源代码</span></div><div class=\"line\">├── _config.yml<span class=\"preprocessor\">#主题配置文件</span></div><div class=\"line\">└── README.md  <span class=\"preprocessor\">#用GitHub的都知道</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">npm install &lt;plugin-name&gt;</span> --save</span></div></pre></td></tr></table></figure>\n\n\n\n<p>启用插件：在根目录\\ _config.yml文件添加：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">plugins:</span></span></div><div class=\"line\">- &lt;plugin-name&gt;  <span class=\"comment\">#插件名</span></div></pre></td></tr></table></figure>\n\n<p>升级插件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">update</span></div></pre></td></tr></table></figure>\n\n<p>卸载插件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">uninstall</span> &lt;<span class=\"keyword\">plugin</span>-name&gt;</span></div></pre></td></tr></table></figure>\n\n<p><strong>示例</strong>：</p>\n<ul>\n<li>添加RSS</li>\n</ul>\n<p>hexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：<br>安装RSS插件到本地：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>\n\n<p>开启RSS功能：编辑hexo/_config.yml，添加如下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span></div><div class=\"line\">- hexo-generator-feed</div></pre></td></tr></table></figure>\n\n<p>在站点添加链接：<br>在themes/light/_config.yml中，编辑 rss: /atom.xml</p>\n<ul>\n<li>添加sitemap</li>\n</ul>\n<p>同样的，我们使用hexo提供的插件，方法与添加RSS类似。<br>安装sitemap到本地：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hexo-generator-sitemap</span></div></pre></td></tr></table></figure>\n\n<p>开启sitemap功能：编辑<code>hexo/_config.yml</code>，添加如下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span></div><div class=\"line\">- hexo-generator-sitemap</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"3-部署到github上\"><strong>3.部署到github上</strong></h1>\n<p>部署到Github前需要配置<code>_config.yml</code>文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: github</div><div class=\"line\">  repository: git@github.com:thddaniel/thddaniel.github.<span class=\"built_in\">io</span>.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>执行下列指令即可完成部署。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> clean</div><div class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></div><div class=\"line\">hexo deploy  <span class=\"comment\">#将.deploy目录部署到GitHub</span></div></pre></td></tr></table></figure>\n\n<p>每次修改本地文件后，需要<code>hexo generate</code>才能保存。<br>有的时候当你修改页面或更改配置后发现并没有立即生效，可以执行<code>hexo clean</code></p>\n<p>Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？</p>\n<p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。<br>注：之前修改过branch: gh-pages，但是一直显示404.不填默认为master<br><br></p>\n<h1 id=\"4-写文章\"><strong>4.写文章</strong></h1>\n<ul>\n<li><strong>开头加信息</strong></li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">---</span></div><div class=\"line\">layout: post</div><div class=\"line\">title: \"使用hexo搭建博客\"</div><div class=\"line\">date: 2014-10-26 19:18</div><div class=\"line\">comments: true</div><div class=\"line\">tags: </div><div class=\"line\"><span class=\"code\">\t- hexo</span></div><div class=\"line\"><span class=\"header\">description：</span></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>关于摘要</strong></li>\n</ul>\n<p>在文档中插入<code>&lt;!--more--&gt;</code>就可以将文章分隔，more以上的部分会已摘要的形式显示，当查看全文时more以下的部分才会显示出来。也可以在Markdown文件中定义description。</p>\n<ul>\n<li><strong>嵌入图片、音乐、视频</strong></li>\n</ul>\n<p>实际上，在hexo中，markdown支持html标签，md文件解析为html时原有的html部分会保留。有基于此，我们只要在文中插入符合html规范的代码即可。</p>\n<p><strong>图片：</strong><br>同样放到source目中下。建议大家建立一个image文件夹，把文章中使用到的图片丢到这里来（当然可以按照你的习惯进行分类），之后在Markdown文件中按照这样的语法进行插入图片的操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"link_label\">图片名称</span>](<span class=\"link_url\">image/图片名称.jpg</span>)</div></pre></td></tr></table></figure>\n\n<p><strong>音乐：</strong><br>以『虾米音乐』为例，歌曲页面有个『转帖』选项，将html代码或javascript代码复制到文中即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;embed <span class=\"variable\">src=</span><span class=\"string\">\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\"</span> <span class=\"variable\">type=</span><span class=\"string\">\"application/x-shockwave-flash\"</span> <span class=\"variable\">width=</span><span class=\"string\">\"235\"</span> <span class=\"variable\">height=</span><span class=\"string\">\"346\"</span> <span class=\"variable\">wmode=</span><span class=\"string\">\"transparent\"</span>&gt;&lt;/embed&gt;</div></pre></td></tr></table></figure>\n\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\">\n\n<p><strong>视频：</strong><br>嵌入视频的方法和音乐类似，视频网站每个视频页面都会有一个『分享』或『转帖』按钮，点击可以查看代码。</p>\n","source":"_posts/使用hexo搭建博客.markdown","raw":"---\nlayout: post\ntitle: \"使用hexo搭建博客\"\ndate: 2014-10-26 19:18\ncomments: true\ntags: \n\t- hexo\n\n---\n#**Hexo安装**\nHexo的作者是[tommy351](https://twitter.com/tommy351)，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。\n参考[官方文档](http://hexo.io/docs/index.html)\n\n###**安装Node.js**\n在 Windows 环境下安装 Node.js非常简单，仅须[下载](http://nodejs.org/)安装文件并执行即可完成安装。\n\n###**安装Hexo**\n打开git。利用 `npm` 命令即可安装。\n```\nnpm install -g hexo\n```\n<!--more-->\n###**创建hexo文件夹**\n安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。\n```\nhexo init\n```\n###**安装依赖包**\n```\nnpm install\n```\n本地查看\n\n现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000看看。\n```\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n```\n出现了默认的网页界面。至此，本地博客已经搭建起来了。\n<br>\n#**Hexo的使用**\n首先大致了解下默认生成了一些文件。\n\n- `scaffolds`   layout模板文件目录，其中的md文件可以添加编辑\n- `scripts` 写文件的js，扩展hexo的功能\n- `source/_posts` 存放博客正文内容\n- `node_modules` 插件的目录\n- `themes` 存放皮肤的目录\n- `themes/landscape` 默认的主题\n- `_config.yml` 全局的配置文件，大多数的设置都在这里\n- `db.json` 静态常量\n\n_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。\n\nthemes目录：是存放主题的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。\n\n###**安装插件和主题**\n\nHexo提供丰富[主题](https://github.com/hexojs/hexo/wiki/Themes)的以及[插件](https://github.com/hexojs/hexo/wiki/Plugins)。安装方法都是一样的。\n\n- 主题\n\n```\n$ git clone <repository> themes/<theme-name>\n```\n无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。\n主题目录里也有个_config.yml文件，不同主题配置方法不同。\n我的博客左边一栏里的社交链接。图标来源设置在main.style里。\n```\n├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial   #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   \n├── source #源码\n|   ├── css#css源码 \n|   |   ├── _base  #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts  #字体\n|   |   ├── style.styl #*.styl引入需要的css源码\n|   ├── images #图片fancybox   \n|   |—— fancybox效果源码\n|   └── js #javascript源代码\n├── _config.yml#主题配置文件\n└── README.md  #用GitHub的都知道\n```\n\n- 插件\n``` \nnpm install <plugin-name> --save\n``` \n\n启用插件：在根目录\\ _config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\n**示例**：\n\n- 添加RSS\n\nhexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：\n安装RSS插件到本地：\n```\nnpm install hexo-generator-feed\n```\n开启RSS功能：编辑hexo/_config.yml，添加如下代码：\n```\nplugins:\n- hexo-generator-feed\n```\n在站点添加链接：\n在themes/light/_config.yml中，编辑 rss: /atom.xml\n\n- 添加sitemap\n\n同样的，我们使用hexo提供的插件，方法与添加RSS类似。\n安装sitemap到本地：\n```\nnpm install hexo-generator-sitemap\n```\n开启sitemap功能：编辑`hexo/_config.yml`，添加如下代码：\n```\nplugins:\n- hexo-generator-sitemap\n```\n<br>\n#**3.部署到github上**\n\n部署到Github前需要配置`_config.yml`文件。\n```\ndeploy:\n  type: github\n  repository: git@github.com:thddaniel/thddaniel.github.io.git\n  branch: master\n```\n执行下列指令即可完成部署。\n```\nhexo clean\nhexo generate #生成静态页面至public目录\nhexo deploy  #将.deploy目录部署到GitHub\n```\n每次修改本地文件后，需要`hexo generate`才能保存。\n有的时候当你修改页面或更改配置后发现并没有立即生效，可以执行`hexo clean`\n\nGithub的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？\n\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n注：之前修改过branch: gh-pages，但是一直显示404.不填默认为master \n<br>\n#**4.写文章**\n\n- **开头加信息**\n\n示例：\n```\n---\nlayout: post\ntitle: \"使用hexo搭建博客\"\ndate: 2014-10-26 19:18\ncomments: true\ntags: \n\t- hexo\ndescription：\n---\n```\n\n\n- **关于摘要**\n\n在文档中插入`<!--more-->`就可以将文章分隔，more以上的部分会已摘要的形式显示，当查看全文时more以下的部分才会显示出来。也可以在Markdown文件中定义description。\n\n- **嵌入图片、音乐、视频**\n\n实际上，在hexo中，markdown支持html标签，md文件解析为html时原有的html部分会保留。有基于此，我们只要在文中插入符合html规范的代码即可。\n\n**图片：**\n同样放到source目中下。建议大家建立一个image文件夹，把文章中使用到的图片丢到这里来（当然可以按照你的习惯进行分类），之后在Markdown文件中按照这样的语法进行插入图片的操作。\n```\n![图片名称]({{BASE_PATH}}image/图片名称.jpg) \n```\n\n**音乐：**\n以『虾米音乐』为例，歌曲页面有个『转帖』选项，将html代码或javascript代码复制到文中即可。\n```\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\"></embed>\n```\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\"></embed>\n\n**视频：**\n嵌入视频的方法和音乐类似，视频网站每个视频页面都会有一个『分享』或『转帖』按钮，点击可以查看代码。","slug":"使用hexo搭建博客","updated":1415698987000,"excerpt":"<h1 id=\"Hexo安装\"><strong>Hexo安装</strong></h1>\n<p>Hexo的作者是<a href=\"https://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。<br>参考<a href=\"http://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h3 id=\"安装Node-js\"><strong>安装Node.js</strong></h3>\n<p>在 Windows 环境下安装 Node.js非常简单，仅须<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">下载</a>安装文件并执行即可完成安装。</p>\n<h3 id=\"安装Hexo\"><strong>安装Hexo</strong></h3>\n<p>打开git。利用 <code>npm</code> 命令即可安装。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hexo</span></div></pre></td></tr></table></figure>\n\n<p>","_id":"w67l2bs9ixfbrkhv","categories":[],"photos":[],"link":""},{"layout":"post","title":"Managing Money","date":1414383480000,"comments":true,"tags":["1ugidbislphrzpuy","kda4984hd0e8h1qo"],"content":"<p>今天在cousera上看到这门课<a href=\"https://www.coursera.org/course/managingmoney\" target=\"_blank\" rel=\"external\">Managing Your Time, Money, and Career: MBA Insights for Undergraduates</a><br>走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。</p>\n<h2 id=\"What’s_In_Your_Budget?\"><strong>What’s In Your Budget?</strong></h2>\n<h3 id=\"Theme_of_this_class:\"><strong>Theme of this class:</strong></h3>\n<ul>\n<li>Having a smart budget plan can prepare us for unexpected emergency</li>\n<li>Planning for emergency is as important as planning for investment</li>\n<li>Diversify income source is the key way to make a good budget plan<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg\" alt=\"managing money\"><br><a id=\"more\"></a><br><br></li>\n</ul>\n<h3 id=\"How_to_create_a_budget:\"><strong>How to create a budget:</strong></h3>\n<ul>\n<li>The basic model to start building a budget:<br>  -Money in<br>  -Money out</li>\n<li>Between the two we have discretionary funds:<br>  -Cash<br>  -Savings<br>  -Investments</li>\n</ul>\n<p>A budget plan would look like this:<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/2.money%20flow.jpg\" alt=\"money flow\"><br>Discretionary fund is the extra money you have, after paying all your expense. You can spend all of it for current fun, or you can save it/ invest for future.<br><br></p>\n<h3 id=\"How_to_start_a_budget_plan:\"><strong>How to start a budget plan:</strong></h3>\n<ul>\n<li>First step:Creating a saving account in your local bank, it can be the cash reserves for emergency, or funds for buying a house, etc. It earns more interests than checking account.</li>\n<li>College might have credit union, which charges lower fees and have higher interest rates.Also, not every bank is the same; some might have higher fees, fewer transaction times, and other different policies.</li>\n</ul>\n<p><br></p>\n<p>Some other key points in managing budgeting and spending your money:</p>\n<ul>\n<li>Money are meant to be spend-wisely. How you spend it will determine whether your wealth will increase or shrink.</li>\n<li>Fixed expenses are the point to start counting, but they can also be adjusted. E.g. you can choose which kind of house you want to live in, and therefore how much rent you will pay.</li>\n<li>You can use spreadsheet to plan budget, and there are also tools online.</li>\n<li>The more important work is not creating a budget, but sticking to it.<br><br><h2 id=\"To_Credit_or_Debit_Card?\"><strong>To Credit or Debit Card?</strong></h2>\n<h3 id=\"Theme:\"><strong>Theme:</strong></h3>\n</li>\n<li>Differences between credit card and debit card</li>\n<li>The benefits and risk of credit card</li>\n</ul>\n<h3 id=\"Debit_card:\"><strong>Debit card:</strong></h3>\n<ul>\n<li>Draws directly from your account</li>\n<li>No monthly bill to pay</li>\n<li>Account “debited”</li>\n<li>Transactions easy to track</li>\n<li>Online features to monitor account</li>\n</ul>\n<p>You put money inside the bank first, and only spend what you already have. Therefore the account is “debited”.</p>\n<p>With debit card, you don’t have to bring so much cash every day.Also, debit card is convenient for tracking, because you can only spend what you have. Therefore, it’s easier for budgeting because you would never overspend.</p>\n<h3 id=\"Credit_Card:\"><strong>Credit Card:</strong></h3>\n<ul>\n<li>Bank temporarily lends you the money.</li>\n<li>You pay balance end of month</li>\n<li>If you can’t pay all,you pay interest!</li>\n<li>Rate = “APR”:annual percentage rate</li>\n<li>APR = combined interest &amp; fees over 1 year</li>\n</ul>\n<p>You spend money first, which creates a debt, and you pay the bank back later. Therefore you “credit” is important.</p>\n<p>Credit institution will record your “credit score”: whether you had pay back on time, and how much you could probably afford each time.</p>\n<p>With higher credit score, you would pay less interest and your APR might be low. Bank would evaluate lending money to you as a lower risk.</p>\n<h3 id=\"Different_type_of_credit_cards:\"><strong>Different type of credit cards:</strong></h3>\n<p>There are two types of credit card: </p>\n<ul>\n<li>Unsecured cards are often offered by banks. You do not need to provide collateral.</li>\n<li>Secured cards require collateral for people with poor credit history. Collateral could be cars, boats, etc. If you fail to pay your bill, you might lose your collateral.</li>\n</ul>\n<h3 id=\"Reward_Cards:\"><strong>Reward Cards:</strong></h3>\n<p>Some credit cards are reward cards, which are always only given to people with good credit history. You can get points for the money you spent, and rewards include cash back, gas savings,travel rewards, etc.</p>\n<p>But reward cards often come with additional fees. Pay your balance quickly could help.</p>\n<h3 id=\"Key_Points:\"><strong>Key Points:</strong></h3>\n<ul>\n<li>Debit cards great for small expenditures,not emergencies or large stuff.</li>\n<li>Credit Cards good for large purchases:can spread the cost out.</li>\n</ul>\n<p><br><br><br><br><br><br><br><br><code>To be continued</code></p>\n","source":"_posts/Managing Money.markdown","raw":"---\nlayout: post\ntitle: \"Managing Money\"\ndate: 2014-10-27 12:18\ncomments: true\ntags: \n\t- 理财\n\t- Open Courses\n\n---\n今天在cousera上看到这门课[Managing Your Time, Money, and Career: MBA Insights for Undergraduates](https://www.coursera.org/course/managingmoney)\n走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。\n##**What's In Your Budget?**##\n###**Theme of this class:**###\n\n- Having a smart budget plan can prepare us for unexpected emergency\n- Planning for emergency is as important as planning for investment\n- Diversify income source is the key way to make a good budget plan\n ![managing money](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg)\n<!--more-->\n<br>\n\n###**How to create a budget:**###\n\n- The basic model to start building a budget:\n    -Money in\n    -Money out\n- Between the two we have discretionary funds:\n    -Cash\n    -Savings\n    -Investments\n\nA budget plan would look like this:\n![money flow](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/2.money%20flow.jpg)\nDiscretionary fund is the extra money you have, after paying all your expense. You can spend all of it for current fun, or you can save it/ invest for future.\n<br>\n###**How to start a budget plan:**###\n\n- First step:Creating a saving account in your local bank, it can be the cash reserves for emergency, or funds for buying a house, etc. It earns more interests than checking account.\n- College might have credit union, which charges lower fees and have higher interest rates.Also, not every bank is the same; some might have higher fees, fewer transaction times, and other different policies.\n\n<br>\n\nSome other key points in managing budgeting and spending your money:\n\n- Money are meant to be spend-wisely. How you spend it will determine whether your wealth will increase or shrink.\n- Fixed expenses are the point to start counting, but they can also be adjusted. E.g. you can choose which kind of house you want to live in, and therefore how much rent you will pay.\n- You can use spreadsheet to plan budget, and there are also tools online.\n- The more important work is not creating a budget, but sticking to it.\n<br>\n##**To Credit or Debit Card?**##\n###**Theme:**###\n- Differences between credit card and debit card\n- The benefits and risk of credit card\n\n###**Debit card:**###\n\n- Draws directly from your account\n- No monthly bill to pay\n- Account \"debited\"\n- Transactions easy to track\n- Online features to monitor account\n\nYou put money inside the bank first, and only spend what you already have. Therefore the account is “debited”.\n\nWith debit card, you don’t have to bring so much cash every day.Also, debit card is convenient for tracking, because you can only spend what you have. Therefore, it’s easier for budgeting because you would never overspend.\n\n###**Credit Card:**###\n\n- Bank temporarily lends you the money.\n- You pay balance end of month\n- If you can't pay all,you pay interest!\n- Rate = \"APR\":annual percentage rate\n- APR = combined interest & fees over 1 year\n\nYou spend money first, which creates a debt, and you pay the bank back later. Therefore you “credit” is important.\n\nCredit institution will record your “credit score”: whether you had pay back on time, and how much you could probably afford each time.\n\nWith higher credit score, you would pay less interest and your APR might be low. Bank would evaluate lending money to you as a lower risk.\n\n\n###**Different type of credit cards:**###\nThere are two types of credit card: \n\n- Unsecured cards are often offered by banks. You do not need to provide collateral.\n- Secured cards require collateral for people with poor credit history. Collateral could be cars, boats, etc. If you fail to pay your bill, you might lose your collateral.\n\n###**Reward Cards:**###\nSome credit cards are reward cards, which are always only given to people with good credit history. You can get points for the money you spent, and rewards include cash back, gas savings,travel rewards, etc.\n\nBut reward cards often come with additional fees. Pay your balance quickly could help.\n\n###**Key Points:**###\n- Debit cards great for small expenditures,not emergencies or large stuff.\n- Credit Cards good for large purchases:can spread the cost out.\n\n<br>\n<br>\n<br>\n<br>\n`To be continued`","slug":"Managing Money","updated":1415698789000,"excerpt":"<p>今天在cousera上看到这门课<a href=\"https://www.coursera.org/course/managingmoney\" target=\"_blank\" rel=\"external\">Managing Your Time, Money, and Career: MBA Insights for Undergraduates</a><br>走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。</p>\n<h2 id=\"What’s_In_Your_Budget?\"><strong>What’s In Your Budget?</strong></h2>\n<h3 id=\"Theme_of_this_class:\"><strong>Theme of this class:</strong></h3>\n<ul>\n<li>Having a smart budget plan can prepare us for unexpected emergency</li>\n<li>Planning for emergency is as important as planning for investment</li>\n<li>Diversify income source is the key way to make a good budget plan<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg\" alt=\"managing money\"><br>","_id":"gjie0ekvds7293n4","categories":[],"photos":[],"link":""},{"layout":"post","title":"Holistic Learning","date":1415704680000,"comments":true,"tags":["e9wjh8jqdvdpwfs6","aecmdjdeh5rhp9mq"],"content":"<p>Resource : <a href=\"http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf\" target=\"_blank\" rel=\"external\">scotthyoung</a></p>\n<h2 id=\"Holistic_Learning_VS_Rote_Memorization\"><strong>Holistic Learning VS Rote Memorization</strong></h2>\n<p>Holistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.<br><a id=\"more\"></a><br><code>Rote Memorization</code></p>\n<ul>\n<li>Organizes Ideas into Boxes</li>\n<li>Keeps Subjects and Concepts Distinct</li>\n<li>Few Neural Paths to the Same Idea</li>\n<li>Views Concepts Through One Perspective</li>\n<li>Aims to Learn Through Repetition</li>\n</ul>\n<p><code>Holistic Learning</code></p>\n<ul>\n<li>Organized Ideas into Webs</li>\n<li>Interrelates Subjects and Concepts</li>\n<li>Many Neural Paths to the Same Idea</li>\n<li>Views Concepts Through Many Unique Perspectives and Senses</li>\n<li>Aims to Learn by Relating</li>\n</ul>\n<h2 id=\"Creating_a_Construct\"><strong>Creating a Construct</strong></h2>\n<p>Your goal when learning anything is to create a <strong>construct</strong> or an underlying understanding.</p>\n<p>When you are being taught a subject or you are learning it on your own, you are getting bricks fed to you one by one.  If your lucky you might have a rough blueprint of how to organize the bricks, but if there aren’t enough linkages or they are assembled improperly the result is confusion.</p>\n<p>The first key to building a house is to realize that’s what you are trying to do.  Your goal when learning any complex subject or field should be to build a construct.  A framework of understanding in which your web of knowledge occupies.  </p>\n<p>I take very few notes in classes and I study them even less.  <strong>My goal in every class is to build a construct not to transcribe what was said.</strong>  Taking notes can be helpful but realize that is only an intermediate tool to your greater goal.  Having a workable construct.</p>\n<p>Even if the building consisted of over a million bricks, <strong>a quick scan would show where the hole in the building lay and where the missing brick could be found.</strong></p>\n<p>You don’t need every brick to maintain the structural integrity of a house.  <strong>You don’t need every piece of information to maintain the integrity of your understanding.</strong>  When you have a construct, you can solve difficult problems even when there is a lot of missing information.  You simply look at your construct, see where the holes point to and fill them in.</p>\n<p><strong>As long as you have a relatively stable construct, you can find ways around the missing information.</strong> When one path gets shut down you take a different route.  When I take a test I can usually find a way to solve the problem even if I forget the method I was taught.</p>\n<h2 id=\"Start_With_a_Model\"><strong>Start With a Model</strong></h2>\n<p>Constructs are formed from <strong>models</strong>, chunks of understanding that aren’t completely<br>accurate but can be used to solve problems.</p>\n<p>A model is not the same as a construct. A construct is a complete set of understandings. A construct for math allows you to solve any problem in math.</p>\n<p>A model is a quick representation of the idea you are trying to relate or understand.  <strong>It is an incomplete and temporary solution.</strong>  Without building a dozens of models any attempts to form a construct will collapse.  Trying to understand everything at once is impossible for the conscious mind to handle. Building individual models can give you a chance to stitch them together into a complete construct.</p>\n<blockquote>\n<p>Recently I took a course in Vectors and Linear Algebra.  A very abstract course where most people have difficulty forming a construct.  When the concept of a subspace was introduced, I was lost.  I needed a construct for the concept, but it was too broad to immediately grasp.  So I looked for a model.</p>\n<p>The model I chose was a visual representation of what I figured an idealized subspace might look like.  I imagined a subspace as being a plane suspended in three dimensions.  The visualization was as vivid as  it was automatic.  I can remember the plane being red and translucent slicing through a blue-gray vacuum of three dimensional space.</p>\n<p>This model was not a construct.  A plane in 3D is just one of many different types of subspaces.  But without it, a subspace would have just been a bunch of rules and numbers.  Even if the model was inaccurate, I could use it as a basis for refining and expanding the eventual construct.</p>\n<p>Links form into simple models which form into overall constructs.  Layered creations of understanding.  Effective constructs also link outside of where they are applicable.  Once I had a construct prepared for subspaces, I started to view my own experience as a subspace of reality. </p>\n</blockquote>\n<p>Constructs that become islands are worthless when there is a problem that exists between them.  Interlinking your constructs helps funnel problems outside of their influence zone into realms of understanding.  </p>\n<h2 id=\"How_to_Learn_Holistically\"><strong>How to Learn Holistically</strong></h2>\n<p><strong>When I need a model, I find one.  When I have enough models I form a construct.When I learn information I try to link it within and outside my constructs.When I learn information I try to link it within and outside my constructs.</strong></p>\n<p>You create webs of information, constructs and models by <strong>visceralizing</strong>, <strong>metaphor</strong> and <strong>exploring</strong></p>\n<h3 id=\"Visceralization\"><strong>Visceralization</strong></h3>\n<p>A model isn’t a grouping of ideas, it’s an experience.</p>\n<p>The best “visceralizations” are combinations of images, sounds, feelings and textures.  Depending on your learning preference you may see, hear or feel ideas.  More than just a picture, you want an experience.</p>\n<p>If you aren’t sure exactly how to do this, the best place to start is with a pad of paper.  <strong>Draw out the relationship between several ideas in a picture</strong>.  Remember your goal isn’t a perfect construct but a simplified model.  Even if your model is shown to be slightly inaccurate later, it is still better than no model at all.</p>\n<p>Ask yourself what the concept would look, sound or feel like?  How would it function and respond?  </p>\n<blockquote>\n<p>When learning computer science I formed mental pictures of bizarre machines and objects that represented the different objects and functions I learned.  Strings and arrays looked like colored cubes suspended along a cord.  Functions were machines that ate strings and individual blocks and spat out new blocks</p>\n</blockquote>\n<p>As you get better you should be able to do this without a pencil and paper.  Your imagination is far faster than your hand, so once you begin to understand the process you can start visceralizing how different concepts interact.  You can see how they squish and respond to stimuli.  Boring ideas translate into a bizarre and otherworldly scene.</p>\n<h3 id=\"Metaphor\"><strong>Metaphor</strong></h3>\n<p>To interlink constructs you need to use metaphor.<br>Metaphor is a literary term used <strong>when you want to relate two things that aren’t actually related.</strong></p>\n<p>If you wanted to build a house, the fastest way would be to make minor modifications to a blueprint you already own.  Metaphors can allow you to relate a new construct to a previously established one.  This can help you piece together ideas when your models fail to give accurate information.</p>\n<p>If you don’t already use metaphors extensively, <strong>a quick way to start would be to play the, “That Reminds Me Of…” game whenever you learn something new.</strong>  You play the game by thinking or writing down a list of ideas that this new concept reminds you of.  It doesn’t matter if the ideas are ridiculous or completely unrelated.  That’s the point, to link together ideas that don’t normally connect.</p>\n<p>The idea is that by playing this game repeatedly you can see the new concept through the vantage points where you already have understanding.  This helps you understand more rapidly.</p>\n<p>If you already understand sports, then you can use sports as a metaphor when trying to comprehend economics or science.  You can create connections between any subjects you just need to be patient enough.</p>\n<blockquote>\n<p>When I read Nicollo Machiavelli’s, The Prince, I started linking his ideas about statecraft (which were a rather weak construct for myself) and built them into ideas about business and social settings (which were strong constructs).</p>\n</blockquote>\n<h3 id=\"Explore\"><strong>Explore</strong></h3>\n<p>Exploration is the process of going through your constructs, models and metaphors and finding errors. </p>\n<p>Holes and errors will only come up when you actually go back and test them. Until you  actually review the information involved, they will be hidden from your awareness.  This happens when you go to write an exam and you realize you don’t know how to solve a specific problem or you don’t have the right formula.  A strong enough network may mean you don’t need that formula to solve the problem, but you may have to take a few detours to get there.</p>\n<p><strong>The best way to explore is to actually face problems.</strong><br>Usually the idea is already reinforced inside my web, but sometimes I missed it entirely.  Studying isn’t as good as testing but it can fix a few broken paths</p>\n<h2 id=\"Summary_of_Holistic_Learning\"><strong>Summary of Holistic Learning</strong></h2>\n<p>Holistic learning works with highly conceptual information where there is an underlying system.  It doesn’t work well with arbitrary information or skills.</p>\n","source":"_posts/Holistic Learning.markdown","raw":"---\nlayout: post\ntitle: \"Holistic Learning\"\ndate: 2014-11-11 19:18\ncomments: true\ntags: \n\t- 思维\n\t- 记忆力\n    \n---\nResource : [scotthyoung](http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf)\n##**Holistic Learning VS Rote Memorization**\nHolistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.\n<!--more-->\n`Rote Memorization`\n\n- Organizes Ideas into Boxes\n- Keeps Subjects and Concepts Distinct\n- Few Neural Paths to the Same Idea\n- Views Concepts Through One Perspective\n- Aims to Learn Through Repetition\n\n`Holistic Learning`\n\n- Organized Ideas into Webs\n- Interrelates Subjects and Concepts\n- Many Neural Paths to the Same Idea\n- Views Concepts Through Many Unique Perspectives and Senses\n- Aims to Learn by Relating\n\n\n##**Creating a Construct**\nYour goal when learning anything is to create a **construct** or an underlying understanding.\n\nWhen you are being taught a subject or you are learning it on your own, you are getting bricks fed to you one by one.  If your lucky you might have a rough blueprint of how to organize the bricks, but if there aren’t enough linkages or they are assembled improperly the result is confusion.\n\nThe first key to building a house is to realize that’s what you are trying to do.  Your goal when learning any complex subject or field should be to build a construct.  A framework of understanding in which your web of knowledge occupies.  \n\nI take very few notes in classes and I study them even less.  **My goal in every class is to build a construct not to transcribe what was said.**  Taking notes can be helpful but realize that is only an intermediate tool to your greater goal.  Having a workable construct.\n\nEven if the building consisted of over a million bricks, **a quick scan would show where the hole in the building lay and where the missing brick could be found.**\n\nYou don’t need every brick to maintain the structural integrity of a house.  **You don’t need every piece of information to maintain the integrity of your understanding.**  When you have a construct, you can solve difficult problems even when there is a lot of missing information.  You simply look at your construct, see where the holes point to and fill them in.\n\n**As long as you have a relatively stable construct, you can find ways around the missing information.** When one path gets shut down you take a different route.  When I take a test I can usually find a way to solve the problem even if I forget the method I was taught.\n\n##**Start With a Model**\nConstructs are formed from **models**, chunks of understanding that aren't completely \naccurate but can be used to solve problems.\n\nA model is not the same as a construct. A construct is a complete set of understandings. A construct for math allows you to solve any problem in math.\n\nA model is a quick representation of the idea you are trying to relate or understand.  **It is an incomplete and temporary solution.**  Without building a dozens of models any attempts to form a construct will collapse.  Trying to understand everything at once is impossible for the conscious mind to handle. Building individual models can give you a chance to stitch them together into a complete construct.\n\n> Recently I took a course in Vectors and Linear Algebra.  A very abstract course where most people have difficulty forming a construct.  When the concept of a subspace was introduced, I was lost.  I needed a construct for the concept, but it was too broad to immediately grasp.  So I looked for a model.\n\n> The model I chose was a visual representation of what I figured an idealized subspace might look like.  I imagined a subspace as being a plane suspended in three dimensions.  The visualization was as vivid as  it was automatic.  I can remember the plane being red and translucent slicing through a blue-gray vacuum of three dimensional space.\n\n> This model was not a construct.  A plane in 3D is just one of many different types of subspaces.  But without it, a subspace would have just been a bunch of rules and numbers.  Even if the model was inaccurate, I could use it as a basis for refining and expanding the eventual construct.\n\n> Links form into simple models which form into overall constructs.  Layered creations of understanding.  Effective constructs also link outside of where they are applicable.  Once I had a construct prepared for subspaces, I started to view my own experience as a subspace of reality. \n\nConstructs that become islands are worthless when there is a problem that exists between them.  Interlinking your constructs helps funnel problems outside of their influence zone into realms of understanding.  \n\n##**How to Learn Holistically**\n\n**When I need a model, I find one.  When I have enough models I form a construct.When I learn information I try to link it within and outside my constructs.When I learn information I try to link it within and outside my constructs.**\n\nYou create webs of information, constructs and models by **visceralizing**, **metaphor** and **exploring**\n\n###**Visceralization**\nA model isn’t a grouping of ideas, it’s an experience.\n\nThe best “visceralizations” are combinations of images, sounds, feelings and textures.  Depending on your learning preference you may see, hear or feel ideas.  More than just a picture, you want an experience.\n\nIf you aren’t sure exactly how to do this, the best place to start is with a pad of paper.  **Draw out the relationship between several ideas in a picture**.  Remember your goal isn’t a perfect construct but a simplified model.  Even if your model is shown to be slightly inaccurate later, it is still better than no model at all.\n\nAsk yourself what the concept would look, sound or feel like?  How would it function and respond?  \n> When learning computer science I formed mental pictures of bizarre machines and objects that represented the different objects and functions I learned.  Strings and arrays looked like colored cubes suspended along a cord.  Functions were machines that ate strings and individual blocks and spat out new blocks\n\nAs you get better you should be able to do this without a pencil and paper.  Your imagination is far faster than your hand, so once you begin to understand the process you can start visceralizing how different concepts interact.  You can see how they squish and respond to stimuli.  Boring ideas translate into a bizarre and otherworldly scene.\n\n###**Metaphor**\nTo interlink constructs you need to use metaphor.\nMetaphor is a literary term used **when you want to relate two things that aren’t actually related.**\n\nIf you wanted to build a house, the fastest way would be to make minor modifications to a blueprint you already own.  Metaphors can allow you to relate a new construct to a previously established one.  This can help you piece together ideas when your models fail to give accurate information.\n\nIf you don’t already use metaphors extensively, **a quick way to start would be to play the, “That Reminds Me Of...” game whenever you learn something new.**  You play the game by thinking or writing down a list of ideas that this new concept reminds you of.  It doesn’t matter if the ideas are ridiculous or completely unrelated.  That’s the point, to link together ideas that don't normally connect.\n\nThe idea is that by playing this game repeatedly you can see the new concept through the vantage points where you already have understanding.  This helps you understand more rapidly.\n\nIf you already understand sports, then you can use sports as a metaphor when trying to comprehend economics or science.  You can create connections between any subjects you just need to be patient enough.\n\n> When I read Nicollo Machiavelli’s, The Prince, I started linking his ideas about statecraft (which were a rather weak construct for myself) and built them into ideas about business and social settings (which were strong constructs).\n\n###**Explore**\nExploration is the process of going through your constructs, models and metaphors and finding errors. \n\nHoles and errors will only come up when you actually go back and test them. Until you  actually review the information involved, they will be hidden from your awareness.  This happens when you go to write an exam and you realize you don’t know how to solve a specific problem or you don’t have the right formula.  A strong enough network may mean you don’t need that formula to solve the problem, but you may have to take a few detours to get there.\n\n**The best way to explore is to actually face problems.**\nUsually the idea is already reinforced inside my web, but sometimes I missed it entirely.  Studying isn’t as good as testing but it can fix a few broken paths\n\n##**Summary of Holistic Learning**\nHolistic learning works with highly conceptual information where there is an underlying system.  It doesn't work well with arbitrary information or skills.","slug":"Holistic Learning","updated":1416533883000,"excerpt":"<p>Resource : <a href=\"http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf\" target=\"_blank\" rel=\"external\">scotthyoung</a></p>\n<h2 id=\"Holistic_Learning_VS_Rote_Memorization\"><strong>Holistic Learning VS Rote Memorization</strong></h2>\n<p>Holistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.<br>","_id":"5ostfolxo0g1vzf8","categories":[],"photos":[],"link":""}],"Tag":[{"name":"git","_id":"pt7sjs1fm0102uah","posts":["dt414rain3tka9lj","vyjyw0ydjwfzb32r"]},{"name":"思维","_id":"e9wjh8jqdvdpwfs6","posts":["xxsmyasx20hoqbkw","5ostfolxo0g1vzf8"]},{"name":"记忆力","_id":"aecmdjdeh5rhp9mq","posts":["xxsmyasx20hoqbkw","5ostfolxo0g1vzf8"]},{"name":"Open Courses","_id":"kda4984hd0e8h1qo","posts":["xxsmyasx20hoqbkw","cu5fm03blj5tc1xm","gjie0ekvds7293n4"]},{"name":"创业","_id":"fq0qem8t0y0moazl","posts":["cu5fm03blj5tc1xm"]},{"name":"markdown","_id":"p20fim12gm8ple73","posts":["ofqmog64q6zr2ydt"]},{"name":"hexo","_id":"quyybrbef7jh8ow2","posts":["w67l2bs9ixfbrkhv"]},{"name":"理财","_id":"1ugidbislphrzpuy","posts":["gjie0ekvds7293n4"]}]}