{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":false},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/yilia/source/img/anonymous.jpg","path":"img/anonymous.jpg","modified":false},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes/yilia/source/img/email.png","path":"img/email.png","modified":false},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes/yilia/source/img/favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":false},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":false},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes/yilia/source/img/quora.png","path":"img/quora.png","modified":false},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":false},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1414129782000},{"_id":"scaffolds/page.md","mtime":1414129782000},{"_id":"scaffolds/photo.md","mtime":1414129782000},{"_id":"scaffolds/post.md","mtime":1414129782000},{"_id":"source/_posts/Git Real 2.markdown","mtime":1426576962000},{"_id":"source/CNAME","mtime":1414154992000},{"_id":"source/_posts/Holistic Learning.markdown","mtime":1426577117000},{"_id":"source/_posts/Git Real.markdown","mtime":1426577060000},{"_id":"source/_posts/How to start a startup.markdown","mtime":1426577188000},{"_id":"source/_posts/Latex.md","mtime":1426577375000},{"_id":"source/_posts/Learning how to learn.markdown","mtime":1427107945000},{"_id":"source/_posts/List.markdown","mtime":1423362905000},{"_id":"source/_posts/Managing Money.markdown","mtime":1426577292000},{"_id":"source/_posts/Markdown笔记.markdown","mtime":1426577364000},{"_id":"source/_posts/sublime text.md","mtime":1426577152000},{"_id":"source/_posts/使用hexo搭建博客.markdown","mtime":1426637889000},{"_id":"source/_posts/字符编码.md","mtime":1427101073000},{"_id":"themes/yilia/README.md","mtime":1414195816000},{"_id":"themes/yilia/_config.yml","mtime":1414231830000},{"_id":"themes/yilia/package.json","mtime":1414195816000},{"_id":"themes/yilia/scripts/fancybox.js","mtime":1414195816000},{"_id":"themes/yilia/layout/archive.ejs","mtime":1426580826000},{"_id":"themes/yilia/layout/category.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/index.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/layout.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/page.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/post.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/tag.ejs","mtime":1426580762000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/archive.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/article.ejs","mtime":1426638509000},{"_id":"themes/yilia/layout/_partial/footer.ejs","mtime":1426579062000},{"_id":"themes/yilia/layout/_partial/head.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/header.ejs","mtime":1414225450000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","mtime":1414195816000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","mtime":1414195816000},{"_id":"themes/yilia/source/js/instagram.js","mtime":1414195816000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","mtime":1414195816000},{"_id":"themes/yilia/source/js/main.js","mtime":1414195816000},{"_id":"themes/yilia/source/js/script.js","mtime":1414195816000},{"_id":"themes/yilia/source/img/anonymous.jpg","mtime":1414203290000},{"_id":"themes/yilia/source/img/coderwall.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/delicious.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/email.png","mtime":1414218984000},{"_id":"themes/yilia/source/img/facebook.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/favicon.ico","mtime":1414205078000},{"_id":"themes/yilia/source/img/github.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/google.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/img-err.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/img-loading.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/linkedin.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/pinboard.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/pinterest.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/quora.png","mtime":1414212204000},{"_id":"themes/yilia/source/img/rss.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/stackoverflow.png","mtime":1414195816000},{"_id":"themes/yilia/source/img/twitter.png","mtime":1414195816000},{"_id":"themes/yilia/source/css/_extend.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_variables.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/style.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/archive.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/article.styl","mtime":1426642632000},{"_id":"themes/yilia/source/css/_partial/footer.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/header.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/main.styl","mtime":1414219072000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/page.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/share.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_util/grid.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/_util/mixin.styl","mtime":1414195816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","mtime":1414195816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","mtime":1414195816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","mtime":1414195816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","mtime":1414195816000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/blank.gif","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1414195816000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1414195816000},{"_id":"source/_posts/makefile.md","mtime":1427340652000},{"_id":"source/_posts/计算机基本结构.md","mtime":1427722236000}],"Category":[],"Page":[],"Post":[{"layout":"post","title":"Sublime Text with latex & skim","date":1424690280000,"comments":true,"tags":["ytmln53xjl3j7x8q","k963yjbkz05p2175"],"content":"<h1 id=\"安装步骤\">安装步骤</h1>\n<ol>\n<li>安装<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">Sublime Text 3</a>、<a href=\"https://tug.org/mactex/\" target=\"_blank\" rel=\"external\">MacTex</a>(2.4G)。</li>\n<li>给 Sublime Text 安装<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">Package Control</a>。</li>\n<li>在 Sublime Text 窗口中按下 Cammand + Shift + P，键入「install」之后回车，找到「LaTeXTools」这个 Sublime Text Package 并安装。</li>\n<li>安装<a href=\"http://skim-app.sourceforge.net/\" target=\"_blank\" rel=\"external\">Skim</a>，在<code>偏好设置-&gt;同步</code> 修改预设成自定义，指令：/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl。<a id=\"more\"></a></li>\n<li>打开编辑<code>~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/LaTeXTools.sublime-settings</code>，将其中”builder”条目改为：</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">“builder”: “simple”</div></pre></td></tr></table></figure>\n\n<p>编辑<code>~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/LaTeXTools/builders/simpleBuilder.py</code>第41行:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">pdflatex =</span> [“pdflatex”, “<span class=\"variable\">-interaction=</span>nonstopmode”, “<span class=\"variable\">-synctex=</span><span class=\"number\">1</span>″]</div><div class=\"line\">修改为</div><div class=\"line\"><span class=\"variable\">pdflatex =</span> [“xelatex”, “<span class=\"variable\">-interaction=</span>nonstopmode”, “<span class=\"variable\">-synctex=</span><span class=\"number\">1</span>″]</div></pre></td></tr></table></figure>\n\n<h1 id=\"LaTex_语法\">LaTex 语法</h1>\n","source":"_posts/Latex.md","raw":"---\nlayout: post\ntitle: \"Sublime Text with latex & skim\"\ndate: 2015-2-23 19:18\ncomments: true\ntags: \n\t- LaTex\n\t- sublime text\n\n---\n# 安装步骤\n1. 安装[Sublime Text 3](http://www.sublimetext.com/3)、[MacTex](https://tug.org/mactex/)(2.4G)。\n2. 给 Sublime Text 安装[Package Control](https://packagecontrol.io/installation)。\n3. 在 Sublime Text 窗口中按下 Cammand + Shift + P，键入「install」之后回车，找到「LaTeXTools」这个 Sublime Text Package 并安装。\n4. 安装[Skim](http://skim-app.sourceforge.net/)，在`偏好设置->同步` 修改预设成自定义，指令：/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl。<!--more-->\n5. 打开编辑`~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User/LaTeXTools.sublime-settings`，将其中\"builder\"条目改为：\n```\n“builder”: “simple”\n```\n编辑`~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/LaTeXTools/builders/simpleBuilder.py `第41行:\n```\npdflatex = [“pdflatex”, “-interaction=nonstopmode”, “-synctex=1″]\n修改为\npdflatex = [“xelatex”, “-interaction=nonstopmode”, “-synctex=1″]\n```\n\n# LaTex 语法\n","slug":"Latex","updated":1426577375000,"excerpt":"<h1 id=\"安装步骤\">安装步骤</h1>\n<ol>\n<li>安装<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">Sublime Text 3</a>、<a href=\"https://tug.org/mactex/\" target=\"_blank\" rel=\"external\">MacTex</a>(2.4G)。</li>\n<li>给 Sublime Text 安装<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">Package Control</a>。</li>\n<li>在 Sublime Text 窗口中按下 Cammand + Shift + P，键入「install」之后回车，找到「LaTeXTools」这个 Sublime Text Package 并安装。</li>\n<li>安装<a href=\"http://skim-app.sourceforge.net/\" target=\"_blank\" rel=\"external\">Skim</a>，在<code>偏好设置-&gt;同步</code> 修改预设成自定义，指令：/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl。","_id":"89jpkrg83am3gd7o","categories":[],"photos":[],"link":""},{"layout":"post","title":"Learning how to learn","date":1414505880000,"comments":true,"tags":["kc2jcydjbl142gb7","t3lz5tehrs3o1vxs","yr4rcx58k2nnzcid"],"content":"<p>cousera课:<a href=\"https://class.coursera.org/learning-002\" target=\"_blank\" rel=\"external\">learning how to learn</a>笔记</p>\n<h1 id=\"Focused_versus_Diffuse_Thinking\"><strong>Focused versus Diffuse Thinking</strong></h1>\n<h2 id=\"专注模式和发散模式\"><strong>专注模式和发散模式</strong></h2>\n<p>我们人类有两种最基本的思考模式：</p>\n<ul>\n<li>专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。</li>\n<li>发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg\" alt=\"思考模式\"><br><a id=\"more\"></a><br>这两种思考模式就像硬币的两个面，人类不能同时使用两种思考模式。以现代神经学的知识，我们不能同时处在集中模式和发散模式下进行思考，就像一枚硬币不能同时正面和反面朝上一样。但这并不意味着我们不能同时交替使用他们来解决问题，当学习新的比较难懂的东西时，思维需要在两种完全不同的模式中转换，这能帮助我们更有效地学习。</p>\n<p>Eg： Dali and Edison，他们放松自己让思绪漫游，考虑他们之前专注的内容，一旦要睡着，钥匙 or钢球将他们惊醒，然后带着在发散模式下得到的灵感，转而进入专注模式，将这些灵感变成现实。当然这些需要每天的练习。</p>\n<p>要想有强健的体魄，需要每天运动，让肌肉增长；同样地，想建立神经结构，也需要每天练习，这是关键。</p>\n<h2 id=\"拖延症\"><strong>拖延症</strong></h2>\n<ul>\n<li>拖延症的产生：当你不想去做一件事的时候，大脑中相关区域的痛苦会被激发出来，为了避免这种痛苦，大脑将注意力转向其他地方。结果是，你只是感到暂时的愉悦，但是事情被拖延了。</li>\n<li>如何克服拖延症： <strong>立即去做</strong>！！研究发现，当人们开始做不喜欢的事不久，大脑中痛苦的感觉就消失了！</li>\n</ul>\n<h2 id=\"熟能生巧\"><strong>熟能生巧</strong></h2>\n<p>当我们学习一些具体事物的时候，只要将它和现实中的事物进行“链接”，我们就能掌握这个知识。但如果我们要学习的内容是抽象的数学概念和情感感觉或者其他事物的时候，由于现实生活中没有这种具体或者类比事物，我们很难对其进行学习和掌握。因此在学习这类概念的时候，我们需要人为地创建“思维模式”（PATTERN），并通过练习，不断增强这种思维模式。<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/2.jpg\" alt=\"\"></p>\n<p>在理解一些抽象概念时，在思考过程中创建的思维模式是具体而真实的，都是从起点开始一个神经元通过轴突、突触、树突传递到另一个神经元。当你不断地运用某一种思维模式的时候，他在你的脑海中就不断地根深蒂固（颜色越来越深）。</p>\n<p>第一次形成的思考模式是用“发散模式”发现问题解决路径之后，大脑将切换到“集中模式”，并记录该模式，在之后解决同样问题的时候，便直接调用这个模式，从而其在大脑中的路径颜色就越来越深，越来越牢固</p>\n<h2 id=\"关于记忆\"><strong>关于记忆</strong></h2>\n<p>记忆分为工作记忆和长期记忆。</p>\n<ul>\n<li>工作记忆：与要立即处理的问题相关的记忆，位于大脑前额皮质层（prefrontal cortex），现在广泛认为工作记忆能记住4个信息块。工作记忆就像一块黑板，并不是很好用，为了将要记忆的东西储存到工作记忆中，需要经常重复。当我们集中精力记忆一些东西时，会闭上眼睛，避免再摄入其他的新信息进入工作性记忆中，所以短期性记忆的效果很差。</li>\n<li>长期记忆：类似于仓库，有巨大的存储空间，但需要多次练习才能在众多信息中找到你想要的信息。不同的长期记忆储存在大脑的不同区域。研究发现，当第一次将工作记忆转化成长期记忆储存时，需要不断重复这个过程几次，这样能提高日后在你需要的时候找到他的几率。要将记忆转化为长期记忆，用间隔时间重复练习效果更好（类似艾宾浩斯曲线）。</li>\n</ul>\n<h2 id=\"睡眠的重要性\"><strong>睡眠的重要性</strong></h2>\n<p>在醒着的时候，大脑会产生有害物质（toxic），当睡着的时候，脑细胞与脑细胞之间的间距增大，通过脑中的液体将有害物质从脑细胞的间隙冲走，从而清理掉有害物质。所以睡眠不足意味着你的大脑毒素没有清理干净，毒素会导致你不能清晰地思考。长期睡眠不足还会导致头痛、抑郁、心脏病。糖尿病等。</p>\n<p>在睡觉的时候：</p>\n<ul>\n<li>大脑将你正在学习和思考的一些内容和概念更紧密地结合在一起。</li>\n<li>将记忆中不太重要的部分抹去，同时将你想要记住的部分进行强化。</li>\n<li>大脑会反复练习学习内容中比较难的部分，这样新的神经元模式会不断加深和强化</li>\n<li>增强理解和解决复杂问题的能力。睡觉时，大脑前额皮质层的意识钝化，这使得大脑的其他部分更容易交流，从而将正在学习的内容进行有序的整合，以利于理解和记忆。</li>\n</ul>\n<p><strong>所以在睡前复习今天所学的知识，能在睡梦中更好地理解和强化这些内容。</strong><br><br></p>\n<h1 id=\"Chunking\"><strong>Chunking</strong></h1>\n<h2 id=\"What_is_a_chunk?\"><strong>What is a chunk?</strong></h2>\n<ul>\n<li>Chunking is the mental leap that helps you unite bits of information together through meaning.</li>\n<li>A chunk means a network of neurons that are used to firing together so you can think a thought or perform an action smoothly and effectively.</li>\n</ul>\n<p>When you’re focusing your attention on something it’s almost as if you have an octopus.<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/3.jpg\" alt=\"octopus\"><br>The octopus of attention that slips it’s tentacles through those four slots of working memory when necessary to help you make connections to information that you might have in various parts of your brain.</p>\n<h2 id=\"How_to_form_a_chunk?\"><strong>How to form a chunk?</strong></h2>\n<p>Chunks are best built with focused, undivided attention, understanding of the basic idea.</p>\n<blockquote>\n<ol>\n<li>The first step on chunking is simply to focus your undivided attention on the information you want to chunk.</li>\n<li>The second step in chunking is to understand the basic idea you’re trying to chunk, whether it’s understanding a concept. Understanding is like a superglue that helps hold the underlying memory traces together. It creates broad encompassing traces that can link to other memory traces.</li>\n<li>The third step to chunking is gaining context, so you can see not just how, but also when to use this chunk. Context means going beyond the initial problem and seeing more broadly, repeating and practicing with both related and unrelated problems, so that you can see not only when to use the chunk, but when not to use it. This helps you see how your newly formed chunk fits into the bigger picture.</li>\n</ol>\n</blockquote>\n<hr>\n<ul>\n<li>Focused practice and repetition, the creation of strong memory traces, helps you to create chunks.</li>\n<li>Doing a rapid two-minute picture walk through a chapter in a book before you begin studying it, glancing at pictures and section headings, can allow you to gain a sense of the big picture.</li>\n<li>Simple recall, trying to remember the key points without looking at the page, is one of the best ways to help the chunking process along, rather than passive rereading, will make your study time more focused and effective.</li>\n<li>Test yourself frequently. Mistakes are a good thing to make when you’re learning.</li>\n<li>Try to avoid depending too much on highlighting, which can fool you into thinking that the material is going into your brain when it actually isn’t.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/4.jpg\" alt=\"\"></p>\n<p><strong>When you’re trying to figure something out, if you have a good library of these chunks, you can more easily skip to the right solution by metaphorically speaking, listening to whispers from your diffuse mode. Your diffuse mode can help you connect two or more chunks together in new ways to solve novel problems.</strong><br><br></p>\n<h2 id=\"如何阅读\"><strong>如何阅读</strong></h2>\n<p>最有效的办法是读完一遍后马上再读一遍，共两遍。</p>\n<ul>\n<li>第一遍是正常通读，不要追求快，需要时不时停下来思考。</li>\n<li>读第二遍时同时写下<strong>读书笔记</strong>，书中作为例子的故事可以跳过。要专注于思想脉络。读一章，记一章笔记，直至读完。回顾笔记，整理思路。<blockquote>\n<p>①清晰地表现每一章的逻辑脉络。<br>②带走书中所有的亮点（小故事、想法等）。<br>③有大量的自己的看法和心得。<br>④发现这本书和你脑中知识的联系。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li>只在“<code>学习区</code>”练习；<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/5.jpg\" alt=\"\"></li>\n<li>把要训练的内容分成有针对性的<code>小块</code>, 对每一个小块进行<code>重复练习</code>；</li>\n<li>在整个练习过程中， 随时能获得有效的<code>反馈</code>；</li>\n<li>练习时注意力必须<code>高度集中</code>。<br><br><br><br><br><code>To be continued</code></li>\n</ol>\n<p>Reference:</p>\n<ol>\n<li>MOOC学院  <a href=\"http://mooc.guokr.com/course/1484/Learning-How-to-Learn--Powerful-mental-tools-to-help-you-master-tough-subjects/note/\" target=\"_blank\" rel=\"external\">learning how to learn 笔记</a></li>\n</ol>\n","source":"_posts/Learning how to learn.markdown","raw":"---\nlayout: post\ntitle: \"Learning how to learn\"\ndate: 2014-10-28 22:18\ncomments: true\ntags: \n\t- 思维\n\t- 记忆力\n\t- Open Courses\n\n---\ncousera课:[learning how to learn](https://class.coursera.org/learning-002)笔记\n#**Focused versus Diffuse Thinking**##\n##**专注模式和发散模式**###\n\n我们人类有两种最基本的思考模式：\n\n- 专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。\n- 发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。\n\n![思考模式](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg)\n<!--more-->\n这两种思考模式就像硬币的两个面，人类不能同时使用两种思考模式。以现代神经学的知识，我们不能同时处在集中模式和发散模式下进行思考，就像一枚硬币不能同时正面和反面朝上一样。但这并不意味着我们不能同时交替使用他们来解决问题，当学习新的比较难懂的东西时，思维需要在两种完全不同的模式中转换，这能帮助我们更有效地学习。\n\nEg： Dali and Edison，他们放松自己让思绪漫游，考虑他们之前专注的内容，一旦要睡着，钥匙 or钢球将他们惊醒，然后带着在发散模式下得到的灵感，转而进入专注模式，将这些灵感变成现实。当然这些需要每天的练习。\n\n要想有强健的体魄，需要每天运动，让肌肉增长；同样地，想建立神经结构，也需要每天练习，这是关键。\n\n##**拖延症**###\n\n- 拖延症的产生：当你不想去做一件事的时候，大脑中相关区域的痛苦会被激发出来，为了避免这种痛苦，大脑将注意力转向其他地方。结果是，你只是感到暂时的愉悦，但是事情被拖延了。\n- 如何克服拖延症： **立即去做**！！研究发现，当人们开始做不喜欢的事不久，大脑中痛苦的感觉就消失了！\n\n##**熟能生巧**###\n\n当我们学习一些具体事物的时候，只要将它和现实中的事物进行“链接”，我们就能掌握这个知识。但如果我们要学习的内容是抽象的数学概念和情感感觉或者其他事物的时候，由于现实生活中没有这种具体或者类比事物，我们很难对其进行学习和掌握。因此在学习这类概念的时候，我们需要人为地创建“思维模式”（PATTERN），并通过练习，不断增强这种思维模式。\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/2.jpg)\n\n在理解一些抽象概念时，在思考过程中创建的思维模式是具体而真实的，都是从起点开始一个神经元通过轴突、突触、树突传递到另一个神经元。当你不断地运用某一种思维模式的时候，他在你的脑海中就不断地根深蒂固（颜色越来越深）。\n\n第一次形成的思考模式是用“发散模式”发现问题解决路径之后，大脑将切换到“集中模式”，并记录该模式，在之后解决同样问题的时候，便直接调用这个模式，从而其在大脑中的路径颜色就越来越深，越来越牢固\n\n##**关于记忆**###\n\n记忆分为工作记忆和长期记忆。\n\n- 工作记忆：与要立即处理的问题相关的记忆，位于大脑前额皮质层（prefrontal cortex），现在广泛认为工作记忆能记住4个信息块。工作记忆就像一块黑板，并不是很好用，为了将要记忆的东西储存到工作记忆中，需要经常重复。当我们集中精力记忆一些东西时，会闭上眼睛，避免再摄入其他的新信息进入工作性记忆中，所以短期性记忆的效果很差。\n- 长期记忆：类似于仓库，有巨大的存储空间，但需要多次练习才能在众多信息中找到你想要的信息。不同的长期记忆储存在大脑的不同区域。研究发现，当第一次将工作记忆转化成长期记忆储存时，需要不断重复这个过程几次，这样能提高日后在你需要的时候找到他的几率。要将记忆转化为长期记忆，用间隔时间重复练习效果更好（类似艾宾浩斯曲线）。\n\n\n##**睡眠的重要性**###\n\n在醒着的时候，大脑会产生有害物质（toxic），当睡着的时候，脑细胞与脑细胞之间的间距增大，通过脑中的液体将有害物质从脑细胞的间隙冲走，从而清理掉有害物质。所以睡眠不足意味着你的大脑毒素没有清理干净，毒素会导致你不能清晰地思考。长期睡眠不足还会导致头痛、抑郁、心脏病。糖尿病等。\n\n在睡觉的时候：\n\n- 大脑将你正在学习和思考的一些内容和概念更紧密地结合在一起。\n- 将记忆中不太重要的部分抹去，同时将你想要记住的部分进行强化。\n- 大脑会反复练习学习内容中比较难的部分，这样新的神经元模式会不断加深和强化\n- 增强理解和解决复杂问题的能力。睡觉时，大脑前额皮质层的意识钝化，这使得大脑的其他部分更容易交流，从而将正在学习的内容进行有序的整合，以利于理解和记忆。\n\n**所以在睡前复习今天所学的知识，能在睡梦中更好地理解和强化这些内容。**\n<br>\n#**Chunking**##\n##**What is a chunk?**###\n- Chunking is the mental leap that helps you unite bits of information together through meaning.\n- A chunk means a network of neurons that are used to firing together so you can think a thought or perform an action smoothly and effectively.\n\nWhen you're focusing your attention on something it's almost as if you have an octopus.\n![octopus](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/3.jpg)\nThe octopus of attention that slips it's tentacles through those four slots of working memory when necessary to help you make connections to information that you might have in various parts of your brain.\n\n\n##**How to form a chunk?**\nChunks are best built with focused, undivided attention, understanding of the basic idea.\n> \n1. The first step on chunking is simply to focus your undivided attention on the information you want to chunk.\n2. The second step in chunking is to understand the basic idea you're trying to chunk, whether it's understanding a concept. Understanding is like a superglue that helps hold the underlying memory traces together. It creates broad encompassing traces that can link to other memory traces.\n3. The third step to chunking is gaining context, so you can see not just how, but also when to use this chunk. Context means going beyond the initial problem and seeing more broadly, repeating and practicing with both related and unrelated problems, so that you can see not only when to use the chunk, but when not to use it. This helps you see how your newly formed chunk fits into the bigger picture.\n\n---\n- Focused practice and repetition, the creation of strong memory traces, helps you to create chunks.\n- Doing a rapid two-minute picture walk through a chapter in a book before you begin studying it, glancing at pictures and section headings, can allow you to gain a sense of the big picture.\n- Simple recall, trying to remember the key points without looking at the page, is one of the best ways to help the chunking process along, rather than passive rereading, will make your study time more focused and effective.\n- Test yourself frequently. Mistakes are a good thing to make when you're learning.\n- Try to avoid depending too much on highlighting, which can fool you into thinking that the material is going into your brain when it actually isn't.\n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/4.jpg)\n\n\n**When you're trying to figure something out, if you have a good library of these chunks, you can more easily skip to the right solution by metaphorically speaking, listening to whispers from your diffuse mode. Your diffuse mode can help you connect two or more chunks together in new ways to solve novel problems.**\n<br>\n\n##**如何阅读**###\n最有效的办法是读完一遍后马上再读一遍，共两遍。\n\n- 第一遍是正常通读，不要追求快，需要时不时停下来思考。\n- 读第二遍时同时写下**读书笔记**，书中作为例子的故事可以跳过。要专注于思想脉络。读一章，记一章笔记，直至读完。回顾笔记，整理思路。\n> ①清晰地表现每一章的逻辑脉络。\n  ②带走书中所有的亮点（小故事、想法等）。\n  ③有大量的自己的看法和心得。\n  ④发现这本书和你脑中知识的联系。\n\n**总结：**\n1. 只在“`学习区`”练习；\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/5.jpg)\n2. 把要训练的内容分成有针对性的`小块`, 对每一个小块进行`重复练习`；\n3. 在整个练习过程中， 随时能获得有效的`反馈`；\n4. 练习时注意力必须`高度集中`。\n<br>\n<br>\n`To be continued`\n\nReference:\n1. MOOC学院  [learning how to learn 笔记](http://mooc.guokr.com/course/1484/Learning-How-to-Learn--Powerful-mental-tools-to-help-you-master-tough-subjects/note/)\n","slug":"Learning how to learn","updated":1427107945000,"excerpt":"<p>cousera课:<a href=\"https://class.coursera.org/learning-002\" target=\"_blank\" rel=\"external\">learning how to learn</a>笔记</p>\n<h1 id=\"Focused_versus_Diffuse_Thinking\"><strong>Focused versus Diffuse Thinking</strong></h1>\n<h2 id=\"专注模式和发散模式\"><strong>专注模式和发散模式</strong></h2>\n<p>我们人类有两种最基本的思考模式：</p>\n<ul>\n<li>专注模式(focused)： 解决简单的 熟悉的问题时，很快就能找到熟悉的思路，将问题一一拆分，并逐步解决。</li>\n<li>发散模式(diffuse)：解决一些从未接触过的想法，概念时，不知道怎样开始解决，不知道正确的方向，所以思绪天马行空，是发散的，直到碰到一个障碍又折回来继续思考，直到解决问题。在这种思维模式下，你的思维更广阔，全面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Learning%20How%20to%20Learn/1.jpg\" alt=\"思考模式\"><br>","_id":"gl8rb0jdtk99am30","categories":[],"photos":[],"link":""},{"layout":"post","title":"数据结构","date":1417742280000,"comments":true,"tags":["norb35t4qgn9pk4t"],"content":"<p>打算重新学下数据结构和算法。<br><strong>时间</strong>：2月底初步完成。<br><strong>目标</strong>：当面临数据结构和算法时，能立马想到特定的行为或者操作以及一些属性。例如，链表,立马想到插入、移除、遍历和计算元素个数等操作，和指针域、数据域等属性。<br><strong>资源</strong>：书籍《算法精解》,《leetcode-C++》 网站：<a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"external\">hackerRank</a><br><a id=\"more\"></a><br>最常用的<strong>数据结构</strong>有：链表、栈、队列、集合、哈希表、树、堆、优先级队列和图。<br><strong>算法</strong>分类：</p>\n<ol>\n<li>随机法：依赖于随机数的统计特性。例如：快速排序。</li>\n<li>分治法：分解、求解、合并。例如：归并排序。</li>\n<li>动态规划：与分治法类似，将大问题分解为子问题最后将结果合并。在动态规划中，子问题之间并不是独立的，是相关联的。</li>\n<li>贪心法：不是从整体最优上考虑， 而仅仅是在某种意义上的<strong>局部最优解</strong>。例如：霍夫曼编码。</li>\n<li>近似法：只计算出“足够好”的解，并不计算出最优解。 例如：推销员问题</li>\n</ol>\n<p>使用数据结构和算法的原因：1.效率 2.抽象 3.重用率<br>开发应用软件的良好准则：1.模块化 2.可读性 3.简洁性 4.一致性 </p>\n<h2 id=\"链表\">链表</h2>\n<p>分类：单链表、双向链表、循环链表<br>应用：邮件列表、滚动列表、内存管理、以及其他数据结构等</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ListElmt_ </div><div class=\"line\">{   <span class=\"comment\">/*链表元素数据结构*/</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> *data;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> ListElmt_ *next;\t</div><div class=\"line\">\t<span class=\"comment\">//双向链表多一个指向前结点的指针（*prev）</span></div><div class=\"line\">}ListElmt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> List_ </div><div class=\"line\">{   <span class=\"comment\">/*链表数据结构*/</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> size; <span class=\"comment\">//链表中元素个数</span></div><div class=\"line\">\tListElmt *head; <span class=\"comment\">//指向链表中头结点元素的指针</span></div><div class=\"line\">\tListElmt *tail; <span class=\"comment\">//指向链表中末尾结点元素的指针,若是循环链表删除这个。</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*封装之后传递给list_init函数的析构函数,如果链表包含采用malloc动态分配的数据，当链表被销毁时，destroy应该设置为free 用来释放数据。*/</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</div><div class=\"line\">\t<span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);<span class=\"comment\">//用来判断两个成员是否匹配。</span></div><div class=\"line\">}List;</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> list_init(List *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data))</div><div class=\"line\">{   <span class=\"comment\">/*初始化链表*/</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;head = NULL;</div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;tail = NULL;</div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;destroy = destroy;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> list_ins_next(List *<span class=\"built_in\">list</span>, ListElmt *element, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data)</div><div class=\"line\">{   <span class=\"comment\">/*将一个元素插入element元素之后*/</span></div><div class=\"line\">\tListElmt *new_element;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((new_element =(ListElmt *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ListElmt)))==NULL)<span class=\"comment\">//动态分配链表元素（结点）</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\tnew_element-&gt;data = (<span class=\"keyword\">void</span> *)data; </div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (element == NULL){ <span class=\"comment\">//增加头结点</span></div><div class=\"line\">\t\tnew_element-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = new_element;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;size == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"built_in\">list</span>-&gt;tail = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">else</span>{</div><div class=\"line\">\t    <span class=\"comment\">/*插入其他位置*/</span></div><div class=\"line\">\t\tnew_element-&gt;next = element-&gt;next;</div><div class=\"line\">\t\telement-&gt;next = new_element;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(element-&gt;next == NULL)</div><div class=\"line\">\t\t\t<span class=\"built_in\">list</span>-&gt;tail = new_element;</div><div class=\"line\">\t}</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;size++;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> list_rem_next(List *<span class=\"built_in\">list</span>, ListElmt *element, <span class=\"keyword\">void</span> **data)\t</div><div class=\"line\">{   <span class=\"comment\">/*移除element之后的那个结点，data将指向已移除结点的数据域*/</span></div><div class=\"line\">\tListElmt *old_element;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;size == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (element == NULL){<span class=\"comment\">//移除头结点</span></div><div class=\"line\">\t\t*data = <span class=\"built_in\">list</span>-&gt;head-&gt;data; </div><div class=\"line\">\t\told_element = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">\t\t<span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;head-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">list</span>-&gt;size == <span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t<span class=\"built_in\">list</span>-&gt;tail = NULL;</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">else</span>{ </div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (element-&gt;next == NULL) <span class=\"comment\">//element如果是尾结点，返回-1.</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//删除其他位置结点</span></div><div class=\"line\">\t\t*data = element-&gt;next-&gt;data;</div><div class=\"line\">\t\told_element = element-&gt;next;</div><div class=\"line\">\t\telement-&gt;next = old_element-&gt;next;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(element-&gt;next == NULL)<span class=\"comment\">//更新尾结点</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">list</span>-&gt;tail = element;</div><div class=\"line\">\t}</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">free</span>(old_element);<span class=\"comment\">//释放掉链表元素（结点），但是结点指向的数据域还没释放掉（如果该数据是动态分配的话）</span></div><div class=\"line\">\t<span class=\"built_in\">list</span>-&gt;size--;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> list_destroy(List *<span class=\"built_in\">list</span>)</div><div class=\"line\">{   <span class=\"comment\">/*移除链表中所有的元素*/</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> *data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">list</span>-&gt;size &gt; <span class=\"number\">0</span>){</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(list_rem_next(<span class=\"built_in\">list</span>,NULL,(<span class=\"keyword\">void</span> **)&data)==<span class=\"number\">0</span> && <span class=\"built_in\">list</span>-&gt;destroy != NULL){</div><div class=\"line\">            <span class=\"comment\">/*list_rem_next函数调用返回后，data将指向已移除结点的数据域，如果当初那个数据域是动态分配的，那么应该用free释放掉*/</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">list</span>-&gt;destroy(data);</div><div class=\"line\">\t\t}</div><div class=\"line\">\t}</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(<span class=\"built_in\">list</span>,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(List));</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"栈和队列\">栈和队列</h2>\n<p><strong>栈</strong>：按<strong>后进先出（LIFO）</strong>的顺序存储和检索数据的高效数据结构。可以想象成一筒网球。<br><strong>队列</strong>：按照<strong>先进先出（FIFO）</strong>的顺序存储和检索数据的高效数据结构。可以想象成排队的一队人。</p>\n<p><strong>应用</strong>：信号量（队列）、事件处理（队列）、函数调用（栈）等。</p>\n<p>以下的栈和队列是用链表实现的，具有一定的多态能力。<br>栈：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> stack_push(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data) {</div><div class=\"line\">    <span class=\"comment\">//压栈，插入链表中的头结点。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list_ins_next(<span class=\"built_in\">stack</span>, NULL, data);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> stack_push(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data) {</div><div class=\"line\">    <span class=\"comment\">//出栈，删除链表的头结点。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list_ins_next(<span class=\"built_in\">stack</span>, NULL, data);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>队列：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> queue_enqueue(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data) {</div><div class=\"line\">    <span class=\"comment\">//入队，在链表的尾部添加新的元素。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list_ins_next(<span class=\"built_in\">queue</span>,<span class=\"built_in\">queue</span>-&gt;tail, data);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> queue_dequeue(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">void</span> **data) {</div><div class=\"line\">    <span class=\"comment\">//出队，删除链表的头结点。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> list_rem_next(<span class=\"built_in\">queue</span>, NULL, data);</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"集合\">集合</h2>\n<p>集合是不同对象（称为成员）的无序聚集。<br><strong>特点</strong>：1.成员是无序的。 2.每个成员都只在集合中出现一次。<br><strong>应用</strong>：数据关联、集合覆盖、图、图算法、关系代数等。</p>\n<p>实现集合的一种好的方式是采用链表。</p>\n<p><code>c</code></p>\n","source":"_posts/List.markdown","raw":"---\nlayout: post\ntitle: \"数据结构\"\ndate: 2014-12-05 9:18\ncomments: true\ntags: \n\t- 数据结构\n---\n打算重新学下数据结构和算法。\n**时间**：2月底初步完成。\n**目标**：当面临数据结构和算法时，能立马想到特定的行为或者操作以及一些属性。例如，链表,立马想到插入、移除、遍历和计算元素个数等操作，和指针域、数据域等属性。\n**资源**：书籍《算法精解》,《leetcode-C++》 网站：[hackerRank](https://www.hackerrank.com/)\n<!--more-->\n最常用的**数据结构**有：链表、栈、队列、集合、哈希表、树、堆、优先级队列和图。\n**算法**分类：\n1. 随机法：依赖于随机数的统计特性。例如：快速排序。\n2. 分治法：分解、求解、合并。例如：归并排序。\n3. 动态规划：与分治法类似，将大问题分解为子问题最后将结果合并。在动态规划中，子问题之间并不是独立的，是相关联的。\n4. 贪心法：不是从整体最优上考虑， 而仅仅是在某种意义上的**局部最优解**。例如：霍夫曼编码。\n5. 近似法：只计算出“足够好”的解，并不计算出最优解。 例如：推销员问题\n\n使用数据结构和算法的原因：1.效率 2.抽象 3.重用率\n开发应用软件的良好准则：1.模块化 2.可读性 3.简洁性 4.一致性 \n\n##链表##\n分类：单链表、双向链表、循环链表\n应用：邮件列表、滚动列表、内存管理、以及其他数据结构等\n\n```c\ntypedef struct ListElmt_ \n{   /*链表元素数据结构*/\n\tvoid *data;\n\tstruct ListElmt_ *next;\t\n\t//双向链表多一个指向前结点的指针（*prev）\n}ListElmt;\n\ntypedef struct List_ \n{   /*链表数据结构*/\n\tint size; //链表中元素个数\n\tListElmt *head; //指向链表中头结点元素的指针\n\tListElmt *tail; //指向链表中末尾结点元素的指针,若是循环链表删除这个。\n\t\n\t/*封装之后传递给list_init函数的析构函数,如果链表包含采用malloc动态分配的数据，当链表被销毁时，destroy应该设置为free 用来释放数据。*/\n\tvoid (*destroy)(void *data);\n\tint (*match)(const void *key1, const void *key2);//用来判断两个成员是否匹配。\n}List;\n```\n\n```c\nvoid list_init(List *list, void (*destroy)(void *data))\n{   /*初始化链表*/\n\n\tlist->size = 0;\n\tlist->head = NULL;\n\tlist->tail = NULL;\n\tlist->destroy = destroy;\n}\n\nint list_ins_next(List *list, ListElmt *element, const void *data)\n{   /*将一个元素插入element元素之后*/\n\tListElmt *new_element;\n\tif ((new_element =(ListElmt *)malloc(sizeof(ListElmt)))==NULL)//动态分配链表元素（结点）\n\t\treturn -1;\n\n\tnew_element->data = (void *)data; \n\t\n\tif (element == NULL){ //增加头结点\n\t\tnew_element->next = list->head;\n\t\tlist->head = new_element;\n\n\t\tif(list->size == 0)\n\t\t\tlist->tail = list->head;\n\t}\n\telse{\n\t    /*插入其他位置*/\n\t\tnew_element->next = element->next;\n\t\telement->next = new_element;\n\n\t\tif(element->next == NULL)\n\t\t\tlist->tail = new_element;\n\t}\n\n\tlist->size++;\n\treturn 0;\n}\n\nint list_rem_next(List *list, ListElmt *element, void **data)\t\n{   /*移除element之后的那个结点，data将指向已移除结点的数据域*/\n\tListElmt *old_element;\n\tif (list->size == 0)\n\t\treturn -1;\n\tif (element == NULL){//移除头结点\n\t\t*data = list->head->data; \n\t\told_element = list->head;\n\t\tlist->head = list->head->next;\n\n\t\tif(list->size == 1)\n\t\t\tlist->tail = NULL;\n\t}\n\telse{ \n\t\tif (element->next == NULL) //element如果是尾结点，返回-1.\n\t\t\treturn -1;\n\t\t//删除其他位置结点\n\t\t*data = element->next->data;\n\t\told_element = element->next;\n\t\telement->next = old_element->next;\n\t\tif(element->next == NULL)//更新尾结点\n\t\t\tlist->tail = element;\n\t}\n\n\tfree(old_element);//释放掉链表元素（结点），但是结点指向的数据域还没释放掉（如果该数据是动态分配的话）\n\tlist->size--;\n\treturn 0;\n}\n\nvoid list_destroy(List *list)\n{   /*移除链表中所有的元素*/\n\tvoid *data;\n\n\twhile(list->size > 0){\n\t\tif(list_rem_next(list,NULL,(void **)&data)==0 && list->destroy != NULL){\n            /*list_rem_next函数调用返回后，data将指向已移除结点的数据域，如果当初那个数据域是动态分配的，那么应该用free释放掉*/\n\t\t\tlist->destroy(data);\n\t\t}\n\t}\n\n\tmemset(list,0,sizeof(List));\n}\n\n```\n\n##栈和队列##\n**栈**：按**后进先出（LIFO）**的顺序存储和检索数据的高效数据结构。可以想象成一筒网球。\n**队列**：按照**先进先出（FIFO）**的顺序存储和检索数据的高效数据结构。可以想象成排队的一队人。\n\n**应用**：信号量（队列）、事件处理（队列）、函数调用（栈）等。\n\n以下的栈和队列是用链表实现的，具有一定的多态能力。\n栈：\n```c\nint stack_push(Stack *stack, const void *data) {\n    //压栈，插入链表中的头结点。\n    return list_ins_next(stack, NULL, data);\n}\n\nint stack_push(Stack *stack, const void *data) {\n    //出栈，删除链表的头结点。\n    return list_ins_next(stack, NULL, data);\n}\n```\n队列：\n```c\nint queue_enqueue(Queue *queue, const void *data) {\n    //入队，在链表的尾部添加新的元素。\n    return list_ins_next(queue,queue->tail, data);\n}\n\nint queue_dequeue(Queue *queue, void **data) {\n    //出队，删除链表的头结点。\n    return list_rem_next(queue, NULL, data);\n\n}\n\n```\n\n##集合##\n集合是不同对象（称为成员）的无序聚集。\n**特点**：1.成员是无序的。 2.每个成员都只在集合中出现一次。\n**应用**：数据关联、集合覆盖、图、图算法、关系代数等。\n\n实现集合的一种好的方式是采用链表。\n\n```c\n```\n\n","slug":"List","updated":1423362905000,"excerpt":"<p>打算重新学下数据结构和算法。<br><strong>时间</strong>：2月底初步完成。<br><strong>目标</strong>：当面临数据结构和算法时，能立马想到特定的行为或者操作以及一些属性。例如，链表,立马想到插入、移除、遍历和计算元素个数等操作，和指针域、数据域等属性。<br><strong>资源</strong>：书籍《算法精解》,《leetcode-C++》 网站：<a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"external\">hackerRank</a><br>","_id":"4an433og3d81lsvq","categories":[],"photos":[],"link":""},{"layout":"post","title":"Managing Money","date":1414383480000,"comments":true,"tags":["a5cqkx67n4xaasq0","yr4rcx58k2nnzcid"],"content":"<p>今天在cousera上看到这门课<a href=\"https://www.coursera.org/course/managingmoney\" target=\"_blank\" rel=\"external\">Managing Your Time, Money, and Career: MBA Insights for Undergraduates</a><br>走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。</p>\n<h1 id=\"What’s_In_Your_Budget?\"><strong>What’s In Your Budget?</strong></h1>\n<h2 id=\"Theme_of_this_class:\"><strong>Theme of this class:</strong></h2>\n<ul>\n<li>Having a smart budget plan can prepare us for unexpected emergency</li>\n<li>Planning for emergency is as important as planning for investment</li>\n<li>Diversify income source is the key way to make a good budget plan<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg\" alt=\"managing money\"><br><a id=\"more\"></a><br><br></li>\n</ul>\n<h2 id=\"How_to_create_a_budget:\"><strong>How to create a budget:</strong></h2>\n<ul>\n<li>The basic model to start building a budget:<br>  -Money in<br>  -Money out</li>\n<li>Between the two we have discretionary funds:<br>  -Cash<br>  -Savings<br>  -Investments</li>\n</ul>\n<p>A budget plan would look like this:<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/2.money%20flow.jpg\" alt=\"money flow\"><br>Discretionary fund is the extra money you have, after paying all your expense. You can spend all of it for current fun, or you can save it/ invest for future.<br><br></p>\n<h2 id=\"How_to_start_a_budget_plan:\"><strong>How to start a budget plan:</strong></h2>\n<ul>\n<li>First step:Creating a saving account in your local bank, it can be the cash reserves for emergency, or funds for buying a house, etc. It earns more interests than checking account.</li>\n<li>College might have credit union, which charges lower fees and have higher interest rates.Also, not every bank is the same; some might have higher fees, fewer transaction times, and other different policies.</li>\n</ul>\n<p><br></p>\n<p>Some other key points in managing budgeting and spending your money:</p>\n<ul>\n<li>Money are meant to be spend-wisely. How you spend it will determine whether your wealth will increase or shrink.</li>\n<li>Fixed expenses are the point to start counting, but they can also be adjusted. E.g. you can choose which kind of house you want to live in, and therefore how much rent you will pay.</li>\n<li>You can use spreadsheet to plan budget, and there are also tools online.</li>\n<li>The more important work is not creating a budget, but sticking to it.<br><br><h1 id=\"To_Credit_or_Debit_Card?\"><strong>To Credit or Debit Card?</strong></h1>\n<h2 id=\"Theme:\"><strong>Theme:</strong></h2>\n</li>\n<li>Differences between credit card and debit card</li>\n<li>The benefits and risk of credit card</li>\n</ul>\n<h2 id=\"Debit_card:\"><strong>Debit card:</strong></h2>\n<ul>\n<li>Draws directly from your account</li>\n<li>No monthly bill to pay</li>\n<li>Account “debited”</li>\n<li>Transactions easy to track</li>\n<li>Online features to monitor account</li>\n</ul>\n<p>You put money inside the bank first, and only spend what you already have. Therefore the account is “debited”.</p>\n<p>With debit card, you don’t have to bring so much cash every day.Also, debit card is convenient for tracking, because you can only spend what you have. Therefore, it’s easier for budgeting because you would never overspend.</p>\n<h2 id=\"Credit_Card:\"><strong>Credit Card:</strong></h2>\n<ul>\n<li>Bank temporarily lends you the money.</li>\n<li>You pay balance end of month</li>\n<li>If you can’t pay all,you pay interest!</li>\n<li>Rate = “APR”:annual percentage rate</li>\n<li>APR = combined interest &amp; fees over 1 year</li>\n</ul>\n<p>You spend money first, which creates a debt, and you pay the bank back later. Therefore you “credit” is important.</p>\n<p>Credit institution will record your “credit score”: whether you had pay back on time, and how much you could probably afford each time.</p>\n<p>With higher credit score, you would pay less interest and your APR might be low. Bank would evaluate lending money to you as a lower risk.</p>\n<h2 id=\"Different_type_of_credit_cards:\"><strong>Different type of credit cards:</strong></h2>\n<p>There are two types of credit card: </p>\n<ul>\n<li>Unsecured cards are often offered by banks. You do not need to provide collateral.</li>\n<li>Secured cards require collateral for people with poor credit history. Collateral could be cars, boats, etc. If you fail to pay your bill, you might lose your collateral.</li>\n</ul>\n<h2 id=\"Reward_Cards:\"><strong>Reward Cards:</strong></h2>\n<p>Some credit cards are reward cards, which are always only given to people with good credit history. You can get points for the money you spent, and rewards include cash back, gas savings,travel rewards, etc.</p>\n<p>But reward cards often come with additional fees. Pay your balance quickly could help.</p>\n<h2 id=\"Key_Points:\"><strong>Key Points:</strong></h2>\n<ul>\n<li>Debit cards great for small expenditures,not emergencies or large stuff.</li>\n<li>Credit Cards good for large purchases:can spread the cost out.</li>\n</ul>\n<p><br><br><br><br><br><br><br><br><code>To be continued</code></p>\n","source":"_posts/Managing Money.markdown","raw":"---\nlayout: post\ntitle: \"Managing Money\"\ndate: 2014-10-27 12:18\ncomments: true\ntags: \n\t- 理财\n\t- Open Courses\n\n---\n今天在cousera上看到这门课[Managing Your Time, Money, and Career: MBA Insights for Undergraduates](https://www.coursera.org/course/managingmoney)\n走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。\n#**What's In Your Budget?**##\n##**Theme of this class:**###\n\n- Having a smart budget plan can prepare us for unexpected emergency\n- Planning for emergency is as important as planning for investment\n- Diversify income source is the key way to make a good budget plan\n ![managing money](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg)\n<!--more-->\n<br>\n\n##**How to create a budget:**###\n\n- The basic model to start building a budget:\n    -Money in\n    -Money out\n- Between the two we have discretionary funds:\n    -Cash\n    -Savings\n    -Investments\n\nA budget plan would look like this:\n![money flow](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/2.money%20flow.jpg)\nDiscretionary fund is the extra money you have, after paying all your expense. You can spend all of it for current fun, or you can save it/ invest for future.\n<br>\n##**How to start a budget plan:**###\n\n- First step:Creating a saving account in your local bank, it can be the cash reserves for emergency, or funds for buying a house, etc. It earns more interests than checking account.\n- College might have credit union, which charges lower fees and have higher interest rates.Also, not every bank is the same; some might have higher fees, fewer transaction times, and other different policies.\n\n<br>\n\nSome other key points in managing budgeting and spending your money:\n\n- Money are meant to be spend-wisely. How you spend it will determine whether your wealth will increase or shrink.\n- Fixed expenses are the point to start counting, but they can also be adjusted. E.g. you can choose which kind of house you want to live in, and therefore how much rent you will pay.\n- You can use spreadsheet to plan budget, and there are also tools online.\n- The more important work is not creating a budget, but sticking to it.\n<br>\n#**To Credit or Debit Card?**##\n##**Theme:**###\n- Differences between credit card and debit card\n- The benefits and risk of credit card\n\n##**Debit card:**###\n\n- Draws directly from your account\n- No monthly bill to pay\n- Account \"debited\"\n- Transactions easy to track\n- Online features to monitor account\n\nYou put money inside the bank first, and only spend what you already have. Therefore the account is “debited”.\n\nWith debit card, you don’t have to bring so much cash every day.Also, debit card is convenient for tracking, because you can only spend what you have. Therefore, it’s easier for budgeting because you would never overspend.\n\n##**Credit Card:**###\n\n- Bank temporarily lends you the money.\n- You pay balance end of month\n- If you can't pay all,you pay interest!\n- Rate = \"APR\":annual percentage rate\n- APR = combined interest & fees over 1 year\n\nYou spend money first, which creates a debt, and you pay the bank back later. Therefore you “credit” is important.\n\nCredit institution will record your “credit score”: whether you had pay back on time, and how much you could probably afford each time.\n\nWith higher credit score, you would pay less interest and your APR might be low. Bank would evaluate lending money to you as a lower risk.\n\n\n##**Different type of credit cards:**###\nThere are two types of credit card: \n\n- Unsecured cards are often offered by banks. You do not need to provide collateral.\n- Secured cards require collateral for people with poor credit history. Collateral could be cars, boats, etc. If you fail to pay your bill, you might lose your collateral.\n\n##**Reward Cards:**###\nSome credit cards are reward cards, which are always only given to people with good credit history. You can get points for the money you spent, and rewards include cash back, gas savings,travel rewards, etc.\n\nBut reward cards often come with additional fees. Pay your balance quickly could help.\n\n##**Key Points:**###\n- Debit cards great for small expenditures,not emergencies or large stuff.\n- Credit Cards good for large purchases:can spread the cost out.\n\n<br>\n<br>\n<br>\n<br>\n`To be continued`","slug":"Managing Money","updated":1426577292000,"excerpt":"<p>今天在cousera上看到这门课<a href=\"https://www.coursera.org/course/managingmoney\" target=\"_blank\" rel=\"external\">Managing Your Time, Money, and Career: MBA Insights for Undergraduates</a><br>走向社会后，如何理财是一门学问。感觉这门课不难，但是挺实用的。顺便还可以学习下英语，练习下听力。以下是笔记。</p>\n<h1 id=\"What’s_In_Your_Budget?\"><strong>What’s In Your Budget?</strong></h1>\n<h2 id=\"Theme_of_this_class:\"><strong>Theme of this class:</strong></h2>\n<ul>\n<li>Having a smart budget plan can prepare us for unexpected emergency</li>\n<li>Planning for emergency is as important as planning for investment</li>\n<li>Diversify income source is the key way to make a good budget plan<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Managing%20time,money%20and%20career/1.managing%20money.jpg\" alt=\"managing money\"><br>","_id":"wv9gryrq5y0gacjm","categories":[],"photos":[],"link":""},{"layout":"post","title":"Markdown笔记","date":1414286280000,"comments":true,"tags":["3nlrspohfs5r8bgx"],"content":"<h1 id=\"斜体和粗体\"><strong>斜体和粗体</strong></h1>\n<p>使用 * 和 ** 表示斜体和粗体。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是 <span class=\"keyword\">*</span>斜体<span class=\"keyword\">*</span>，这是 <span class=\"keyword\">*</span><span class=\"keyword\">*</span>粗体<span class=\"keyword\">*</span><span class=\"keyword\">*</span>。</div></pre></td></tr></table></figure>\n\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>\n<h1 id=\"分级标题\"><strong>分级标题</strong></h1>\n<p>使用 === 表示一级标题，使用 —- 表示二级标题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"header\">这是一个一级标题</span></div><div class=\"line\">============================</div><div class=\"line\"></div><div class=\"line\"><span class=\"header\">这是一个二级标题</span></div><div class=\"line\">--------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">### 这是一个三级标题</div></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。<br><a id=\"more\"></a></p>\n<h1 id=\"外链接\"><strong>外链接</strong></h1>\n<p>使用 [描述](链接地址) 为文字增加外链接。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是去往 [<span class=\"link_label\">本人博客</span>](<span class=\"link_url\">www.tanghaoblog.me</span>) 的链接。</div></pre></td></tr></table></figure>\n\n\n<p>这是去往 <a href=\"http://thddaniel.github.com\" target=\"_blank\" rel=\"external\">本人博客</a> 的链接。</p>\n<h1 id=\"无序列表\"><strong>无序列表</strong></h1>\n<p>使用 *，+，- 表示无序列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">* </span>无序列表项 一</div><div class=\"line\"><span class=\"bullet\">+ </span>无序列表项 二</div><div class=\"line\"><span class=\"bullet\">- </span>无序列表项 三</div></pre></td></tr></table></figure>\n\n<ul>\n<li>无序列表项 一</li>\n</ul>\n<ul>\n<li>无序列表项 二</li>\n</ul>\n<ul>\n<li>无序列表项 三</li>\n</ul>\n<h1 id=\"有序列表\"><strong>有序列表</strong></h1>\n<p>使用数字和点表示有序列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">1. </span>有序列表项 一</div><div class=\"line\"><span class=\"bullet\">2. </span>有序列表项 二 </div><div class=\"line\"><span class=\"bullet\">3. </span>有序列表项 三</div></pre></td></tr></table></figure>\n\n<h1 id=\"文字引用\"><strong>文字引用</strong></h1>\n<p>使用 &gt; 表示文字引用。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"blockquote\">&gt; 一盏灯， 一片昏黄</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一盏灯， 一片昏黄</p>\n</blockquote>\n<p>注：  &gt; 和文本之间要保留一个字符的空格。</p>\n<h1 id=\"行内代码块\"><strong>行内代码块</strong></h1>\n<p>使用 `代码` 表示行内代码块。</p>\n<p>示例：</p>\n<p>让我们聊聊 <code>html</code>。</p>\n<h1 id=\"代码块\"><strong>代码块</strong></h1>\n<p>使用 四个缩进空格 表示代码块。</p>\n<pre><code>这是一个代码块，此行左侧有四个不可见的空格。\nhello world.\n</code></pre><h1 id=\"插入图像\"><strong>插入图像</strong></h1>\n<p>使用 ![描述](图片链接地址) 插入图像。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"link_label\">我的头像</span>](<span class=\"link_url\">https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg</span>)</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg\" alt=\"我的头像\"></p>\n<h1 id=\"删除线\"><strong>删除线</strong></h1>\n<p>使用 ~~ 表示删除线。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">~~这是一段错误的文本。~~</div></pre></td></tr></table></figure>\n\n<p><del>这是一段错误的文本。</del></p>\n<h1 id=\"加强的代码块\"><strong>加强的代码块</strong></h1>\n<p>支持编程语言的语法高亮的显示，行号显示。</p>\n<p>非代码示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">vim</span>-gnome</div></pre></td></tr></table></figure>\n\n<p>Python 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"decorator\">@requires_authorization</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span><span class=\"params\">(param1=<span class=\"string\">''</span>, param2=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''A docstring'''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Greater'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"prompt\">&gt;&gt;&gt; </span>message = <span class=\"string\">'''interpreter</span></div><div class=\"line\"><span class=\"prompt\">... </span>prompt'''</div></pre></td></tr></table></figure>\n\n<p>JavaScript 示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* nth element in the fibonacci series.</div><div class=\"line\">* @param n &gt;= 0</div><div class=\"line\">* @return the nth element, &gt;= 0.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp;</div><div class=\"line\">  <span class=\"keyword\">while</span> (--n &gt;= <span class=\"number\">0</span>) {</div><div class=\"line\">    tmp = a;</div><div class=\"line\">    a += b;</div><div class=\"line\">    b = tmp;</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">return</span> a;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.write(fib(<span class=\"number\">10</span>));</div></pre></td></tr></table></figure>\n\n<h1 id=\"表格支持\"><strong>表格支持</strong></h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| 项目        | 价格   |  数量  |</div><div class=\"line\">| --------   | -----<span class=\"symbol\">:</span>  | <span class=\"symbol\">:----</span><span class=\"symbol\">:</span>  |</div><div class=\"line\">| 计算机     | <span class=\"variable\">$1600</span> |   <span class=\"number\">5</span>     |</div><div class=\"line\">| 手机        |   <span class=\"variable\">$12</span>   |   <span class=\"number\">12</span>   |</div><div class=\"line\">| 管线        |    <span class=\"variable\">$1</span>    |  <span class=\"number\">234</span>  |</div></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n","source":"_posts/Markdown笔记.markdown","raw":"---\nlayout: post\ntitle: \"Markdown笔记\"\ndate: 2014-10-26 9:18\ncomments: true\ntags: \n\t- markdown\n    \n---\n# **斜体和粗体** \n使用 \\* 和 \\** 表示斜体和粗体。\n```\n这是 *斜体*，这是 **粗体**。\n```\n这是 *斜体*，这是 **粗体**。\n\n# **分级标题**\n\n使用 === 表示一级标题，使用 --- 表示二级标题。\n\n```\n这是一个一级标题\n============================\n\n这是一个二级标题\n--------------------------------------------------\n\n### 这是一个三级标题\n```\n\n你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n<!-- more -->\n# **外链接**\n\n使用 \\[描述](链接地址) 为文字增加外链接。\n```\n这是去往 [本人博客](www.tanghaoblog.me) 的链接。\n```  \n这是去往 [本人博客](http://thddaniel.github.com) 的链接。\n\n# **无序列表**\n\n使用 *，+，- 表示无序列表。\n\n```\n* 无序列表项 一\n+ 无序列表项 二\n- 无序列表项 三\n\n```\n* 无序列表项 一\n+ 无序列表项 二\n- 无序列表项 三\n\n\n\n# **有序列表**\n\n使用数字和点表示有序列表。\n```\n1. 有序列表项 一\n2. 有序列表项 二 \n3. 有序列表项 三\n```\n\n# **文字引用**\n\n使用 > 表示文字引用。\n\n```\n> 一盏灯， 一片昏黄\n```\n> 一盏灯， 一片昏黄\n\n注：  > 和文本之间要保留一个字符的空格。\n\n# **行内代码块**\n\n使用 \\`代码` 表示行内代码块。\n\n示例：\n\n让我们聊聊 `html`。\n\n# **代码块**\n\n使用 四个缩进空格 表示代码块。\n\n    这是一个代码块，此行左侧有四个不可见的空格。\n    hello world.\n    \n# **插入图像**\n\n使用 \\!\\[描述](图片链接地址) 插入图像。\n\n```\n![我的头像](https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg)\n```\n![我的头像](https://raw.githubusercontent.com/thddaniel/Myblog/master/themes/yilia/source/img/anonymous.jpg)\n\n\n\n# **删除线**\n\n使用 ~~ 表示删除线。\n```\n~~这是一段错误的文本。~~\n```\n~~这是一段错误的文本。~~\n\n\n# **加强的代码块**\n\n支持编程语言的语法高亮的显示，行号显示。\n\n非代码示例：\n\n```\n$ sudo apt-get install vim-gnome\n```\n\nPython 示例：\n\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\n\nclass SomeClass:\n    pass\n\n>>> message = '''interpreter\n... prompt'''\n```\n\nJavaScript 示例：\n\n``` javascript\n/**\n* nth element in the fibonacci series.\n* @param n >= 0\n* @return the nth element, >= 0.\n*/\nfunction fib(n) {\n  var a = 1, b = 1;\n  var tmp;\n  while (--n >= 0) {\n    tmp = a;\n    a += b;\n    b = tmp;\n  }\n  return a;\n}\n\ndocument.write(fib(10));\n```\n\n\n\n# **表格支持**\n\n```\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n```\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n","slug":"Markdown笔记","updated":1426577364000,"excerpt":"<h1 id=\"斜体和粗体\"><strong>斜体和粗体</strong></h1>\n<p>使用 * 和 ** 表示斜体和粗体。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这是 <span class=\"keyword\">*</span>斜体<span class=\"keyword\">*</span>，这是 <span class=\"keyword\">*</span><span class=\"keyword\">*</span>粗体<span class=\"keyword\">*</span><span class=\"keyword\">*</span>。</div></pre></td></tr></table></figure>\n\n<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>\n<h1 id=\"分级标题\"><strong>分级标题</strong></h1>\n<p>使用 === 表示一级标题，使用 —- 表示二级标题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"header\">这是一个一级标题</span></div><div class=\"line\">============================</div><div class=\"line\"></div><div class=\"line\"><span class=\"header\">这是一个二级标题</span></div><div class=\"line\">--------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">### 这是一个三级标题</div></pre></td></tr></table></figure>\n\n<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。<br>","_id":"8k12retplmg4y6l6","categories":[],"photos":[],"link":""},{"layout":"post","title":"sublime text 3","date":1424776680000,"comments":true,"tags":["k963yjbkz05p2175"],"content":"<ul>\n<li>改字体：Sublime Text -&gt; Preferences -&gt; Settings-User</li>\n<li>从终端打开：sudo ln /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /bin/subl 以后可直接输入subl</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th style=\"text-align:right\">键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘</td>\n<td style=\"text-align:right\">Command key</td>\n</tr>\n<tr>\n<td>⌃</td>\n<td style=\"text-align:right\">Control key</td>\n</tr>\n<tr>\n<td>⌥</td>\n<td style=\"text-align:right\">Option key</td>\n</tr>\n<tr>\n<td>⇧</td>\n<td style=\"text-align:right\">Shift Key</td>\n</tr>\n</tbody>\n</table>\n<p><a id=\"more\"></a></p>\n<h1 id=\"Edit(编辑)\">Edit(编辑)</h1>\n<ul>\n<li>⌘[ 向左缩进 | Left indent</li>\n<li>⌘] 向右缩进 | Right Indent</li>\n<li>⌘⌃↑ 与上一行互换（超实用！）| Swap line up</li>\n<li>⌘⌃↓ 与下一￼行互换￼（超实用！）| Swap line down</li>\n<li>⌘⇧D 复制粘贴当前行（减少多余的粘贴）| Duplicate line</li>\n<li>⌘J 拼接行（css格式化时挺有用） | join lines</li>\n<li>⌘← 去往行的开头 | Beginning of line</li>\n<li>⌘→ 去往行末尾 | End of line</li>\n<li>⌘⌃/ 块注释 | Toggle comment block</li>\n<li>⌃K 从光标开始的地方删除到行尾 | Delete to end</li>\n<li>⌃⇧K 删除一整行 | delete line</li>\n<li>⌃T 相邻单词互换位置，在’,’前试用，有惊喜（很有趣）| Transpose</li>\n<li>⌘⇧↩ 向光标前插入一行|insert line before</li>\n<li>⌘↩ 向光标后插入一行|inter line after</li>\n<li>⌘⌥T 插入特殊字符|Special characters</li>\n<li>⌃D 向后删除（很怪异的操作，不过感觉很酷炫）</li>\n</ul>\n<h1 id=\"Selection(光标选中)\">Selection(光标选中)</h1>\n<ul>\n<li>⌘D 选中相同的词 | Expand selection to words</li>\n<li>⌃⌘G 多重文本光标选中（再也不用⌘ D一个一个的找啦）| Expand all selection to words</li>\n<li>⌘L 选中一行|Expand selection to line</li>\n<li>Esc 单选（取消多重选择）|Single selection,Cancel multiple selections</li>\n<li>⌃⇧↑ 一行一行向上选中|Add previous line</li>\n<li>⌃⇧↓ 一行一行向下选中|Add next line</li>\n<li>⌘⇧L 将选中的区域分割成多行选中状态(多光标操作状态)|Split into lines</li>\n<li>⌥+拖动鼠标 多重光标选中</li>\n<li>⌘⇧J 已缩进层级为依据，一层层向外选中|Expand selection to indentation</li>\n<li>⌃⇧M 将匹配括号中的内容选中|Expand selection to brackets</li>\n</ul>\n<h1 id=\"Find(查找)\">Find(查找)</h1>\n<ul>\n<li>⌘F 普通查找|Find</li>\n<li>⌘G 查找下一个|Find next</li>\n<li>⌘⇧F 在文件夹中查找| Find in files</li>\n<li>⌘⇧E 缓存用于替换的内容，方便之后的替换|Use selection for replace</li>\n<li>⌘E 缓存用于查找的内容，方便之后的查找|Use selection for find</li>\n<li>⌘⌥E 一个接一个往下替换|Replace next</li>\n</ul>\n<h1 id=\"View(视图)\">View(视图)</h1>\n<ul>\n<li>推荐使用Origami插件，可以随意对sublime进行分割</li>\n</ul>\n<h1 id=\"Go_to(跳转/定位)\">Go to(跳转/定位)</h1>\n<ul>\n<li>⌘P 跳转文件（很方便）| Go to anything</li>\n<li>⌘R 定位文件中的方法@| Go to symbol</li>\n<li>⌘G 定位文件中的行号:| Go to line</li>\n<li>⌃M 定位匹配的括号 | Jump to matching bracket</li>\n<li>⌘F2 设置/取消定位标记| Toggle bookmark</li>\n<li>F2 跳转到定位标记处 | Next bookmark</li>\n<li>⌘⇧F2 清除所有定位标记| Clear all bookmarks</li>\n<li>⌘⌥→ 下一个打开的文件| Next file</li>\n</ul>\n<h1 id=\"Project(工程)\">Project(工程)</h1>\n<ul>\n<li>⌘⌃P 在保存过的工程中切换，随意变换工程环境|Switch project window</li>\n</ul>\n<p>Resource:<a href=\"http://www.sublimetext.com/docs/3/\" target=\"_blank\" rel=\"external\">Sublime Text 3 Documentation</a></p>\n","source":"_posts/sublime text.md","raw":"---\nlayout: post\ntitle: \"sublime text 3\"\ndate: 2015-02-24 19:18\ncomments: true\ntags: \n\t- sublime text\n\t\n---\n- 改字体：Sublime Text -> Preferences -> Settings-User\n- 从终端打开：sudo ln /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /bin/subl 以后可直接输入subl\n\n---\n|符号 | 键 |\n| - | -----:  | \n|⌘ | Command key|\n|⌃ |Control key|\n|⌥ |Option key|\n|⇧ |Shift Key|\n<!--more-->\n#Edit(编辑)\n- ⌘[ 向左缩进 | Left indent\n- ⌘] 向右缩进 | Right Indent\n- ⌘⌃↑ 与上一行互换（超实用！）| Swap line up\n- ⌘⌃↓ 与下一￼行互换￼（超实用！）| Swap line down\n- ⌘⇧D 复制粘贴当前行（减少多余的粘贴）| Duplicate line\n- ⌘J 拼接行（css格式化时挺有用） | join lines\n- ⌘← 去往行的开头 | Beginning of line\n- ⌘→ 去往行末尾 | End of line\n- ⌘⌃/ 块注释 | Toggle comment block\n- ⌃K 从光标开始的地方删除到行尾 | Delete to end\n- ⌃⇧K 删除一整行 | delete line\n- ⌃T 相邻单词互换位置，在','前试用，有惊喜（很有趣）| Transpose\n- ⌘⇧↩ 向光标前插入一行|insert line before\n- ⌘↩ 向光标后插入一行|inter line after\n- ⌘⌥T 插入特殊字符|Special characters\n- ⌃D 向后删除（很怪异的操作，不过感觉很酷炫）\n\n#Selection(光标选中)\n- ⌘D 选中相同的词 | Expand selection to words\n- ⌃⌘G 多重文本光标选中（再也不用⌘ D一个一个的找啦）| Expand all selection to words\n- ⌘L 选中一行|Expand selection to line\n- Esc 单选（取消多重选择）|Single selection,Cancel multiple selections\n- ⌃⇧↑ 一行一行向上选中|Add previous line\n- ⌃⇧↓ 一行一行向下选中|Add next line\n- ⌘⇧L 将选中的区域分割成多行选中状态(多光标操作状态)|Split into lines\n- ⌥+拖动鼠标 多重光标选中\n- ⌘⇧J 已缩进层级为依据，一层层向外选中|Expand selection to indentation\n- ⌃⇧M 将匹配括号中的内容选中|Expand selection to brackets\n\n\n\n#Find(查找)\n- ⌘F 普通查找|Find\n- ⌘G 查找下一个|Find next\n- ⌘⇧F 在文件夹中查找| Find in files\n- ⌘⇧E 缓存用于替换的内容，方便之后的替换|Use selection for replace\n- ⌘E 缓存用于查找的内容，方便之后的查找|Use selection for find\n- ⌘⌥E 一个接一个往下替换|Replace next\n\n\n\n#View(视图)\n- 推荐使用Origami插件，可以随意对sublime进行分割\n\n#Go to(跳转/定位)\n- ⌘P 跳转文件（很方便）| Go to anything\n- ⌘R 定位文件中的方法@| Go to symbol\n- ⌘G 定位文件中的行号:| Go to line\n- ⌃M 定位匹配的括号 | Jump to matching bracket\n- ⌘F2 设置/取消定位标记| Toggle bookmark\n- F2 跳转到定位标记处 | Next bookmark\n- ⌘⇧F2 清除所有定位标记| Clear all bookmarks\n- ⌘⌥→ 下一个打开的文件| Next file\n\n#Project(工程)\n- ⌘⌃P 在保存过的工程中切换，随意变换工程环境|Switch project window\n\nResource:[Sublime Text 3 Documentation](http://www.sublimetext.com/docs/3/)","slug":"sublime text","updated":1426577152000,"excerpt":"<ul>\n<li>改字体：Sublime Text -&gt; Preferences -&gt; Settings-User</li>\n<li>从终端打开：sudo ln /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /bin/subl 以后可直接输入subl</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th style=\"text-align:right\">键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘</td>\n<td style=\"text-align:right\">Command key</td>\n</tr>\n<tr>\n<td>⌃</td>\n<td style=\"text-align:right\">Control key</td>\n</tr>\n<tr>\n<td>⌥</td>\n<td style=\"text-align:right\">Option key</td>\n</tr>\n<tr>\n<td>⇧</td>\n<td style=\"text-align:right\">Shift Key</td>\n</tr>\n</tbody>\n</table>\n<p>","_id":"pd7umz551vkj35rv","categories":[],"photos":[],"link":""},{"title":"使用hexo搭建博客","date":1414322280000,"comments":true,"tags":["8b3ok7wu7bjdeb2h"],"content":"<h1 id=\"Hexo安装\"><strong>Hexo安装</strong></h1>\n<p>Hexo的作者是<a href=\"https://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。<br>参考<a href=\"http://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"安装Node-js\"><strong>安装Node.js</strong></h2>\n<p>在 Windows 环境下安装 Node.js非常简单，仅须<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">下载</a>安装文件并执行即可完成安装。</p>\n<h2 id=\"安装Hexo\"><strong>安装Hexo</strong></h2>\n<p>打开git。利用 <code>npm</code> 命令即可安装。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hexo</span></div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a></p>\n<h2 id=\"创建hexo文件夹\"><strong>创建hexo文件夹</strong></h2>\n<p>安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">init</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖包\"><strong>安装依赖包</strong></h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span></span></div></pre></td></tr></table></figure>\n\n<p>本地查看</p>\n<p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000看看。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate <span class=\"preprocessor\">#生成静态页面至public目录</span></div><div class=\"line\">hexo <span class=\"keyword\">server</span> <span class=\"preprocessor\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div></pre></td></tr></table></figure>\n\n<p>出现了默认的网页界面。至此，本地博客已经搭建起来了。<br><br></p>\n<h1 id=\"Hexo的使用\"><strong>Hexo的使用</strong></h1>\n<p>首先大致了解下默认生成了一些文件。</p>\n<ul>\n<li><code>scaffolds</code>   layout模板文件目录，其中的md文件可以添加编辑</li>\n<li><code>scripts</code> 写文件的js，扩展hexo的功能</li>\n<li><code>source/_posts</code> 存放博客正文内容</li>\n<li><code>node_modules</code> 插件的目录</li>\n<li><code>themes</code> 存放皮肤的目录</li>\n<li><code>themes/landscape</code> 默认的主题</li>\n<li><code>_config.yml</code> 全局的配置文件，大多数的设置都在这里</li>\n<li><code>db.json</code> 静态常量</li>\n</ul>\n<p>_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。</p>\n<p>themes目录：是存放主题的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。</p>\n<h2 id=\"安装插件和主题\"><strong>安装插件和主题</strong></h2>\n<p>Hexo提供丰富<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">主题</a>的以及<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">插件</a>。安装方法都是一样的。</p>\n<ul>\n<li>主题</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">$ git clone &lt;repository&gt;</span> themes/&lt;theme-name&gt;</span></div></pre></td></tr></table></figure>\n\n<p>无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。<br>主题目录里也有个_config.yml文件，不同主题配置方法不同。<br>我的博客左边一栏里的社交链接。图标来源设置在main.style里。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── layout <span class=\"preprocessor\">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></div><div class=\"line\"><span class=\"string\">|   ├── _partial   #局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></div><div class=\"line\"><span class=\"string\">|   </span></div><div class=\"line\">├── source <span class=\"preprocessor\">#源码</span></div><div class=\"line\"><span class=\"string\">|   ├── css#css源码 </span></div><div class=\"line\"><span class=\"string\">|   |   ├── _base  #*.styl基础css</span></div><div class=\"line\"><span class=\"string\">|   |   ├── _partial   #*.styl局部css</span></div><div class=\"line\"><span class=\"string\">|   |   ├── fonts  #字体</span></div><div class=\"line\"><span class=\"string\">|   |   ├── style.styl #*.styl引入需要的css源码</span></div><div class=\"line\"><span class=\"string\">|   ├── images #图片fancybox   </span></div><div class=\"line\"><span class=\"string\">|   |—— fancybox效果源码</span></div><div class=\"line\"><span class=\"string\">|   └── js #javascript源代码</span></div><div class=\"line\">├── _config.yml<span class=\"preprocessor\">#主题配置文件</span></div><div class=\"line\">└── README.md  <span class=\"preprocessor\">#用GitHub的都知道</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>插件</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">npm install &lt;plugin-name&gt;</span> --save</span></div></pre></td></tr></table></figure>\n\n\n\n<p>启用插件：在根目录\\ _config.yml文件添加：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">plugins:</span></span></div><div class=\"line\">- &lt;plugin-name&gt;  <span class=\"comment\">#插件名</span></div></pre></td></tr></table></figure>\n\n<p>升级插件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">update</span></div></pre></td></tr></table></figure>\n\n<p>卸载插件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">uninstall</span> &lt;<span class=\"keyword\">plugin</span>-name&gt;</span></div></pre></td></tr></table></figure>\n\n<p><strong>示例</strong>：</p>\n<ul>\n<li>添加RSS</li>\n</ul>\n<p>hexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：<br>安装RSS插件到本地：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hexo-generator-feed</span></div></pre></td></tr></table></figure>\n\n<p>开启RSS功能：编辑hexo/_config.yml，添加如下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span></div><div class=\"line\">- hexo-generator-feed</div></pre></td></tr></table></figure>\n\n<p>在站点添加链接：<br>在themes/light/_config.yml中，编辑 rss: /atom.xml</p>\n<ul>\n<li>添加sitemap</li>\n</ul>\n<p>同样的，我们使用hexo提供的插件，方法与添加RSS类似。<br>安装sitemap到本地：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> hexo-generator-sitemap</span></div></pre></td></tr></table></figure>\n\n<p>开启sitemap功能：编辑<code>hexo/_config.yml</code>，添加如下代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span></div><div class=\"line\">- hexo-generator-sitemap</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"部署到github上\"><strong>部署到github上</strong></h1>\n<p>部署到Github前需要配置<code>_config.yml</code>文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: github</div><div class=\"line\">  repository: git@github.com:thddaniel/thddaniel.github.<span class=\"built_in\">io</span>.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>执行下列指令即可完成部署。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> clean</div><div class=\"line\">hexo generate <span class=\"comment\">#生成静态页面至public目录</span></div><div class=\"line\">hexo deploy  <span class=\"comment\">#将.deploy目录部署到GitHub</span></div></pre></td></tr></table></figure>\n\n<p>每次修改本地文件后，需要<code>hexo generate</code>才能保存。<br>有的时候当你修改页面或更改配置后发现并没有立即生效，可以执行<code>hexo clean</code></p>\n<p>Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？</p>\n<p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。<br>注：之前修改过branch: gh-pages，但是一直显示404.不填默认为master<br><br></p>\n<h1 id=\"写文章\"><strong>写文章</strong></h1>\n<ul>\n<li><strong>开头加信息</strong></li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">---</span></div><div class=\"line\">layout: post</div><div class=\"line\">title: \"使用hexo搭建博客\"</div><div class=\"line\">date: 2014-10-26 19:18</div><div class=\"line\">comments: true</div><div class=\"line\">tags: </div><div class=\"line\"><span class=\"code\">\t- hexo</span></div><div class=\"line\"><span class=\"header\">description：</span></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>关于摘要</strong></li>\n</ul>\n<p>在文档中插入<code>&lt;!--more--&gt;</code>就可以将文章分隔，more以上的部分会已摘要的形式显示，当查看全文时more以下的部分才会显示出来。也可以在Markdown文件中定义description。</p>\n<ul>\n<li><strong>嵌入图片、音乐、视频</strong></li>\n</ul>\n<p>实际上，在hexo中，markdown支持html标签，md文件解析为html时原有的html部分会保留。有基于此，我们只要在文中插入符合html规范的代码即可。</p>\n<p><strong>图片：</strong><br>同样放到source目中下。建议大家建立一个image文件夹，把文章中使用到的图片丢到这里来（当然可以按照你的习惯进行分类），之后在Markdown文件中按照这样的语法进行插入图片的操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"link_label\">图片名称</span>](<span class=\"link_url\">image/图片名称.jpg</span>)</div></pre></td></tr></table></figure>\n\n<p><strong>音乐：</strong><br>以『虾米音乐』为例，歌曲页面有个『转帖』选项，将html代码或javascript代码复制到文中即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;embed <span class=\"variable\">src=</span><span class=\"string\">\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\"</span> <span class=\"variable\">type=</span><span class=\"string\">\"application/x-shockwave-flash\"</span> <span class=\"variable\">width=</span><span class=\"string\">\"235\"</span> <span class=\"variable\">height=</span><span class=\"string\">\"346\"</span> <span class=\"variable\">wmode=</span><span class=\"string\">\"transparent\"</span>&gt;&lt;/embed&gt;</div></pre></td></tr></table></figure>\n\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\">\n\n<p><strong>视频：</strong><br>嵌入视频的方法和音乐类似，视频网站每个视频页面都会有一个『分享』或『转帖』按钮，点击可以查看代码。</p>\n","source":"_posts/使用hexo搭建博客.markdown","raw":"---\ntitle: \"使用hexo搭建博客\"\ndate: 2014-10-26 19:18\ncomments: true\ntags: \n\t- hexo\n\n---\n#**Hexo安装**\nHexo的作者是[tommy351](https://twitter.com/tommy351)，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。\n参考[官方文档](http://hexo.io/docs/index.html)\n\n##**安装Node.js**\n在 Windows 环境下安装 Node.js非常简单，仅须[下载](http://nodejs.org/)安装文件并执行即可完成安装。\n\n##**安装Hexo**\n打开git。利用 `npm` 命令即可安装。\n```\nnpm install -g hexo\n```\n<!--more-->\n##**创建hexo文件夹**\n安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。\n```\nhexo init\n```\n##**安装依赖包**\n```\nnpm install\n```\n本地查看\n\n现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000看看。\n```\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n```\n出现了默认的网页界面。至此，本地博客已经搭建起来了。\n<br>\n#**Hexo的使用**\n首先大致了解下默认生成了一些文件。\n\n- `scaffolds`   layout模板文件目录，其中的md文件可以添加编辑\n- `scripts` 写文件的js，扩展hexo的功能\n- `source/_posts` 存放博客正文内容\n- `node_modules` 插件的目录\n- `themes` 存放皮肤的目录\n- `themes/landscape` 默认的主题\n- `_config.yml` 全局的配置文件，大多数的设置都在这里\n- `db.json` 静态常量\n\n_posts目录：Hexo是一个静态博客框架，因此没有数据库。文章内容都是以文本文件方式进行存储的，直接存储在_posts的目录。Hexo天生集成了markdown，我们可以直接使用markdown语法格式写博客，例如:hello-world.md。新增加一篇文章，就在_posts目录，新建一个xxx.md的文件。\n\nthemes目录：是存放主题的，包括一套Javascript+CSS样式和基于EJS的模板设置。通过在themes目录下，新建一个子目录，就可以创建一套新的皮肤，当然我们也可以直接在landscape上面修改。\n\n##**安装插件和主题**\n\nHexo提供丰富[主题](https://github.com/hexojs/hexo/wiki/Themes)的以及[插件](https://github.com/hexojs/hexo/wiki/Plugins)。安装方法都是一样的。\n\n- 主题\n\n```\n$ git clone <repository> themes/<theme-name>\n```\n无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。\n主题目录里也有个_config.yml文件，不同主题配置方法不同。\n我的博客左边一栏里的社交链接。图标来源设置在main.style里。\n```\n├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial   #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   \n├── source #源码\n|   ├── css#css源码 \n|   |   ├── _base  #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts  #字体\n|   |   ├── style.styl #*.styl引入需要的css源码\n|   ├── images #图片fancybox   \n|   |—— fancybox效果源码\n|   └── js #javascript源代码\n├── _config.yml#主题配置文件\n└── README.md  #用GitHub的都知道\n```\n\n- 插件\n``` \nnpm install <plugin-name> --save\n``` \n\n启用插件：在根目录\\ _config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\n**示例**：\n\n- 添加RSS\n\nhexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：\n安装RSS插件到本地：\n```\nnpm install hexo-generator-feed\n```\n开启RSS功能：编辑hexo/_config.yml，添加如下代码：\n```\nplugins:\n- hexo-generator-feed\n```\n在站点添加链接：\n在themes/light/_config.yml中，编辑 rss: /atom.xml\n\n- 添加sitemap\n\n同样的，我们使用hexo提供的插件，方法与添加RSS类似。\n安装sitemap到本地：\n```\nnpm install hexo-generator-sitemap\n```\n开启sitemap功能：编辑`hexo/_config.yml`，添加如下代码：\n```\nplugins:\n- hexo-generator-sitemap\n```\n<br>\n#**部署到github上**\n\n部署到Github前需要配置`_config.yml`文件。\n```\ndeploy:\n  type: github\n  repository: git@github.com:thddaniel/thddaniel.github.io.git\n  branch: master\n```\n执行下列指令即可完成部署。\n```\nhexo clean\nhexo generate #生成静态页面至public目录\nhexo deploy  #将.deploy目录部署到GitHub\n```\n每次修改本地文件后，需要`hexo generate`才能保存。\n有的时候当你修改页面或更改配置后发现并没有立即生效，可以执行`hexo clean`\n\nGithub的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了README.md，它也会在你下一次部署时被删去。怎么解决呢？\n\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n注：之前修改过branch: gh-pages，但是一直显示404.不填默认为master \n<br>\n#**写文章**\n\n- **开头加信息**\n\n示例：\n```\n---\nlayout: post\ntitle: \"使用hexo搭建博客\"\ndate: 2014-10-26 19:18\ncomments: true\ntags: \n\t- hexo\ndescription：\n---\n```\n\n\n- **关于摘要**\n\n在文档中插入`<!--more-->`就可以将文章分隔，more以上的部分会已摘要的形式显示，当查看全文时more以下的部分才会显示出来。也可以在Markdown文件中定义description。\n\n- **嵌入图片、音乐、视频**\n\n实际上，在hexo中，markdown支持html标签，md文件解析为html时原有的html部分会保留。有基于此，我们只要在文中插入符合html规范的代码即可。\n\n**图片：**\n同样放到source目中下。建议大家建立一个image文件夹，把文章中使用到的图片丢到这里来（当然可以按照你的习惯进行分类），之后在Markdown文件中按照这样的语法进行插入图片的操作。\n```\n![图片名称]({{BASE_PATH}}image/图片名称.jpg) \n```\n\n**音乐：**\n以『虾米音乐』为例，歌曲页面有个『转帖』选项，将html代码或javascript代码复制到文中即可。\n```\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\"></embed>\n```\n<embed src=\"http://www.xiami.com/widget/0_168498_235_346_FF8719_494949/albumPlayer.swf\" type=\"application/x-shockwave-flash\" width=\"235\" height=\"346\" wmode=\"transparent\"></embed>\n\n**视频：**\n嵌入视频的方法和音乐类似，视频网站每个视频页面都会有一个『分享』或『转帖』按钮，点击可以查看代码。","slug":"使用hexo搭建博客","updated":1426637889000,"excerpt":"<h1 id=\"Hexo安装\"><strong>Hexo安装</strong></h1>\n<p>Hexo的作者是<a href=\"https://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。Hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。<br>参考<a href=\"http://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"安装Node-js\"><strong>安装Node.js</strong></h2>\n<p>在 Windows 环境下安装 Node.js非常简单，仅须<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">下载</a>安装文件并执行即可完成安装。</p>\n<h2 id=\"安装Hexo\"><strong>安装Hexo</strong></h2>\n<p>打开git。利用 <code>npm</code> 命令即可安装。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hexo</span></div></pre></td></tr></table></figure>\n\n<p>","_id":"2274nti3xv8ujt4o","categories":[],"layout":"post","photos":[],"link":""},{"layout":"post","title":"字符编码","date":1427008680000,"comments":true,"tags":[],"content":"<h1 id=\"字符编码\">字符编码</h1>\n<p>在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个<strong>字节（byte）</strong>。而<strong>字符</strong>是语言意义上的符号，范围就不一定了。</p>\n<h2 id=\"ASCII码\">ASCII码</h2>\n<p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码(包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。<br><a id=\"more\"></a></p>\n<h2 id=\"各个国家的编码\">各个国家的编码</h2>\n<p>因为其他国家有自己的语言，ascii不够用。例如在中国，hzk16字库是符合GB2312(国标码)的16X16点阵字库。GB2312汉字是由两个字节编码的（范围：A1A1~FEFE)。一个汉字占两个字节，前一个字节为该汉字的<code>区号</code>，后一个字节为该字的<code>位号</code>。每个区记录94个汉字，位号为该字在该区的位置。</p>\n<blockquote>\n<p>区码：区号-0xa0<br>位码：位号-0xa0<br>位置: （94 *（区码-1）+（位码-1））* 32</p>\n</blockquote>\n<h2 id=\"Unicode编码表\">Unicode编码表</h2>\n<p>Unicode 是为整合全世界的所有语言文字而诞生的。任何文字在Unicode中都对应一个值，这个值称为代码，UCS-2和UCS-4只规定了代码点和文字之间的对应关系，而规定的储存方式称为<code>UTF</code>。</p>\n<p><strong>UTF-8是Unicode的实现方式之一。</strong><code>UTF-8</code>就是在互联网上使用最广的一种Unicode的实现方式。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。其他实现方式还包括<code>UTF-16</code>（字符用两个字节或四个字节表示）和<code>UTF-32</code>（字符用四个字节表示），不过在互联网上基本不用。</p>\n<h3 id=\"UTF-8的编码规则\">UTF-8的编码规则</h3>\n<ol>\n<li>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</li>\n<li>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode的值。</li>\n</ol>\n<p>例如：“中”字的UTF-8的值为：E4 B8 AD (1110<code>0100</code>,10<code>111000</code>,10<code>101101</code>),Unicode的值为：100111000101101(4E2D)。</p>\n<h3 id=\"大端小端\">大端小端</h3>\n<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>\n<p>实例：</p>\n<ol>\n<li>ANSI：文件的编码就是两个字节”D1 CF”，这正是”严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。</li>\n<li>Unicode：编码是四个字节”FF FE 25 4E”，其中”FF FE”表明是小头方式存储，真正的编码是4E25。</li>\n<li>Unicode big endian：编码是四个字节”FE FF 4E 25”，其中”FE FF”表明是大头方式存储。</li>\n<li>UTF-8：编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</li>\n</ol>\n<hr>\n<h1 id=\"编码方式\">编码方式</h1>\n<h2 id=\"源文件用不同的编码方式编写，会导致执行结果不一样。\">源文件用不同的编码方式编写，会导致执行结果不一样。</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stdio.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *str=<span class=\"string\">\"abc中\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (str[i])</div><div class=\"line\">\t{</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%02x \"</span>, str[i]);</div><div class=\"line\">\t\ti++;</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>存为ansi的编码方式时：对于英文文件是ASCII编码，对于简体中文文件是GB2312编码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">61 62 63 d6 d0</div></pre></td></tr></table></figure>\n\n<p>存为UTF-8的编码方式输出结果为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">61 62 63 e4 b8 ad</div></pre></td></tr></table></figure>\n\n<h2 id=\"如何解决\">如何解决</h2>\n<p>编译程序时，要指定字符集。</p>\n<p>查看gcc手册，搜索到charset。</p>\n<p>-finput-charset=charset  表示源文件的编码方式, 默认以UTF-8来解析</p>\n<p>-fexec-charset=charset   表示可执行程序里的字时候以什么编码方式来表示，默认是UTF-8</p>\n<p>示例：</p>\n<pre><code>gcc <span class=\"variable\">-finput-charset=</span>GBK <span class=\"variable\">-fexec-charset=</span>UTF-<span class=\"number\">8</span> -o utf-<span class=\"number\">8</span>_2 ansi.c\n</code></pre><hr>\n<h1 id=\"英文字母、汉字的点阵显示\">英文字母、汉字的点阵显示</h1>\n<p>linux内核中有关于font的文件。比如linux-2.6.30.4/drivers/video/console/font_8x16.c文件，里面有个fontdata_8x16[FONTDATAMAX]数组，每个字符占16字节(8x16像素)。 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/<span class=\"keyword\">*</span> 65 0x41 'A' <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x10, /<span class=\"keyword\">*</span> 00010000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x38, /<span class=\"keyword\">*</span> 00111000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x6c, /<span class=\"keyword\">*</span> 01101100 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xfe, /<span class=\"keyword\">*</span> 11111110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0xc6, /<span class=\"keyword\">*</span> 11000110 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div><div class=\"line\">0x00, /<span class=\"keyword\">*</span> 00000000 <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<h2 id=\"帧缓冲(framebuffer)\">帧缓冲(framebuffer)</h2>\n<p>Framebuffer是一块显示缓存，往显示缓存中写入特定的格式数据就意味着向屏幕输出内容。帧缓冲设备对应的设备文件为<code>/dev/fb*</code>,如果系统有多个显示卡，Linux下还可以支持多个帧缓冲设备，最多可达32个（/dev/fb0~/dev/fb31)。帧缓冲设备为标准的字符设备，主设备号为29，此设备号为0~31.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> fd_fb;</div><div class=\"line\"><span class=\"keyword\">struct</span> fb_var_screeninfo var;\t<span class=\"comment\">/* Current var */</span></div><div class=\"line\"><span class=\"keyword\">struct</span> fb_fix_screeninfo fix;\t<span class=\"comment\">/* Current fix */</span></div><div class=\"line\"><span class=\"keyword\">int</span> screen_size; <span class=\"comment\">/*屏幕大小*/</span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *fbmem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打开framebuffer设备文件*/</span></div><div class=\"line\">fd_fb = open(<span class=\"string\">\"/dev/fb0\"</span>, O_RDWR);</div><div class=\"line\"><span class=\"keyword\">if</span> (fd_fb &lt; <span class=\"number\">0</span>)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't open /dev/fb0\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">/*获得可变信息*/</span></div><div class=\"line\"><span class=\"keyword\">if</span> (ioctl(fd_fb, FBIOGET_VSCREENINFO, &var))</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't get var\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">/*获得可变信息*/</span></div><div class=\"line\"><span class=\"keyword\">if</span> (ioctl(fd_fb, FBIOGET_FSCREENINFO, &fix))</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't get fix\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">screen_size = var.xres * var.yres * var.bits_per_pixel / <span class=\"number\">8</span>;<span class=\"comment\">/*单位字节*/</span></div><div class=\"line\">fbmem = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)mmap(NULL , screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd_fb, <span class=\"number\">0</span>);<span class=\"comment\">/*内存映射*/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 清屏: 全部设为黑色 */</span></div><div class=\"line\"><span class=\"built_in\">memset</span>(fbmem, <span class=\"number\">0</span>, screen_size);</div></pre></td></tr></table></figure>\n\n<h2 id=\"如何在屏幕上画出一个点\">如何在屏幕上画出一个点</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> line_width;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> pixel_width;</div><div class=\"line\">\t</div><div class=\"line\">\tline_width  = var.xres * var.bits_per_pixel / <span class=\"number\">8</span>; <span class=\"comment\">//一行里面有多少字节</span></div><div class=\"line\">\tpixel_width = var.bits_per_pixel / <span class=\"number\">8</span>; <span class=\"comment\">//每个像素有多少字节</span></div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">void</span> lcd_put_pixel(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> color)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *pen_8 = fbmem+y*line_width+x*pixel_width;<span class=\"comment\">//计算出位置</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> *pen_16;\t</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *pen_32;\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> red, green, blue;\t</div><div class=\"line\"></div><div class=\"line\">\tpen_16 = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> *)pen_8;</div><div class=\"line\">\tpen_32 = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)pen_8;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">switch</span> (var.bits_per_pixel)<span class=\"comment\">//判断每个像素有多少位，进行不同的处理</span></div><div class=\"line\">\t{</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\t*pen_8 = color;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">16</span>:</div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\t<span class=\"comment\">/* 565 */</span></div><div class=\"line\">\t\t\tred   = (color &gt;&gt; <span class=\"number\">16</span>) & <span class=\"number\">0xff</span>;</div><div class=\"line\">\t\t\tgreen = (color &gt;&gt; <span class=\"number\">8</span>) & <span class=\"number\">0xff</span>;</div><div class=\"line\">\t\t\tblue  = (color &gt;&gt; <span class=\"number\">0</span>) & <span class=\"number\">0xff</span>;</div><div class=\"line\">\t\t\tcolor = ((red &gt;&gt; <span class=\"number\">3</span>) &lt;&lt; <span class=\"number\">11</span>) | ((green &gt;&gt; <span class=\"number\">2</span>) &lt;&lt; <span class=\"number\">5</span>) | (blue &gt;&gt; <span class=\"number\">3</span>);</div><div class=\"line\">\t\t\t*pen_16 = color;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">32</span>:</div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\t*pen_32 = color;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't surport %dbpp\\n\"</span>, var.bits_per_pixel);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"LCD显示ascii码\">LCD显示ascii码</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> lcd_put_ascii(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> c)<span class=\"comment\">//x坐标，y坐标，显示字符</span></div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *dots = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&fontdata_8x16[c*<span class=\"number\">16</span>];<span class=\"comment\">//每个ascii码占16字节</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> i, b;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> byte;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i++) <span class=\"comment\">//16行</span></div><div class=\"line\">\t{</div><div class=\"line\">\t\tbyte = dots[i]; <span class=\"comment\">//取出一个字节</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (b = <span class=\"number\">7</span>; b &gt;= <span class=\"number\">0</span>; b--) <span class=\"comment\">//每一行8位</span></div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (byte & (<span class=\"number\">1</span>&lt;&lt;b))<span class=\"comment\">//判断每一位的值是否为1</span></div><div class=\"line\">\t\t\t{</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* show */</span></div><div class=\"line\">\t\t\t\tlcd_put_pixel(x+<span class=\"number\">7</span>-b, y+i, <span class=\"number\">0xffffff</span>); <span class=\"comment\">/* 白 */</span></div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t{</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* hide */</span></div><div class=\"line\">\t\t\t\tlcd_put_pixel(x+<span class=\"number\">7</span>-b, y+i, <span class=\"number\">0</span>); <span class=\"comment\">/* 黑 */</span></div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t}</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"LCD显示汉字\">LCD显示汉字</h2>\n<p>在网上下载hzk16字库。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> fd_hzk16;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> stat hzk_stat;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *hzkmem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打开字库文件*/</span></div><div class=\"line\">fd_hzk16 = open(<span class=\"string\">\"HZK16\"</span>, O_RDONLY);</div><div class=\"line\"><span class=\"keyword\">if</span> (fd_hzk16 &lt; <span class=\"number\">0</span>)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't open HZK16\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*获取文件属性*/</span></div><div class=\"line\"><span class=\"keyword\">if</span>(fstat(fd_hzk16, &hzk_stat))</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't get fstat\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*内存映射*/</span></div><div class=\"line\">hzkmem = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)mmap(NULL , hzk_stat.st_size, PROT_READ, MAP_SHARED, fd_hzk16, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (hzkmem == (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)-<span class=\"number\">1</span>)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"can't mmap for hzk16\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>根据字库的信息(区码位码上面有介绍)写出代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> lcd_put_chinese(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *str)</div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> area  = str[<span class=\"number\">0</span>] - <span class=\"number\">0xA1</span>;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> where = str[<span class=\"number\">1</span>] - <span class=\"number\">0xA1</span>;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *dots = hzkmem + (area * <span class=\"number\">94</span> + where)*<span class=\"number\">32</span>;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> byte;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">int</span> i, j, b;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++)</div><div class=\"line\">\t\t{</div><div class=\"line\">\t\t\tbyte = dots[i*<span class=\"number\">2</span> + j];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (b = <span class=\"number\">7</span>; b &gt;=<span class=\"number\">0</span>; b--)</div><div class=\"line\">\t\t\t{</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (byte & (<span class=\"number\">1</span>&lt;&lt;b))</div><div class=\"line\">\t\t\t\t{</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">/* show */</span></div><div class=\"line\">\t\t\t\t\tlcd_put_pixel(x+j*<span class=\"number\">8</span>+<span class=\"number\">7</span>-b, y+i, <span class=\"number\">0xffffff</span>); <span class=\"comment\">/* 白 */</span></div><div class=\"line\">\t\t\t\t}</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t{</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">/* hide */</span></div><div class=\"line\">\t\t\t\t\tlcd_put_pixel(x+j*<span class=\"number\">8</span>+<span class=\"number\">7</span>-b, y+i, <span class=\"number\">0</span>); <span class=\"comment\">/* 黑 */</span></div><div class=\"line\">\t\t\t\t}</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t}</div><div class=\"line\">\t</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Freetype\">Freetype</h1>\n<p>Freetype 是一个操作字体文件的函数库，可以操作点阵和矢量字体。由于点阵缺乏灵活性，无法改变字体的大小和风格，<strong>矢量字体不像点阵字体那样直接记录字符的字模数据</strong>，而是<strong>记录字体描述信息</strong>。</p>\n<ol>\n<li>若干个闭合曲线的关键点。</li>\n<li>使用数字曲线连接关键点。</li>\n<li>填充内部空间。</li>\n</ol>\n<p>字符对应的字体数据称为<code>glyph</code>,字体文件中通常带有一个字符映射表，用来把字符映射到对应的<code>glyph</code>的索引值。因为字符集的编码方式有很多种（GBK,Unicode,Big5等等)，所以有多个映射表（charmap）。所以一个文字的显示过程：</p>\n<ol>\n<li>给定一个文字，可以确定它的<code>编码值</code>。（比如‘A’的ascii码的编码值为：0x41）</li>\n<li>根据<code>编码值</code>从字体文件中找到<code>glyph</code>(关键点)。</li>\n<li>设置字体大小。</li>\n<li>利用某些函数把<code>glyph</code>里的点缩放为上面设定的字体大小。</li>\n<li>转换为位图点阵。</li>\n<li>在LCD上显示出来。</li>\n</ol>\n<h2 id=\"代码思路\">代码思路</h2>\n<p>google搜索freetype tutorial第一条就是教如何使用。</p>\n<ol>\n<li>创建freetype库，进行初始化：FT_Init_FreeType</li>\n<li>加载字体文件（Load a Font face）: FT_New_Face </li>\n<li>设置字体大小：FT_Set_Char_Size 和 FT_Set_Pixel_Sizes </li>\n<li>变换（移动和旋转）: FT_Set_Transform</li>\n<li>根据编码值，加载<code>glyph</code>（找到，取出，转为位图）</li>\n<li>打印</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t</div><div class=\"line\">\tFT_Library\t  library;</div><div class=\"line\">\tFT_Face \t  face;</div><div class=\"line\">\t<span class=\"keyword\">int</span> error;</div><div class=\"line\">\tFT_Vector     pen; <span class=\"comment\">//矢量</span></div><div class=\"line\">\tFT_GlyphSlot  slot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\terror = FT_Init_FreeType( &library );\t<span class=\"comment\">//1.初始化freetype库</span></div><div class=\"line\">\terror = FT_New_Face( library, argv[<span class=\"number\">1</span>], <span class=\"number\">0</span>, &face ); <span class=\"comment\">//2.加载字体文件</span></div><div class=\"line\">\tslot = face-&gt;glyph;<span class=\"comment\">//插槽</span></div><div class=\"line\">\tFT_Set_Pixel_Sizes(face, <span class=\"number\">24</span>, <span class=\"number\">0</span>); <span class=\"comment\">//3.设置字体大小</span></div><div class=\"line\">\t<span class=\"comment\">/* 确定座标:</span></div><div class=\"line\">\t * lcd_x = var.xres/2 + 8 + 16</div><div class=\"line\">\t * lcd_y = var.yres/2 + 16</div><div class=\"line\">\t * 笛卡尔座标系:</div><div class=\"line\">\t * x = lcd_x = var.xres/2 + 8 + 16</div><div class=\"line\">\t * y = var.yres - lcd_y = var.yres/2 - 16</div><div class=\"line\">\t */</div><div class=\"line\">\tpen.x = (var.xres/<span class=\"number\">2</span> + <span class=\"number\">8</span> + <span class=\"number\">16</span>) * <span class=\"number\">64</span>;</div><div class=\"line\">\tpen.y = (var.yres/<span class=\"number\">2</span> - <span class=\"number\">16</span>) * <span class=\"number\">64</span>;</div><div class=\"line\">    FT_Set_Transform( face, <span class=\"number\">0</span>, &pen);<span class=\"comment\">//4.变换</span></div><div class=\"line\">    error = FT_Load_Char( face, chinese_str[<span class=\"number\">0</span>], FT_LOAD_RENDER );<span class=\"comment\">//5.转换位图</span></div><div class=\"line\">    </div><div class=\"line\">    draw_bitmap( &slot-&gt;bitmap,</div><div class=\"line\">                 slot-&gt;bitmap_left,</div><div class=\"line\">                 var.yres - slot-&gt;bitmap_top);</div><div class=\"line\"></div><div class=\"line\">                 </div><div class=\"line\"><span class=\"keyword\">void</span> draw_bitmap( FT_Bitmap* bitmap, FT_Int x,  FT_Int y)</div><div class=\"line\">{</div><div class=\"line\">  FT_Int  i, j, p, q;</div><div class=\"line\">  FT_Int  x_max = x + bitmap-&gt;width;</div><div class=\"line\">  FT_Int  y_max = y + bitmap-&gt;rows;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> ( i = x, p = <span class=\"number\">0</span>; i &lt; x_max; i++, p++ )</div><div class=\"line\">  {</div><div class=\"line\">    <span class=\"keyword\">for</span> ( j = y, q = <span class=\"number\">0</span>; j &lt; y_max; j++, q++ )</div><div class=\"line\">    {</div><div class=\"line\">      <span class=\"keyword\">if</span> ( i &lt; <span class=\"number\">0</span>      || j &lt; <span class=\"number\">0</span>       ||</div><div class=\"line\">           i &gt;= var.xres || j &gt;= var.yres )</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>References:</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2007/10/2. ascii_unicode_and_utf-8.html\" target=\"_blank\" rel=\"external\">阮一峰的网络日志</a></li>\n<li><a href=\"http://www.freetype.org/freetype2/docs/tutorial/step1.html\" target=\"_blank\" rel=\"external\">freetype tutorial</a></li>\n</ol>\n","source":"_posts/字符编码.md","raw":"---\nlayout: post\ntitle: \"字符编码\"\ndate: 2015-3-22 15:18\ncomments: true\ntags: \n\n---\n\n# 字符编码\n\n在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个**字节（byte）**。而**字符**是语言意义上的符号，范围就不一定了。\n\n## ASCII码\n上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码(包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。\n<!--more-->\n\n##各个国家的编码\n\n因为其他国家有自己的语言，ascii不够用。例如在中国，hzk16字库是符合GB2312(国标码)的16X16点阵字库。GB2312汉字是由两个字节编码的（范围：A1A1~FEFE)。一个汉字占两个字节，前一个字节为该汉字的`区号`，后一个字节为该字的`位号`。每个区记录94个汉字，位号为该字在该区的位置。\n> 区码：区号-0xa0    \n> 位码：位号-0xa0\n> 位置: （94 \\*（区码-1）+（位码-1））\\* 32\n\n##Unicode编码表\nUnicode 是为整合全世界的所有语言文字而诞生的。任何文字在Unicode中都对应一个值，这个值称为代码，UCS-2和UCS-4只规定了代码点和文字之间的对应关系，而规定的储存方式称为`UTF`。\n\n**UTF-8是Unicode的实现方式之一。**`UTF-8`就是在互联网上使用最广的一种Unicode的实现方式。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。其他实现方式还包括`UTF-16`（字符用两个字节或四个字节表示）和`UTF-32`（字符用四个字节表示），不过在互联网上基本不用。\n\n###UTF-8的编码规则\n\n1. 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n2. 对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode的值。\n\n例如：“中”字的UTF-8的值为：E4 B8 AD (1110`0100`,10`111000`,10`101101`),Unicode的值为：100111000101101(4E2D)。\n\n###大端小端\nUnicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n实例：\n\n1. ANSI：文件的编码就是两个字节\"D1 CF\"，这正是\"严\"的GB2312编码，这也暗示GB2312是采用大头方式存储的。\n2. Unicode：编码是四个字节\"FF FE 25 4E\"，其中\"FF FE\"表明是小头方式存储，真正的编码是4E25。\n3. Unicode big endian：编码是四个字节\"FE FF 4E 25\"，其中\"FE FF\"表明是大头方式存储。\n4. UTF-8：编码是六个字节\"EF BB BF E4 B8 A5\"，前三个字节\"EF BB BF\"表示这是UTF-8编码，后三个\"E4B8A5\"就是\"严\"的具体编码，它的存储顺序与编码顺序是一致的。\n\n\n---------------------------------------------\n#编码方式\n\n\n\n##源文件用不同的编码方式编写，会导致执行结果不一样。\n\n```c\n#include <stdio.h>\r\rint main(int argc, char **argv)\r{\r\tint i = 0;\r\tunsigned char *str=\"abc中\";\r\r\twhile (str[i])\r\t{\r\t\tprintf(\"%02x \", str[i]);\r\t\ti++;\r\t}\r\tprintf(\"\\n\");\r\treturn 0;\r}\n\r\n```\n\n存为ansi的编码方式时：对于英文文件是ASCII编码，对于简体中文文件是GB2312编码。\n```\n61 62 63 d6 d0\n```\n存为UTF-8的编码方式输出结果为：\n```\n61 62 63 e4 b8 ad\n```\n\n##如何解决\n编译程序时，要指定字符集。\n\n查看gcc手册，搜索到charset。\n\n-finput-charset=charset  表示源文件的编码方式, 默认以UTF-8来解析\n\r-fexec-charset=charset   表示可执行程序里的字时候以什么编码方式来表示，默认是UTF-8\n\r\r示例：\n\r    gcc -finput-charset=GBK -fexec-charset=UTF-8 -o utf-8_2 ansi.c\n\n\n\n---------------------------------------------\n\n\n#英文字母、汉字的点阵显示\nlinux内核中有关于font的文件。比如linux-2.6.30.4/drivers/video/console/font_8x16.c文件，里面有个fontdata_8x16[FONTDATAMAX]数组，每个字符占16字节(8x16像素)。 \n\n```\n\t/* 65 0x41 'A' */\r\t0x00, /* 00000000 */\r\t0x00, /* 00000000 */\r\t0x10, /* 00010000 */\r\t0x38, /* 00111000 */\r\t0x6c, /* 01101100 */\r\t0xc6, /* 11000110 */\r\t0xc6, /* 11000110 */\r\t0xfe, /* 11111110 */\r\t0xc6, /* 11000110 */\r\t0xc6, /* 11000110 */\r\t0xc6, /* 11000110 */\r\t0xc6, /* 11000110 */\r\t0x00, /* 00000000 */\r\t0x00, /* 00000000 */\r\t0x00, /* 00000000 */\r\t0x00, /* 00000000 */\n```\n\n##帧缓冲(framebuffer)\n\nFramebuffer是一块显示缓存，往显示缓存中写入特定的格式数据就意味着向屏幕输出内容。帧缓冲设备对应的设备文件为`/dev/fb*`,如果系统有多个显示卡，Linux下还可以支持多个帧缓冲设备，最多可达32个（/dev/fb0~/dev/fb31)。帧缓冲设备为标准的字符设备，主设备号为29，此设备号为0~31.\n\n```c\n\n\tint fd_fb;\n\tstruct fb_var_screeninfo var;\t/* Current var */\r\tstruct fb_fix_screeninfo fix;\t/* Current fix */\n\tint screen_size; /*屏幕大小*/\n\tunsigned char *fbmem;\r\r\t/*打开framebuffer设备文件*/\r\n\tfd_fb = open(\"/dev/fb0\", O_RDWR);\r\tif (fd_fb < 0)\r\t{\r\t\tprintf(\"can't open /dev/fb0\\n\");\r\t\treturn -1;\r\t}\r\t/*获得可变信息*/\r\tif (ioctl(fd_fb, FBIOGET_VSCREENINFO, &var))\r\t{\r\t\tprintf(\"can't get var\\n\");\r\t\treturn -1;\r\t}\r\t/*获得可变信息*/\r\tif (ioctl(fd_fb, FBIOGET_FSCREENINFO, &fix))\r\t{\r\t\tprintf(\"can't get fix\\n\");\r\t\treturn -1;\r\t}\n\r\tscreen_size = var.xres * var.yres * var.bits_per_pixel / 8;/*单位字节*/\n\tfbmem = (unsigned char *)mmap(NULL , screen_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd_fb, 0);/*内存映射*/\n\t\n\r\n\t\n\t/* 清屏: 全部设为黑色 */\r\tmemset(fbmem, 0, screen_size); \r\n```\n\n##如何在屏幕上画出一个点\n\n```c\n\tunsigned int line_width;\r\tunsigned int pixel_width;\r\n\t\n\tline_width  = var.xres * var.bits_per_pixel / 8; //一行里面有多少字节\r\tpixel_width = var.bits_per_pixel / 8; //每个像素有多少字节\n\r\t\n\r\tvoid lcd_put_pixel(int x, int y, unsigned int color)\r{\r\tunsigned char *pen_8 = fbmem+y*line_width+x*pixel_width;//计算出位置\r\tunsigned short *pen_16;\t\r\tunsigned int *pen_32;\t\r\r\tunsigned int red, green, blue;\t\r\r\tpen_16 = (unsigned short *)pen_8;\r\tpen_32 = (unsigned int *)pen_8;\r\r\tswitch (var.bits_per_pixel)//判断每个像素有多少位，进行不同的处理\r\t{\r\t\tcase 8:\r\t\t{\r\t\t\t*pen_8 = color;\r\t\t\tbreak;\r\t\t}\r\t\tcase 16:\r\t\t{\r\t\t\t/* 565 */\r\t\t\tred   = (color >> 16) & 0xff;\r\t\t\tgreen = (color >> 8) & 0xff;\r\t\t\tblue  = (color >> 0) & 0xff;\r\t\t\tcolor = ((red >> 3) << 11) | ((green >> 2) << 5) | (blue >> 3);\r\t\t\t*pen_16 = color;\r\t\t\tbreak;\r\t\t}\r\t\tcase 32:\r\t\t{\r\t\t\t*pen_32 = color;\r\t\t\tbreak;\r\t\t}\r\t\tdefault:\r\t\t{\r\t\t\tprintf(\"can't surport %dbpp\\n\", var.bits_per_pixel);\r\t\t\tbreak;\r\t\t}\r\t}\r}\n\n\n```\n\n##LCD显示ascii码\n\n```c\n\nvoid lcd_put_ascii(int x, int y, unsigned char c)//x坐标，y坐标，显示字符\r{\r\tunsigned char *dots = (unsigned char *)&fontdata_8x16[c*16];//每个ascii码占16字节\r\tint i, b;\r\tunsigned char byte;\r\r\tfor (i = 0; i < 16; i++) //16行\r\t{\r\t\tbyte = dots[i]; //取出一个字节\r\t\tfor (b = 7; b >= 0; b--) //每一行8位\r\t\t{\r\t\t\tif (byte & (1<<b))//判断每一位的值是否为1\r\t\t\t{\r\t\t\t\t/* show */\r\t\t\t\tlcd_put_pixel(x+7-b, y+i, 0xffffff); /* 白 */\r\t\t\t}\r\t\t\telse\r\t\t\t{\r\t\t\t\t/* hide */\r\t\t\t\tlcd_put_pixel(x+7-b, y+i, 0); /* 黑 */\r\t\t\t}\r\t\t}\r\t}\r}\n\r\n```\n\n##LCD显示汉字\n\n在网上下载hzk16字库。\n\n```c\n\tint fd_hzk16;\r \tstruct stat hzk_stat;\n \tunsigned char *hzkmem;\r\r\n\t/*打开字库文件*/\n\tfd_hzk16 = open(\"HZK16\", O_RDONLY);\r\tif (fd_hzk16 < 0)\r\t{\r\t\tprintf(\"can't open HZK16\\n\");\r\t\treturn -1;\r\t}\n\t\n\t/*获取文件属性*/\r\tif(fstat(fd_hzk16, &hzk_stat))\r\t{\r\t\tprintf(\"can't get fstat\\n\");\r\t\treturn -1;\r\t}\n\r\t/*内存映射*/\n\thzkmem = (unsigned char *)mmap(NULL , hzk_stat.st_size, PROT_READ, MAP_SHARED, fd_hzk16, 0);\r\tif (hzkmem == (unsigned char *)-1)\r\t{\r\t\tprintf(\"can't mmap for hzk16\\n\");\r\t\treturn -1;\r\t}\r\n\n```\n\n根据字库的信息(区码位码上面有介绍)写出代码：\n\n```c\n\nvoid lcd_put_chinese(int x, int y, unsigned char *str)\r{\r\tunsigned int area  = str[0] - 0xA1;\r\tunsigned int where = str[1] - 0xA1;\r\tunsigned char *dots = hzkmem + (area * 94 + where)*32;\r\tunsigned char byte;\r\r\tint i, j, b;\r\tfor (i = 0; i < 16; i++)\r\t\tfor (j = 0; j < 2; j++)\r\t\t{\r\t\t\tbyte = dots[i*2 + j];\r\t\t\tfor (b = 7; b >=0; b--)\r\t\t\t{\r\t\t\t\tif (byte & (1<<b))\r\t\t\t\t{\r\t\t\t\t\t/* show */\r\t\t\t\t\tlcd_put_pixel(x+j*8+7-b, y+i, 0xffffff); /* 白 */\r\t\t\t\t}\r\t\t\t\telse\r\t\t\t\t{\r\t\t\t\t\t/* hide */\r\t\t\t\t\tlcd_put_pixel(x+j*8+7-b, y+i, 0); /* 黑 */\r\t\t\t\t}\r\t\t\t\t\r\t\t\t}\r\t\t}\r\t\r}\r\n```\n\n--------------------\n\n#Freetype\n\nFreetype 是一个操作字体文件的函数库，可以操作点阵和矢量字体。由于点阵缺乏灵活性，无法改变字体的大小和风格，**矢量字体不像点阵字体那样直接记录字符的字模数据**，而是**记录字体描述信息**。\n\n1. 若干个闭合曲线的关键点。\n2. 使用数字曲线连接关键点。\n3. 填充内部空间。\n\n字符对应的字体数据称为`glyph`,字体文件中通常带有一个字符映射表，用来把字符映射到对应的`glyph`的索引值。因为字符集的编码方式有很多种（GBK,Unicode,Big5等等)，所以有多个映射表（charmap）。所以一个文字的显示过程：\n\n1. 给定一个文字，可以确定它的`编码值`。（比如‘A’的ascii码的编码值为：0x41）\n2. 根据`编码值`从字体文件中找到`glyph`(关键点)。\n3. 设置字体大小。\n4. 利用某些函数把`glyph`里的点缩放为上面设定的字体大小。\n5. 转换为位图点阵。\n6. 在LCD上显示出来。\n\n##代码思路##\n\ngoogle搜索freetype tutorial第一条就是教如何使用。\n\n1. 创建freetype库，进行初始化：FT_Init_FreeType\n2. 加载字体文件（Load a Font face）: FT_New_Face \n3. 设置字体大小：FT_Set_Char_Size 和 FT_Set_Pixel_Sizes \n4. 变换（移动和旋转）: FT_Set_Transform\n5. 根据编码值，加载`glyph`（找到，取出，转为位图）\n6. 打印\n\n\n```c\n\t\n\tFT_Library\t  library;\r\tFT_Face \t  face;\n\tint error;\n\tFT_Vector     pen; //矢量\r\tFT_GlyphSlot  slot;\r\r\r\terror = FT_Init_FreeType( &library );\t//1.初始化freetype库\r\terror = FT_New_Face( library, argv[1], 0, &face ); //2.加载字体文件\r\tslot = face->glyph;//插槽\r\n\tFT_Set_Pixel_Sizes(face, 24, 0); //3.设置字体大小\n\t/* 确定座标:\r\t * lcd_x = var.xres/2 + 8 + 16\r\t * lcd_y = var.yres/2 + 16\r\t * 笛卡尔座标系:\r\t * x = lcd_x = var.xres/2 + 8 + 16\r\t * y = var.yres - lcd_y = var.yres/2 - 16\r\t */\r\tpen.x = (var.xres/2 + 8 + 16) * 64;\r\tpen.y = (var.yres/2 - 16) * 64;\r    FT_Set_Transform( face, 0, &pen);//4.变换\n    error = FT_Load_Char( face, chinese_str[0], FT_LOAD_RENDER );//5.转换位图\n    \n    draw_bitmap( &slot->bitmap,\r                 slot->bitmap_left,\r                 var.yres - slot->bitmap_top);\n\r                 \nvoid draw_bitmap( FT_Bitmap* bitmap, FT_Int x,  FT_Int y)\r{\r  FT_Int  i, j, p, q;\r  FT_Int  x_max = x + bitmap->width;\r  FT_Int  y_max = y + bitmap->rows;\r\r  for ( i = x, p = 0; i < x_max; i++, p++ )\r  {\r    for ( j = y, q = 0; j < y_max; j++, q++ )\r    {\r      if ( i < 0      || j < 0       ||\r           i >= var.xres || j >= var.yres )\r        continue;\r    }\r  }\r}\r\r\r\n```\n\n\n\n\nReferences:\n\n1. [阮一峰的网络日志](http://www.ruanyifeng.com/blog/2007/10/2. ascii_unicode_and_utf-8.html)\n2. [freetype tutorial](http://www.freetype.org/freetype2/docs/tutorial/step1.html)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"字符编码","updated":1427101073000,"excerpt":"<h1 id=\"字符编码\">字符编码</h1>\n<p>在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个<strong>字节（byte）</strong>。而<strong>字符</strong>是语言意义上的符号，范围就不一定了。</p>\n<h2 id=\"ASCII码\">ASCII码</h2>\n<p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码(包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。<br>","_id":"csq1f4zzkqj2hcrr","categories":[],"photos":[],"link":""},{"layout":"post","title":"Holistic Learning","date":1415704680000,"comments":true,"tags":["kc2jcydjbl142gb7","t3lz5tehrs3o1vxs"],"content":"<p>Resource : <a href=\"http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf\" target=\"_blank\" rel=\"external\">scotthyoung</a></p>\n<h1 id=\"Holistic_Learning_VS_Rote_Memorization\"><strong>Holistic Learning VS Rote Memorization</strong></h1>\n<p>Holistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.<br><a id=\"more\"></a><br><code>Rote Memorization</code></p>\n<ul>\n<li>Organizes Ideas into Boxes</li>\n<li>Keeps Subjects and Concepts Distinct</li>\n<li>Few Neural Paths to the Same Idea</li>\n<li>Views Concepts Through One Perspective</li>\n<li>Aims to Learn Through Repetition</li>\n</ul>\n<p><code>Holistic Learning</code></p>\n<ul>\n<li>Organized Ideas into Webs</li>\n<li>Interrelates Subjects and Concepts</li>\n<li>Many Neural Paths to the Same Idea</li>\n<li>Views Concepts Through Many Unique Perspectives and Senses</li>\n<li>Aims to Learn by Relating</li>\n</ul>\n<h1 id=\"Creating_a_Construct\"><strong>Creating a Construct</strong></h1>\n<p>Your goal when learning anything is to create a <strong>construct</strong> or an underlying understanding.</p>\n<p>When you are being taught a subject or you are learning it on your own, you are getting bricks fed to you one by one.  If your lucky you might have a rough blueprint of how to organize the bricks, but if there aren’t enough linkages or they are assembled improperly the result is confusion.</p>\n<p>The first key to building a house is to realize that’s what you are trying to do.  Your goal when learning any complex subject or field should be to build a construct.  A framework of understanding in which your web of knowledge occupies.  </p>\n<p>I take very few notes in classes and I study them even less.  <strong>My goal in every class is to build a construct not to transcribe what was said.</strong>  Taking notes can be helpful but realize that is only an intermediate tool to your greater goal.  Having a workable construct.</p>\n<p>Even if the building consisted of over a million bricks, <strong>a quick scan would show where the hole in the building lay and where the missing brick could be found.</strong></p>\n<p>You don’t need every brick to maintain the structural integrity of a house.  <strong>You don’t need every piece of information to maintain the integrity of your understanding.</strong>  When you have a construct, you can solve difficult problems even when there is a lot of missing information.  You simply look at your construct, see where the holes point to and fill them in.</p>\n<p><strong>As long as you have a relatively stable construct, you can find ways around the missing information.</strong> When one path gets shut down you take a different route.  When I take a test I can usually find a way to solve the problem even if I forget the method I was taught.</p>\n<h1 id=\"Start_With_a_Model\"><strong>Start With a Model</strong></h1>\n<p>Constructs are formed from <strong>models</strong>, chunks of understanding that aren’t completely<br>accurate but can be used to solve problems.</p>\n<p>A model is not the same as a construct. A construct is a complete set of understandings. A construct for math allows you to solve any problem in math.</p>\n<p>A model is a quick representation of the idea you are trying to relate or understand.  <strong>It is an incomplete and temporary solution.</strong>  Without building a dozens of models any attempts to form a construct will collapse.  Trying to understand everything at once is impossible for the conscious mind to handle. Building individual models can give you a chance to stitch them together into a complete construct.</p>\n<blockquote>\n<p>Recently I took a course in Vectors and Linear Algebra.  A very abstract course where most people have difficulty forming a construct.  When the concept of a subspace was introduced, I was lost.  I needed a construct for the concept, but it was too broad to immediately grasp.  So I looked for a model.</p>\n<p>The model I chose was a visual representation of what I figured an idealized subspace might look like.  I imagined a subspace as being a plane suspended in three dimensions.  The visualization was as vivid as  it was automatic.  I can remember the plane being red and translucent slicing through a blue-gray vacuum of three dimensional space.</p>\n<p>This model was not a construct.  A plane in 3D is just one of many different types of subspaces.  But without it, a subspace would have just been a bunch of rules and numbers.  Even if the model was inaccurate, I could use it as a basis for refining and expanding the eventual construct.</p>\n<p>Links form into simple models which form into overall constructs.  Layered creations of understanding.  Effective constructs also link outside of where they are applicable.  Once I had a construct prepared for subspaces, I started to view my own experience as a subspace of reality. </p>\n</blockquote>\n<p>Constructs that become islands are worthless when there is a problem that exists between them.  Interlinking your constructs helps funnel problems outside of their influence zone into realms of understanding.  </p>\n<h1 id=\"How_to_Learn_Holistically\"><strong>How to Learn Holistically</strong></h1>\n<p><strong>When I need a model, I find one.  When I have enough models I form a construct.When I learn information I try to link it within and outside my constructs.When I learn information I try to link it within and outside my constructs.</strong></p>\n<p>You create webs of information, constructs and models by <strong>visceralizing</strong>, <strong>metaphor</strong> and <strong>exploring</strong></p>\n<h2 id=\"Visceralization\"><strong>Visceralization</strong></h2>\n<p>A model isn’t a grouping of ideas, it’s an experience.</p>\n<p>The best “visceralizations” are combinations of images, sounds, feelings and textures.  Depending on your learning preference you may see, hear or feel ideas.  More than just a picture, you want an experience.</p>\n<p>If you aren’t sure exactly how to do this, the best place to start is with a pad of paper.  <strong>Draw out the relationship between several ideas in a picture</strong>.  Remember your goal isn’t a perfect construct but a simplified model.  Even if your model is shown to be slightly inaccurate later, it is still better than no model at all.</p>\n<p>Ask yourself what the concept would look, sound or feel like?  How would it function and respond?  </p>\n<blockquote>\n<p>When learning computer science I formed mental pictures of bizarre machines and objects that represented the different objects and functions I learned.  Strings and arrays looked like colored cubes suspended along a cord.  Functions were machines that ate strings and individual blocks and spat out new blocks</p>\n</blockquote>\n<p>As you get better you should be able to do this without a pencil and paper.  Your imagination is far faster than your hand, so once you begin to understand the process you can start visceralizing how different concepts interact.  You can see how they squish and respond to stimuli.  Boring ideas translate into a bizarre and otherworldly scene.</p>\n<h2 id=\"Metaphor\"><strong>Metaphor</strong></h2>\n<p>To interlink constructs you need to use metaphor.<br>Metaphor is a literary term used <strong>when you want to relate two things that aren’t actually related.</strong></p>\n<p>If you wanted to build a house, the fastest way would be to make minor modifications to a blueprint you already own.  Metaphors can allow you to relate a new construct to a previously established one.  This can help you piece together ideas when your models fail to give accurate information.</p>\n<p>If you don’t already use metaphors extensively, <strong>a quick way to start would be to play the, “That Reminds Me Of…” game whenever you learn something new.</strong>  You play the game by thinking or writing down a list of ideas that this new concept reminds you of.  It doesn’t matter if the ideas are ridiculous or completely unrelated.  That’s the point, to link together ideas that don’t normally connect.</p>\n<p>The idea is that by playing this game repeatedly you can see the new concept through the vantage points where you already have understanding.  This helps you understand more rapidly.</p>\n<p>If you already understand sports, then you can use sports as a metaphor when trying to comprehend economics or science.  You can create connections between any subjects you just need to be patient enough.</p>\n<blockquote>\n<p>When I read Nicollo Machiavelli’s, The Prince, I started linking his ideas about statecraft (which were a rather weak construct for myself) and built them into ideas about business and social settings (which were strong constructs).</p>\n</blockquote>\n<h2 id=\"Explore\"><strong>Explore</strong></h2>\n<p>Exploration is the process of going through your constructs, models and metaphors and finding errors. </p>\n<p>Holes and errors will only come up when you actually go back and test them. Until you  actually review the information involved, they will be hidden from your awareness.  This happens when you go to write an exam and you realize you don’t know how to solve a specific problem or you don’t have the right formula.  A strong enough network may mean you don’t need that formula to solve the problem, but you may have to take a few detours to get there.</p>\n<p><strong>The best way to explore is to actually face problems.</strong><br>Usually the idea is already reinforced inside my web, but sometimes I missed it entirely.  Studying isn’t as good as testing but it can fix a few broken paths</p>\n<h1 id=\"Summary_of_Holistic_Learning\"><strong>Summary of Holistic Learning</strong></h1>\n<p>Holistic learning works with highly conceptual information where there is an underlying system.  It doesn’t work well with arbitrary information or skills.</p>\n","source":"_posts/Holistic Learning.markdown","raw":"---\nlayout: post\ntitle: \"Holistic Learning\"\ndate: 2014-11-11 19:18\ncomments: true\ntags: \n\t- 思维\n\t- 记忆力\n    \n---\nResource : [scotthyoung](http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf)\n#**Holistic Learning VS Rote Memorization**\nHolistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.\n<!--more-->\n`Rote Memorization`\n\n- Organizes Ideas into Boxes\n- Keeps Subjects and Concepts Distinct\n- Few Neural Paths to the Same Idea\n- Views Concepts Through One Perspective\n- Aims to Learn Through Repetition\n\n`Holistic Learning`\n\n- Organized Ideas into Webs\n- Interrelates Subjects and Concepts\n- Many Neural Paths to the Same Idea\n- Views Concepts Through Many Unique Perspectives and Senses\n- Aims to Learn by Relating\n\n\n#**Creating a Construct**\nYour goal when learning anything is to create a **construct** or an underlying understanding.\n\nWhen you are being taught a subject or you are learning it on your own, you are getting bricks fed to you one by one.  If your lucky you might have a rough blueprint of how to organize the bricks, but if there aren’t enough linkages or they are assembled improperly the result is confusion.\n\nThe first key to building a house is to realize that’s what you are trying to do.  Your goal when learning any complex subject or field should be to build a construct.  A framework of understanding in which your web of knowledge occupies.  \n\nI take very few notes in classes and I study them even less.  **My goal in every class is to build a construct not to transcribe what was said.**  Taking notes can be helpful but realize that is only an intermediate tool to your greater goal.  Having a workable construct.\n\nEven if the building consisted of over a million bricks, **a quick scan would show where the hole in the building lay and where the missing brick could be found.**\n\nYou don’t need every brick to maintain the structural integrity of a house.  **You don’t need every piece of information to maintain the integrity of your understanding.**  When you have a construct, you can solve difficult problems even when there is a lot of missing information.  You simply look at your construct, see where the holes point to and fill them in.\n\n**As long as you have a relatively stable construct, you can find ways around the missing information.** When one path gets shut down you take a different route.  When I take a test I can usually find a way to solve the problem even if I forget the method I was taught.\n\n#**Start With a Model**\nConstructs are formed from **models**, chunks of understanding that aren't completely \naccurate but can be used to solve problems.\n\nA model is not the same as a construct. A construct is a complete set of understandings. A construct for math allows you to solve any problem in math.\n\nA model is a quick representation of the idea you are trying to relate or understand.  **It is an incomplete and temporary solution.**  Without building a dozens of models any attempts to form a construct will collapse.  Trying to understand everything at once is impossible for the conscious mind to handle. Building individual models can give you a chance to stitch them together into a complete construct.\n\n> Recently I took a course in Vectors and Linear Algebra.  A very abstract course where most people have difficulty forming a construct.  When the concept of a subspace was introduced, I was lost.  I needed a construct for the concept, but it was too broad to immediately grasp.  So I looked for a model.\n\n> The model I chose was a visual representation of what I figured an idealized subspace might look like.  I imagined a subspace as being a plane suspended in three dimensions.  The visualization was as vivid as  it was automatic.  I can remember the plane being red and translucent slicing through a blue-gray vacuum of three dimensional space.\n\n> This model was not a construct.  A plane in 3D is just one of many different types of subspaces.  But without it, a subspace would have just been a bunch of rules and numbers.  Even if the model was inaccurate, I could use it as a basis for refining and expanding the eventual construct.\n\n> Links form into simple models which form into overall constructs.  Layered creations of understanding.  Effective constructs also link outside of where they are applicable.  Once I had a construct prepared for subspaces, I started to view my own experience as a subspace of reality. \n\nConstructs that become islands are worthless when there is a problem that exists between them.  Interlinking your constructs helps funnel problems outside of their influence zone into realms of understanding.  \n\n#**How to Learn Holistically**\n\n**When I need a model, I find one.  When I have enough models I form a construct.When I learn information I try to link it within and outside my constructs.When I learn information I try to link it within and outside my constructs.**\n\nYou create webs of information, constructs and models by **visceralizing**, **metaphor** and **exploring**\n\n##**Visceralization**\nA model isn’t a grouping of ideas, it’s an experience.\n\nThe best “visceralizations” are combinations of images, sounds, feelings and textures.  Depending on your learning preference you may see, hear or feel ideas.  More than just a picture, you want an experience.\n\nIf you aren’t sure exactly how to do this, the best place to start is with a pad of paper.  **Draw out the relationship between several ideas in a picture**.  Remember your goal isn’t a perfect construct but a simplified model.  Even if your model is shown to be slightly inaccurate later, it is still better than no model at all.\n\nAsk yourself what the concept would look, sound or feel like?  How would it function and respond?  \n> When learning computer science I formed mental pictures of bizarre machines and objects that represented the different objects and functions I learned.  Strings and arrays looked like colored cubes suspended along a cord.  Functions were machines that ate strings and individual blocks and spat out new blocks\n\nAs you get better you should be able to do this without a pencil and paper.  Your imagination is far faster than your hand, so once you begin to understand the process you can start visceralizing how different concepts interact.  You can see how they squish and respond to stimuli.  Boring ideas translate into a bizarre and otherworldly scene.\n\n##**Metaphor**\nTo interlink constructs you need to use metaphor.\nMetaphor is a literary term used **when you want to relate two things that aren’t actually related.**\n\nIf you wanted to build a house, the fastest way would be to make minor modifications to a blueprint you already own.  Metaphors can allow you to relate a new construct to a previously established one.  This can help you piece together ideas when your models fail to give accurate information.\n\nIf you don’t already use metaphors extensively, **a quick way to start would be to play the, “That Reminds Me Of...” game whenever you learn something new.**  You play the game by thinking or writing down a list of ideas that this new concept reminds you of.  It doesn’t matter if the ideas are ridiculous or completely unrelated.  That’s the point, to link together ideas that don't normally connect.\n\nThe idea is that by playing this game repeatedly you can see the new concept through the vantage points where you already have understanding.  This helps you understand more rapidly.\n\nIf you already understand sports, then you can use sports as a metaphor when trying to comprehend economics or science.  You can create connections between any subjects you just need to be patient enough.\n\n> When I read Nicollo Machiavelli’s, The Prince, I started linking his ideas about statecraft (which were a rather weak construct for myself) and built them into ideas about business and social settings (which were strong constructs).\n\n##**Explore**\nExploration is the process of going through your constructs, models and metaphors and finding errors. \n\nHoles and errors will only come up when you actually go back and test them. Until you  actually review the information involved, they will be hidden from your awareness.  This happens when you go to write an exam and you realize you don’t know how to solve a specific problem or you don’t have the right formula.  A strong enough network may mean you don’t need that formula to solve the problem, but you may have to take a few detours to get there.\n\n**The best way to explore is to actually face problems.**\nUsually the idea is already reinforced inside my web, but sometimes I missed it entirely.  Studying isn’t as good as testing but it can fix a few broken paths\n\n#**Summary of Holistic Learning**\nHolistic learning works with highly conceptual information where there is an underlying system.  It doesn't work well with arbitrary information or skills.","slug":"Holistic Learning","updated":1426577117000,"excerpt":"<p>Resource : <a href=\"http://www.scotthyoung.com/blog/Programs/HolisticLearningEBook.pdf\" target=\"_blank\" rel=\"external\">scotthyoung</a></p>\n<h1 id=\"Holistic_Learning_VS_Rote_Memorization\"><strong>Holistic Learning VS Rote Memorization</strong></h1>\n<p>Holistic learning is the opposite of rote memorization.  Instead of learning through force, your goal is to create webs of information that link together.<br>","_id":"g0nv1i4hqh44092e","categories":[],"photos":[],"link":""},{"layout":"post","title":"Git Real 2","date":1415506680000,"comments":true,"tags":["jo5s27qsjbx7afo7"],"content":"<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg\" alt=\"0\"></p>\n<h1 id=\"INTERACTIVE_REBASE\"><strong>INTERACTIVE REBASE</strong></h1>\n<h2 id=\"REBASE_RECAP\"><strong>REBASE RECAP</strong></h2>\n<blockquote>\n<p>So you’ve been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.<br><a id=\"more\"></a></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase master</div></pre></td></tr></table></figure>\n\n<h2 id=\"INTERACTIVE_REBASE-1\"><strong>INTERACTIVE REBASE</strong></h2>\n<blockquote>\n<p>You’re getting ready to merge in your feature branch, but first you want to clean up your commits a bit. Go ahead and use interactive rebase to edit your last 4 commits.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase -i HEAD~<span class=\"number\">4</span>  <span class=\"comment\">/*alter commits in the same branch*/</span></div></pre></td></tr></table></figure>\n\n<p>We want to re-order these four commits.</p>\n<h2 id=\"COMMIT_ORDERING\"><strong>COMMIT ORDERING</strong></h2>\n<blockquote>\n<p>You notice a critical error on your part. The commit where you wrote tests comes after the commit where you made the actual changes. Let’s swap these 2 commits so that it looks like you wrote the tests first. Swap the ‘Add tests’ commit so that it comes before the ‘Implement poodles’ commit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn</div><div class=\"line\">pick f239187 Implement poodles  //<span class=\"operator\"><span class=\"keyword\">change</span> <span class=\"keyword\">to</span> pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests </span></div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests          //<span class=\"keyword\">change</span> <span class=\"keyword\">to</span> pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added a title <span class=\"keyword\">to</span> the homepage</div></pre></td></tr></table></figure>\n\n<p>Swap the order,save and close the editor.Commits get replayed in new order.</p>\n<h2 id=\"REWORDING_A_COMMIT\"><strong>REWORDING A COMMIT</strong></h2>\n<blockquote>\n<p>1.As you’re editing your commits, you notice that the commit that says ‘Add tests’ is a little vague, maybe you should change it to something more specific. Use the reword command to change the message of this commit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn</div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a Add tests<span class=\"comment\"> // reword 4b65a5a Add tests</span></div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added <span class=\"operator\">a</span> title <span class=\"built_in\">to</span> <span class=\"operator\">the</span> homepage</div></pre></td></tr></table></figure>\n\n<p>Commands:<br>p, pick = use commit<br>r, reword = use commit, but edit the commit message<br>e, edit = use commit, but stop for amending<br>s, squash = use commit, but meld into previous commit<br>f, fixup = like “squash”, but discard this commit’s log message<br>x, exec = run command (the rest of the line) using shell</p>\n<blockquote>\n<p>2.After setting the <code>reword</code> command in the interactive rebase editor <strong>another editor window has opened up</strong>. This is where you actually change the commit message. Go ahead and change the commit message to: <code>Add tests for poodles</code> to be more descriptive.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Add</span> tests //<span class=\"keyword\">Add</span> tests for poodles</div></pre></td></tr></table></figure>\n\n<h2 id=\"SPLIT_COMMITS\"><strong>SPLIT COMMITS</strong></h2>\n<blockquote>\n<p>1.You remember that the ‘Add unicorn’ commit also contains the testing changes. Since we have separate commits for adding tests for poodles it makes sense to split out the test changes into a separate commit. Tell git to stop at this commit so we can reorganize it a bit.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 Add unicorn  <span class=\"comment\"> //edit b3f1649 Add unicorn</span></div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a Added tests <span class=\"keyword\">for</span> poodles</div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f Added <span class=\"operator\">a</span> title <span class=\"built_in\">to</span> <span class=\"operator\">the</span> homepage</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.After saving the interactive rebase text file, git has stopped at the ‘Add unicorn’ commit. The first thing we need to do is to reset back to the previous commit, so the changes in the most recent commit are back in the file and unstaged.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> HEAD^</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>3.Great! You’ve already re-committed the changes needed in 2 different commits. All that’s left to do is to resume the rebase with the continue option.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n\n<p>One commit is now two.</p>\n<h2 id=\"SQUASHING_COMMITS\"><strong>SQUASHING COMMITS</strong></h2>\n<blockquote>\n<p>1.You noticed another bug with those pesky poodles, so you’ve gone ahead and fixed it, making another commit in the process. Now you have 2 commits that both affect the poodles page. You should squash them into one commit to simplify your git logs.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick b3f1649 <span class=\"keyword\">Add</span> unicorn</div><div class=\"line\">pick <span class=\"number\">4</span>b65a5a <span class=\"keyword\">Add</span> tests</div><div class=\"line\">pick f239187 Implement poodles</div><div class=\"line\">pick c3f863f <span class=\"keyword\">Add</span> title <span class=\"keyword\">to</span> poodle page <span class=\"comment\">//squash c3f863f Add title to poodle page</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.After designating a commit to be squashed, another editor pops up enabling you to set a commit message for the resulting commit. Go ahead and set to: <code>squashed some poodles</code>.</p>\n</blockquote>\n<p><code>editor:</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//This is a combination of 2 commits.</span></div><div class=\"line\"><span class=\"comment\">//The first commit's message is:</span></div><div class=\"line\"></div><div class=\"line\">Implement poodles <span class=\"comment\">//注释掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//This is the 2nd commit message:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Add</span> title <span class=\"keyword\">to</span> poodle page <span class=\"comment\">//注释掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//合并成你想的名字：</span></div><div class=\"line\">squashed some poodles</div></pre></td></tr></table></figure>\n\n<p>The content of two commits is replayed, but only one commit is made.<br><br></p>\n<h1 id=\"STASHING\"><strong>STASHING</strong></h1>\n<h2 id=\"GIT_STASH\"><strong>GIT STASH</strong></h2>\n<blockquote>\n<p>You’re not quite ready to commit what you’re working on, but need to make a quick fix to master. Fear not, just stash your current changes so you can switch to master quick.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git stash save  // </span>=<span class=\"string\"> git stash</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"GIT_STASH_LIST\"><strong>GIT STASH LIST</strong></h2>\n<blockquote>\n<p>You just finished making those quick changes to master. You’re now ready to resume your work on the feature you had started on before you had to fix master. Let’s first list all the stashes to make sure we get the right one.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">list</span>   <span class=\"comment\">//stash names are shown in the list</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"GIT_STASH_APPLY\"><strong>GIT STASH APPLY</strong></h2>\n<blockquote>\n<p>Great! As you can see, your stash is in the stash list. Let’s apply the stash so you can get back to work.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash apply stash<span class=\"variable\">@{0}</span> <span class=\"comment\">// = git stash apply</span></div></pre></td></tr></table></figure>\n\n<p><code>stash@{0}</code> is the default.<br>stash has been applied but it’s still here.</p>\n<h2 id=\"GIT_STASH_DROP\"><strong>GIT STASH DROP</strong></h2>\n<blockquote>\n<p>Ok, so now that you have all your stashed changes back, let’s clean up the stash list. There’s only one stash; go ahead and drop it.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"operator\"><span class=\"keyword\">drop</span>  //<span class=\"keyword\">Delete</span> stash@{<span class=\"number\">0</span>} <span class=\"keyword\">from</span> list</span></div><div class=\"line\">git stash clear //Clear <span class=\"keyword\">all</span> <span class=\"keyword\">of</span> them <span class=\"keyword\">at</span> once</div></pre></td></tr></table></figure>\n\n<h2 id=\"CONFLICTS\"><strong>CONFLICTS</strong></h2>\n<blockquote>\n<p>1.You came back from master and resumed working on your feature, when you realize that you forgot to apply your saved stash. Go ahead and apply it now.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> stash apply</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.Uh oh! There was a conflict when trying to apply your previous stash. It’s no problem, you were just trying things anyway. Go ahead and do a hard reset back to the last commit.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD</span></span></div><div class=\"line\">git stash apply</div></pre></td></tr></table></figure>\n\n<h2 id=\"GIT_STASH_POP\"><strong>GIT STASH POP</strong></h2>\n<blockquote>\n<p>Now that you have the file reset, use the <code>pop</code> command to <strong>apply and delete the stash at the same time</strong>. </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">pop</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"KEEPING_THE_INDEX\"><strong>KEEPING THE INDEX</strong></h2>\n<blockquote>\n<p>You need to swap branches again, but this time some of your changes are ready to be committed. Stash all the unstaged changes, but leave the staged changes intact so they can be committed afterwards.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save --keep-<span class=\"built_in\">index</span> //cause the staging area not <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> stashed</div></pre></td></tr></table></figure>\n\n<h2 id=\"INCLUDE_UNTRACKED\"><strong>INCLUDE UNTRACKED</strong></h2>\n<blockquote>\n<p>Wow, there are so many small fixes on master today! You really need to stash some more changes, but it doesn’t seem to be working on these untracked files you just created. Try using the <code>--include-untracked</code> option to stash all those new files.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash save --include-untracked //cause untracked <span class=\"keyword\">files</span> <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> stashed,too</div></pre></td></tr></table></figure>\n\n<h2 id=\"LIST_OPTIONS\"><strong>LIST OPTIONS</strong></h2>\n<blockquote>\n<p>You’ve been stashing stuff all day since you keep having to make small quick fixes to master. Now you have a bunch of stashed changes and you’re not sure which one you need to apply. You could look through them all one by one, or you could use the <code>--stat</code> option to list information about each stash. Give that a try.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"keyword\">list</span> --stat //summarizes <span class=\"keyword\">file</span> <span class=\"keyword\">changes</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"STASH_DETAILS\"><strong>STASH DETAILS</strong></h2>\n<blockquote>\n<p>You now have a list of stashes that are showing you more information, and you think you may have spotted the stash that you need. Take a more detailed look at the stash@{2} stash with the <code>--patch</code> option.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash <span class=\"literal\">show</span> stash@{<span class=\"number\">2</span>} --patch //<span class=\"literal\">show</span> file differents</div></pre></td></tr></table></figure>\n\n<h2 id=\"STASH_MESSAGE\"><strong>STASH MESSAGE</strong></h2>\n<blockquote>\n<p>You’re halfway through a large feature. Your team has decided that they want you to deploy what you have so far, but you have a smaller unfinished feature that isn’t ready to be committed yet. Go ahead and stash your current changes with the <strong>message <code>Added groom method</code></strong>, so you know which stash has your changes.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> stash save <span class=\"string\">\"Added groom method\"</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"STASH_BRANCHING\"><strong>STASH BRANCHING</strong></h2>\n<blockquote>\n<p>Now that you’ve deployed the main part of your feature, you need to finish up what is left. Create a new branch named <code>poodle</code> and apply your most current stash all in one command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">git</span> <span class=\"tag\">stash</span> <span class=\"tag\">branch</span> <span class=\"tag\">poodle</span> <span class=\"tag\">stash</span><span class=\"at_rule\">@<span class=\"keyword\">{0}</span></span></div></pre></td></tr></table></figure>\n\n<p><code>git stash branch</code>checks a new branch out automatically, and drops the stash automatically.<br><br></p>\n<h1 id=\"PURGING_HISTORY\"><strong>PURGING HISTORY</strong></h1>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/17.jpg\" alt=\"17\"></p>\n<h2 id=\"REPO_COPY\"><strong>REPO COPY</strong></h2>\n<blockquote>\n<p>Now you’ve done it. You accidentally put the company’s master password into one of your files. You’re beginning to panic because you know that it’s pretty hard to delete something forever in git. That’s what you really need to do, though, or you’re in big trouble. You’re going to need to purge the history. First, though, make a copy of your repo in case you mess it up. Make a copy of the <code>poodles</code> repository, and name it whatever you want.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> poodles poodles_copy</div></pre></td></tr></table></figure>\n\n<h2 id=\"TREE_FILTER\"><strong>TREE FILTER</strong></h2>\n<blockquote>\n<p>Luckily for you, the password you accidentally committed was in the <code>master_password.txt</code> file. Use the <code>filter-branch</code> command and remove this file from all of your commits.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//git filter-branch --tree-filter &lt;command&gt; <span class=\"keyword\">...</span> </div><div class=\"line\">//specify any shell commend</div><div class=\"line\">git filter-branch --tree-filter <span class=\"string\">'rm -f master_password.txt'</span></div></pre></td></tr></table></figure>\n\n<p><code>...</code>: </p>\n<ul>\n<li><code>--all</code> option filter all commits in all branches.</li>\n<li><code>HEAD</code> filter only current branch.</li>\n</ul>\n<p>Git will check each commit out into <strong>working directory</strong>, run your command, and re-commit.</p>\n<h2 id=\"INDEX_FILTER\"><strong>INDEX FILTER</strong></h2>\n<blockquote>\n<p>This repository is so large, using <code>--tree-filter</code> is going to take all day. Use <code>--index-filter</code> to remove <code>master_password.txt</code> instead. Remember, <code>--index-filte</code>r will need a command that works on the staging area, which is going to be some sort of git command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//git filter-branch --index-filter &lt;command&gt; <span class=\"keyword\">...</span></div><div class=\"line\">//command must operate on staging area.</div><div class=\"line\">git filter-branch --index-filter <span class=\"string\">'git rm --cached --ignore-unmatch master_password.txt'</span></div></pre></td></tr></table></figure>\n\n<p>It operates on <strong>staging area</strong>.<br><code>--ignore-unmatch</code>: succeeds even if file isn’t present.<br>Git will run your command against each commit, but without checking it out first(so it’s faster).</p>\n<h2 id=\"FORCE\"><strong>FORCE</strong></h2>\n<blockquote>\n<p>You just realized that you also have a <code>master_username.txt</code> file that should probably be removed too, just to be safe. Use either technique you have learned to remove this file. Don’t forget, you have a history backup from the first time you used <code>filter-branch</code>. Use the correct option to force git to overwrite it.</p>\n</blockquote>\n<p>After you run filter-branch, Git leaves a backup of your tree in the “.git” directory.By default, you can’t run filter-branch again because it won’t overwrite the backup.You can force it with the -f option.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">filter</span>-branch -<span class=\"keyword\">f</span> --tree-<span class=\"built_in\">filter</span> <span class=\"string\">'git rm --cached --ignore-unmatch master_username.txt'</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"PRUNING\"><strong>PRUNING</strong></h2>\n<blockquote>\n<p>Great! Now we’re getting somewhere. There is one more problem though, you realize that some of the commits don’t contain anything anymore, since you removed the password file that they referenced. You should probably use the <code>--prune-empty</code> option do something to clean these out.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">filter</span>-branch -<span class=\"keyword\">f</span> --prune-<span class=\"built_in\">empty</span></div></pre></td></tr></table></figure>\n\n<p><code>--prune-empty</code> option drops commits that don’t alter any files.</p>\n<p><br></p>\n<h1 id=\"WORKING_TOGETHER\"><strong>WORKING TOGETHER</strong></h1>\n<h2 id=\"LINE_ENDINGS\"><strong>LINE ENDINGS</strong></h2>\n<blockquote>\n<p>1.Your company just hired a new developer who works on a Windows computer, and you notice that some files seem to be missing line separators. You realize that the Windows machine is saving files with a different line separator character than the Unix stations. Here on your Unix machine, set your ‘git config’ variable to convert line endings to the Unix way on commit.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/18.jpg\" alt=\"18\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> core.autocrlf <span class=\"built_in\">input</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.Because you’re a nice person, you decide to go help the new developer convert line endings to work on his windows computer. Set the <code>git config</code> variable to convert line endings from Unix to Windows formats on checkout.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> core.autocrlf <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/19.jpg\" alt=\"19\"></p>\n<blockquote>\n<p>3.After helping a 3rd Windows developer set up their workstation, you’ve decided enough is enough. It’s time to add a <code>.gitattributes</code> file to handle all these line ending problems. Finish adding the options to the <code>*.bat</code> and <code>*.sh files</code>. Remember, <code>*.bat</code> is a windows file, while <code>*.sh</code> is a unix file.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/20.jpg\" alt=\"20\"></p>\n<p><code>text=auto</code> Choose conversion automatically<br><code>text</code> Treat files as text -convert to OS’s line endings back to LF on commit<br><code>text eol = crlf</code> <code>text eol = lf</code> Convert to specified format on checkout back to LF commit<br><code>binary</code> Treat files as binary - do no conversion</p>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/21.jpg\" alt=\"21\"></p>\n<h2 id=\"CHERRY_PICKING\"><strong>CHERRY PICKING</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/22.jpg\" alt=\"22\"></p>\n<blockquote>\n<p>You were working on a new feature for the Unicorn class, when you happened to find a fix for a bug that was causing Unicorns to stop sparkling on occasion. You really want this commit in master ASAP. Cherry-pick the commit with a sha of <code>3fbd473</code> to the master branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git cherry-pick <span class=\"number\">3f</span>bd473 <span class=\"comment\">//specify commit you want</span></div></pre></td></tr></table></figure>\n\n<p>We copied a single commit a single commit to the current branch</p>\n<h2 id=\"EDIT_A_CHERRY_PICK\"><strong>EDIT A CHERRY PICK</strong></h2>\n<blockquote>\n<p>You’ve realized that this commit <code>3fbd473</code>, which you need to cherry pick, has a rather vague message. Do another cherry-pick, but edit the commit message this time.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git cherry-pick --<span class=\"keyword\">edit</span> <span class=\"number\">3</span>fbd473</div></pre></td></tr></table></figure>\n\n<p>Then enter your message, save ,and quit.</p>\n<h2 id=\"CHERRY_PICK_SQUASH\"><strong>CHERRY PICK SQUASH</strong></h2>\n<blockquote>\n<p>1.You’ve fixed another bug that was causing the unicorn horn to be blunt instead of nice and sharp, but you had to make an extra commit to remove some debugging code. We want to convert these two commits to a single commit on the master branch. Cherry-pick commits <code>b447335</code>“ and <code>b59d285</code>, without committing them to the current branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> cherry-pick --<span class=\"built_in\">no</span>-commit b447335 b59d285</div></pre></td></tr></table></figure>\n\n<p><code>--no-commit</code> pulls in changes and stages them, but doesn’t commit</p>\n<blockquote>\n<p>2.The changes from both cherry picked commits are now on master, and all that’s left to do is to commit these changes. (Don’t forget the commit message!)</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">\"add both\"</span></span></div></pre></td></tr></table></figure>\n\n<h2 id=\"TRACKING_CHERRY_PICKS\"><strong>TRACKING CHERRY PICKS</strong></h2>\n<blockquote>\n<p>There has been a lot of cherry picking lately, so the decision has been made to keep track of where these commits are coming from. Cherry pick the “bug fix” commit with a sha of <code>bdf9578</code>. Use the option which keeps a record of where the commit was cherry picked.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> cherry-pick -x bdf9578</div></pre></td></tr></table></figure>\n\n<p><code>-x</code> adds source SHA to commit message.<br>Only useful with public branches; don’t use for local branches</p>\n<h2 id=\"SIGNING_OFF\"><strong>SIGNING OFF</strong></h2>\n<blockquote>\n<p>You’ve decided that it is probably a good idea to put your name on these commits you’re cherry picking. Go ahead and get started by cherry picking the commit with a sha of <code>bdf9578</code>. Don’t forget to use the option which will sign off on the cherry pick!</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">cherry</span><span class=\"literal\">-</span><span class=\"comment\">pick</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">signoff</span> <span class=\"comment\">bdf9578</span></div></pre></td></tr></table></figure>\n\n<p><code>--signoff</code> adds current user’s name to commit message.</p>\n<p><br></p>\n<h1 id=\"SUBMODULES\"><strong>SUBMODULES</strong></h1>\n<h2 id=\"BAD_WAYS_TO_SHARE_LIBRARIES\"><strong>BAD WAYS TO SHARE LIBRARIES</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/23.jpg\" alt=\"23\"></p>\n<h2 id=\"GIT_SUBMODULES\"><strong>GIT SUBMODULES</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/24.jpg\" alt=\"24\"></p>\n<h2 id=\"SUBMODULE\"><strong>SUBMODULE</strong></h2>\n<blockquote>\n<p>You’re in the process of putting together two websites. One is for the Mythical Wildlife Fund: <code>MWF.com</code>. The other site is an adoption site for stray unicorns called <code>unicornrescues.com</code>. Both sites will share code for a JavaScript image gallery along with the associated css. Let’s get started by adding a submodule containing the JavaScript at <code>&quot;git@petstore.com:gallery_js.git&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> submodule add git<span class=\"variable\">@petstore</span>.com:gallery_js.git</div></pre></td></tr></table></figure>\n\n<h2 id=\"STAGING_A_SUBMODULE\"><strong>STAGING A SUBMODULE</strong></h2>\n<blockquote>\n<p>All that’s left to do is to commit your submodule so that other collaborators can use it. Using a single git command, stage the current changes to <code>.gitmodules</code> and <code>gallery_js</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> -A</div></pre></td></tr></table></figure>\n\n<h2 id=\"COMMITTING_A_SUBMODULE\"><strong>COMMITTING A SUBMODULE</strong></h2>\n<blockquote>\n<p>Great! Now go ahead and commit the submodule. Don’t forget the commit message!</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">\"Add submodule\"</span></span></div></pre></td></tr></table></figure>\n\n<h2 id=\"INIT_SUBMODULE\"><strong>INIT SUBMODULE</strong></h2>\n<blockquote>\n<p>You’re helping a co worker get set up to work on unicornrescues.com. You’ve already cloned the repo. Next, initialize the submodules so they download their own contents.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule <span class=\"keyword\">init</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"UPDATE_SUBMODULES\"><strong>UPDATE SUBMODULES</strong></h2>\n<blockquote>\n<p>Now that you have the submodules initialized, you need to check for updates and make sure they have the correct commits checked out. Run the submodule command that does this.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git submodule <span class=\"keyword\">update</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"DETACHED_HEAD\"><strong>DETACHED HEAD</strong></h2>\n<blockquote>\n<p>You’ve just committed a few changes to the <code>gallery_css</code> submodule. When you go to push, you realize that you’re in a detached head state. Don’t panic, though! We can fix it. Let’s start out by creating a new branch with your most recent commit: “a7eded4”. Name the branch <code>temp_changes</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> branch temp_changes a7eded4</div></pre></td></tr></table></figure>\n\n<h2 id=\"BRANCH_MERGE\"><strong>BRANCH MERGE</strong></h2>\n<blockquote>\n<p>Your seemingly lost changes now reside on the <code>temp_changes</code> branch. Go ahead and merge the <code>temp_changes</code> branch back into master.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> temp_changes</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"PUSH_CHECK\"><strong>PUSH CHECK</strong></h2>\n<blockquote>\n<p>After finishing up a bunch of changes, you want to push them up to the remote so you can share it with your other co-workers that are working on the project. Since you’re using submodules, you should make sure to use the option which checks whether you have un-pushed submodules.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git push --recurse-submodules</span>=<span class=\"string\">check</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"ON_DEMAND_PUSH\"><strong>ON DEMAND PUSH</strong></h2>\n<blockquote>\n<p>We need to push submodule changes again. But this time, instead of going into the submodule to push it, just use the <code>on-demand</code> option for the <code>--recurse-submodules</code> option. This way submodules that need it will be pushed automatically.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> push --recurse-submodules=<span class=\"built_in\">on</span>-demand</div></pre></td></tr></table></figure>\n\n<h2 id=\"ON_DEMAND_ALIAS\"><strong>ON DEMAND ALIAS</strong></h2>\n<blockquote>\n<p>Wouldn’t it be nice if you didn’t have to type that long line out every time you wanted to push this project? Let’s make the command easier to use. Create an alias which will run the git push <code>--recurse-submodules=on-demand</code> command. Name the alias anything you want.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config <span class=\"keyword\">alias</span>.pushall <span class=\"string\">\"push --recurse-submodules=on-demand\"</span></div><div class=\"line\">git pushall</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"REFLOG\"><strong>REFLOG</strong></h1>\n<h2 id=\"THE_MISTAKE\"><strong>THE MISTAKE</strong></h2>\n<blockquote>\n<p>You decided that unicorns should leave a rainbow trail when they jump. You made the upgrade, and committed the changes. There is a problem, though: this change caused a bug which prevents the unicorns from jumping at all. You panic! Hurry, do a “hard reset” back to the commit before the rainbow jumping was added: <code>&quot;ab27026&quot;</code>.<br>$ git log —oneline<br>8791492 Rainbow trail when jumping.<br>ab27026 Implement unicorn jumping.<br>…..</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--hard ab27026</span></span></div></pre></td></tr></table></figure>\n\n<h2 id=\"REFLOG-1\"><strong>REFLOG</strong></h2>\n<blockquote>\n<p>You realize after the fact that maybe the hard reset was a bit overkill. You still wanted your code used to add rainbow jumps. It’s a good thing git never really gets rid of commits. Let’s look at the reflog to see if there is anything we can do.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/25.jpg\" alt=\"25\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reflog <span class=\"comment\">//查看</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/26.jpg\" alt=\"26\"></p>\n<h2 id=\"RESETTING_THE_REFLOG\"><strong>RESETTING THE REFLOG</strong></h2>\n<blockquote>\n<p>Great, we can see that there is a log of the reset! Take note of the reflog entry right before your earlier reset. Then do a “hard reset” to that commit to get your work back.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> --hard <span class=\"number\">8791492</span> // git <span class=\"keyword\">reset</span> --hard HEAD<span class=\"variable\">@{1}</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"DELETING_A_BRANCH\"><strong>DELETING A BRANCH</strong></h2>\n<blockquote>\n<p>You decide to clean house a bit. You know that all branches have either been merged or abandoned, so you’re going to delete them to keep a tidy repository. Go ahead and get started by deleting the <code>fluffy_poodle</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -<span class=\"keyword\">D</span> fluffy_poodle</div></pre></td></tr></table></figure>\n\n<h2 id=\"WALKING_REFLOGS\"><strong>WALKING REFLOGS</strong></h2>\n<blockquote>\n<p>Then you realize that you needed the styles menu from that <code>fluffy_poodle</code> branch you just deleted. Good thing git never really gets rid of anything. List all commits in the reflog by using the <code>--walk-reflogs</code> option of git log.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/27.jpg\" alt=\"27\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> --walk-reflogs <span class=\"comment\">//查看</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"BRANCH_RECOVERY\"><strong>BRANCH RECOVERY</strong></h2>\n<blockquote>\n<p>Now that you know what the last commit was on the deleted branch, you can create a new branch and attach the commit to it. Create a new branch named <code>fluffy_poodle</code> using the most recent commit from the deleted branch.<br>$ git log —walk-reflogs —oneline<br>b8ec575 HEAD@{0}: checkout: moving from fluffy_poodle to master<br>aaafb5e HEAD@{1}: commit: Fluff poodle.<br>….</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch fluffy_poodle HEAD<span class=\"variable\">@{1}</span> <span class=\"comment\">//git branch fluffy_poodle aaafb5e</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/Git Real 2.markdown","raw":"---\nlayout: post\ntitle: \"Git Real 2\"\ndate: 2014-11-09 12:18\ncomments: true\ntags: \n\t- git\n\n---\n\n![0](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg)\n#**INTERACTIVE REBASE**#\n##**REBASE RECAP**###\n> So you've been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.\n<!--more-->\n```\ngit rebase master\n```\n\n##**INTERACTIVE REBASE**###\n> You're getting ready to merge in your feature branch, but first you want to clean up your commits a bit. Go ahead and use interactive rebase to edit your last 4 commits.\n\n```\ngit rebase -i HEAD~4  /*alter commits in the same branch*/\n```\nWe want to re-order these four commits.\n\n\n##**COMMIT ORDERING**###\n> You notice a critical error on your part. The commit where you wrote tests comes after the commit where you made the actual changes. Let's swap these 2 commits so that it looks like you wrote the tests first. Swap the 'Add tests' commit so that it comes before the 'Implement poodles' commit.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick f239187 Implement poodles  //change to pick 4b65a5a Add tests \npick 4b65a5a Add tests          //change to pick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\nSwap the order,save and close the editor.Commits get replayed in new order.\n\n##**REWORDING A COMMIT**###\n> 1.As you're editing your commits, you notice that the commit that says 'Add tests' is a little vague, maybe you should change it to something more specific. Use the reword command to change the message of this commit.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick 4b65a5a Add tests // reword 4b65a5a Add tests\npick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\nCommands:\np, pick = use commit\nr, reword = use commit, but edit the commit message\ne, edit = use commit, but stop for amending\ns, squash = use commit, but meld into previous commit\nf, fixup = like \"squash\", but discard this commit's log message\nx, exec = run command (the rest of the line) using shell\n\n> 2.After setting the `reword` command in the interactive rebase editor **another editor window has opened up**. This is where you actually change the commit message. Go ahead and change the commit message to: `Add tests for poodles` to be more descriptive.\n\n`editor:`\n```\nAdd tests //Add tests for poodles\n```\n##**SPLIT COMMITS**###\n> 1.You remember that the 'Add unicorn' commit also contains the testing changes. Since we have separate commits for adding tests for poodles it makes sense to split out the test changes into a separate commit. Tell git to stop at this commit so we can reorganize it a bit.\n\n`editor:`\n```\npick b3f1649 Add unicorn   //edit b3f1649 Add unicorn\npick 4b65a5a Added tests for poodles\npick f239187 Implement poodles\npick c3f863f Added a title to the homepage\n```\n> 2.After saving the interactive rebase text file, git has stopped at the 'Add unicorn' commit. The first thing we need to do is to reset back to the previous commit, so the changes in the most recent commit are back in the file and unstaged.\n\n```\ngit reset HEAD^ \n```\n\n> 3.Great! You've already re-committed the changes needed in 2 different commits. All that's left to do is to resume the rebase with the continue option.\n\n```\ngit rebase --continue\n```\nOne commit is now two.\n\n##**SQUASHING COMMITS**###\n> 1.You noticed another bug with those pesky poodles, so you've gone ahead and fixed it, making another commit in the process. Now you have 2 commits that both affect the poodles page. You should squash them into one commit to simplify your git logs.\n\n`editor:`\n```\npick b3f1649 Add unicorn\npick 4b65a5a Add tests\npick f239187 Implement poodles\npick c3f863f Add title to poodle page //squash c3f863f Add title to poodle page\n```\n\n> 2.After designating a commit to be squashed, another editor pops up enabling you to set a commit message for the resulting commit. Go ahead and set to: `squashed some poodles`.\n\n`editor:`\n\n```\n//This is a combination of 2 commits.\n//The first commit's message is:\n\nImplement poodles //注释掉\n\n//This is the 2nd commit message:\n\nAdd title to poodle page //注释掉\n\n//合并成你想的名字：\nsquashed some poodles\n```\n\nThe content of two commits is replayed, but only one commit is made.\n<br>\n#**STASHING**#\n##**GIT STASH**###\n> You're not quite ready to commit what you're working on, but need to make a quick fix to master. Fear not, just stash your current changes so you can switch to master quick.\n\n```\ngit stash save  // = git stash\n```\n\n##**GIT STASH LIST**###\n> You just finished making those quick changes to master. You're now ready to resume your work on the feature you had started on before you had to fix master. Let's first list all the stashes to make sure we get the right one.\n\n```\ngit stash list   //stash names are shown in the list \n```\n\n##**GIT STASH APPLY**###\n> Great! As you can see, your stash is in the stash list. Let's apply the stash so you can get back to work.\n\n```\ngit stash apply stash@{0} // = git stash apply\n```\n`stash@{0}` is the default.\nstash has been applied but it's still here.\n##**GIT STASH DROP**###\n> Ok, so now that you have all your stashed changes back, let's clean up the stash list. There's only one stash; go ahead and drop it.\n\n```\ngit stash drop  //Delete stash@{0} from list\ngit stash clear //Clear all of them at once\n```\n##**CONFLICTS**###\n> 1.You came back from master and resumed working on your feature, when you realize that you forgot to apply your saved stash. Go ahead and apply it now.\n\n```\ngit stash apply\n```\n\n> 2.Uh oh! There was a conflict when trying to apply your previous stash. It's no problem, you were just trying things anyway. Go ahead and do a hard reset back to the last commit.\n\n```\ngit reset --hard HEAD\ngit stash apply\n```\n\n##**GIT STASH POP**###\n> Now that you have the file reset, use the `pop` command to **apply and delete the stash at the same time**. \n\n```\ngit stash pop \n```\n\n##**KEEPING THE INDEX**###\n> You need to swap branches again, but this time some of your changes are ready to be committed. Stash all the unstaged changes, but leave the staged changes intact so they can be committed afterwards.\n\n```\ngit stash save --keep-index //cause the staging area not to be stashed\n```\n\n##**INCLUDE UNTRACKED**###\n> Wow, there are so many small fixes on master today! You really need to stash some more changes, but it doesn't seem to be working on these untracked files you just created. Try using the `--include-untracked` option to stash all those new files.\n\n```\ngit stash save --include-untracked //cause untracked files to be stashed,too\n```\n\n##**LIST OPTIONS**###\n> You've been stashing stuff all day since you keep having to make small quick fixes to master. Now you have a bunch of stashed changes and you're not sure which one you need to apply. You could look through them all one by one, or you could use the `--stat` option to list information about each stash. Give that a try.\n```\ngit stash list --stat //summarizes file changes\n```\n##**STASH DETAILS**###\n> You now have a list of stashes that are showing you more information, and you think you may have spotted the stash that you need. Take a more detailed look at the stash@{2} stash with the `--patch` option.\n\n```\ngit stash show stash@{2} --patch //show file differents\n```\n##**STASH MESSAGE**###\n> You're halfway through a large feature. Your team has decided that they want you to deploy what you have so far, but you have a smaller unfinished feature that isn't ready to be committed yet. Go ahead and stash your current changes with the **message `Added groom method`**, so you know which stash has your changes.\n\n```\ngit stash save \"Added groom method\" \n```\n##**STASH BRANCHING**###\n> Now that you've deployed the main part of your feature, you need to finish up what is left. Create a new branch named `poodle` and apply your most current stash all in one command.\n\n```\ngit stash branch poodle stash@{0}\n```\n`git stash branch`checks a new branch out automatically, and drops the stash automatically.\n<br>\n#**PURGING HISTORY**#\n![17](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/17.jpg)\n##**REPO COPY**###\n> Now you've done it. You accidentally put the company's master password into one of your files. You're beginning to panic because you know that it's pretty hard to delete something forever in git. That's what you really need to do, though, or you're in big trouble. You're going to need to purge the history. First, though, make a copy of your repo in case you mess it up. Make a copy of the `poodles` repository, and name it whatever you want.\n\n```\ngit clone poodles poodles_copy\n```\n\n##**TREE FILTER**###\n> Luckily for you, the password you accidentally committed was in the `master_password.txt` file. Use the `filter-branch` command and remove this file from all of your commits.\n\n```\n//git filter-branch --tree-filter <command> ... \n//specify any shell commend\ngit filter-branch --tree-filter 'rm -f master_password.txt'\n```\n`...`: \n\n- `--all` option filter all commits in all branches.\n- `HEAD` filter only current branch.\n\nGit will check each commit out into **working directory**, run your command, and re-commit.\n\n##**INDEX FILTER**###\n> This repository is so large, using `--tree-filter` is going to take all day. Use `--index-filter` to remove `master_password.txt` instead. Remember, `--index-filte`r will need a command that works on the staging area, which is going to be some sort of git command.\n\n```\n//git filter-branch --index-filter <command> ...\n//command must operate on staging area.\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch master_password.txt'\n```\nIt operates on **staging area**. \n`--ignore-unmatch`: succeeds even if file isn't present.\nGit will run your command against each commit, but without checking it out first(so it's faster).\n##**FORCE**###\n> You just realized that you also have a `master_username.txt` file that should probably be removed too, just to be safe. Use either technique you have learned to remove this file. Don't forget, you have a history backup from the first time you used `filter-branch`. Use the correct option to force git to overwrite it.\n\nAfter you run filter-branch, Git leaves a backup of your tree in the \".git\" directory.By default, you can't run filter-branch again because it won't overwrite the backup.You can force it with the -f option.\n```\ngit filter-branch -f --tree-filter 'git rm --cached --ignore-unmatch master_username.txt'\n```\n\n##**PRUNING**###\n> Great! Now we're getting somewhere. There is one more problem though, you realize that some of the commits don't contain anything anymore, since you removed the password file that they referenced. You should probably use the `--prune-empty` option do something to clean these out.\n\n```\ngit filter-branch -f --prune-empty\n```\n`--prune-empty` option drops commits that don't alter any files.\n\n<br>\n#**WORKING TOGETHER**#\n\n##**LINE ENDINGS**###\n> 1.Your company just hired a new developer who works on a Windows computer, and you notice that some files seem to be missing line separators. You realize that the Windows machine is saving files with a different line separator character than the Unix stations. Here on your Unix machine, set your 'git config' variable to convert line endings to the Unix way on commit.\n\n![18](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/18.jpg)\n\n```\ngit config --global core.autocrlf input\n```\n\n> 2.Because you're a nice person, you decide to go help the new developer convert line endings to work on his windows computer. Set the `git config` variable to convert line endings from Unix to Windows formats on checkout.\n\n```\ngit config --global core.autocrlf true\n```\n![19](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/19.jpg)\n> 3.After helping a 3rd Windows developer set up their workstation, you've decided enough is enough. It's time to add a `.gitattributes` file to handle all these line ending problems. Finish adding the options to the `*.bat` and `*.sh files`. Remember, `*.bat` is a windows file, while `*.sh` is a unix file.\n\n![20](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/20.jpg)\n\n`text=auto` Choose conversion automatically\n`text` Treat files as text -convert to OS's line endings back to LF on commit\n`text eol = crlf` `text eol = lf` Convert to specified format on checkout back to LF commit\n`binary` Treat files as binary - do no conversion\n\n![21](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/21.jpg)\n\n##**CHERRY PICKING**###\n![22](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/22.jpg)\n> You were working on a new feature for the Unicorn class, when you happened to find a fix for a bug that was causing Unicorns to stop sparkling on occasion. You really want this commit in master ASAP. Cherry-pick the commit with a sha of `3fbd473` to the master branch.\n\n```\ngit cherry-pick 3fbd473 //specify commit you want\n```\nWe copied a single commit a single commit to the current branch\n##**EDIT A CHERRY PICK**###\n\n> You've realized that this commit `3fbd473`, which you need to cherry pick, has a rather vague message. Do another cherry-pick, but edit the commit message this time.\n\n```\ngit cherry-pick --edit 3fbd473\n```\nThen enter your message, save ,and quit.\n\n\n##**CHERRY PICK SQUASH**###\n> 1.You've fixed another bug that was causing the unicorn horn to be blunt instead of nice and sharp, but you had to make an extra commit to remove some debugging code. We want to convert these two commits to a single commit on the master branch. Cherry-pick commits `b447335`\" and `b59d285`, without committing them to the current branch.\n```\ngit cherry-pick --no-commit b447335 b59d285\n```\n`--no-commit` pulls in changes and stages them, but doesn't commit\n\n> 2.The changes from both cherry picked commits are now on master, and all that's left to do is to commit these changes. (Don't forget the commit message!)\n\n```\ngit commit -m \"add both\"\n```\n##**TRACKING CHERRY PICKS**###\n> There has been a lot of cherry picking lately, so the decision has been made to keep track of where these commits are coming from. Cherry pick the \"bug fix\" commit with a sha of `bdf9578`. Use the option which keeps a record of where the commit was cherry picked.\n\n```\ngit cherry-pick -x bdf9578\n```\n`-x` adds source SHA to commit message.\nOnly useful with public branches; don't use for local branches\n\n##**SIGNING OFF**###\n> You've decided that it is probably a good idea to put your name on these commits you're cherry picking. Go ahead and get started by cherry picking the commit with a sha of `bdf9578`. Don't forget to use the option which will sign off on the cherry pick!\n\n```\ngit cherry-pick --signoff bdf9578\n```\n`--signoff` adds current user's name to commit message.\n\n<br>\n#**SUBMODULES**#\n##**BAD WAYS TO SHARE LIBRARIES**###\n![23](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/23.jpg)\n##**GIT SUBMODULES**###\n![24](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/24.jpg)\n##**SUBMODULE**###\n> You're in the process of putting together two websites. One is for the Mythical Wildlife Fund: `MWF.com`. The other site is an adoption site for stray unicorns called `unicornrescues.com`. Both sites will share code for a JavaScript image gallery along with the associated css. Let's get started by adding a submodule containing the JavaScript at `\"git@petstore.com:gallery_js.git\"`.\n\n```\ngit submodule add git@petstore.com:gallery_js.git\n```\n\n##**STAGING A SUBMODULE**###\n> All that's left to do is to commit your submodule so that other collaborators can use it. Using a single git command, stage the current changes to `.gitmodules` and `gallery_js`.\n\n```\ngit add -A\n```\n\n##**COMMITTING A SUBMODULE**###\n> Great! Now go ahead and commit the submodule. Don't forget the commit message!\n\n```\ngit commit -m \"Add submodule\"\n```\n\n##**INIT SUBMODULE**###\n> You're helping a co worker get set up to work on unicornrescues.com. You've already cloned the repo. Next, initialize the submodules so they download their own contents.\n\n```\ngit submodule init\n```\n\n##**UPDATE SUBMODULES**###\n> Now that you have the submodules initialized, you need to check for updates and make sure they have the correct commits checked out. Run the submodule command that does this.\n\n```\ngit submodule update\n```\n\n##**DETACHED HEAD**###\n> You've just committed a few changes to the `gallery_css` submodule. When you go to push, you realize that you're in a detached head state. Don't panic, though! We can fix it. Let's start out by creating a new branch with your most recent commit: \"a7eded4\". Name the branch `temp_changes`.\n\n```\ngit branch temp_changes a7eded4\n```\n\n##**BRANCH MERGE**###\n> Your seemingly lost changes now reside on the `temp_changes` branch. Go ahead and merge the `temp_changes` branch back into master.\n\n```\ngit merge temp_changes\n```\n\n##**PUSH CHECK**###\n> After finishing up a bunch of changes, you want to push them up to the remote so you can share it with your other co-workers that are working on the project. Since you're using submodules, you should make sure to use the option which checks whether you have un-pushed submodules.\n\n```\ngit push --recurse-submodules=check\n```\n\n##**ON DEMAND PUSH**###\n> We need to push submodule changes again. But this time, instead of going into the submodule to push it, just use the `on-demand` option for the `--recurse-submodules` option. This way submodules that need it will be pushed automatically.\n\n```\ngit push --recurse-submodules=on-demand\n```\n\n##**ON DEMAND ALIAS**###\n> Wouldn't it be nice if you didn't have to type that long line out every time you wanted to push this project? Let's make the command easier to use. Create an alias which will run the git push `--recurse-submodules=on-demand` command. Name the alias anything you want.\n\n```\ngit config alias.pushall \"push --recurse-submodules=on-demand\"\ngit pushall\n```\n\n<br>\n#**REFLOG**#\n##**THE MISTAKE**###\n> You decided that unicorns should leave a rainbow trail when they jump. You made the upgrade, and committed the changes. There is a problem, though: this change caused a bug which prevents the unicorns from jumping at all. You panic! Hurry, do a \"hard reset\" back to the commit before the rainbow jumping was added: `\"ab27026\"`.\n$ git log --oneline\n8791492 Rainbow trail when jumping.\nab27026 Implement unicorn jumping.\n.....\n\n```\ngit reset --hard ab27026\n```\n\n##**REFLOG**###\n> You realize after the fact that maybe the hard reset was a bit overkill. You still wanted your code used to add rainbow jumps. It's a good thing git never really gets rid of commits. Let's look at the reflog to see if there is anything we can do.\n\n![25](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/25.jpg)\n```\ngit reflog //查看\n```\n![26](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/26.jpg)\n\n##**RESETTING THE REFLOG**###\n> Great, we can see that there is a log of the reset! Take note of the reflog entry right before your earlier reset. Then do a \"hard reset\" to that commit to get your work back.\n\n```\ngit reset --hard 8791492 // git reset --hard HEAD@{1}\n```\n\n##**DELETING A BRANCH**###\n> You decide to clean house a bit. You know that all branches have either been merged or abandoned, so you're going to delete them to keep a tidy repository. Go ahead and get started by deleting the `fluffy_poodle` branch.\n\n```\ngit branch -D fluffy_poodle\n```\n\n##**WALKING REFLOGS**###\n> Then you realize that you needed the styles menu from that `fluffy_poodle` branch you just deleted. Good thing git never really gets rid of anything. List all commits in the reflog by using the `--walk-reflogs` option of git log.\n\n![27](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/27.jpg)\n\n```\ngit log --walk-reflogs //查看\n```\n\n##**BRANCH RECOVERY**###\n> Now that you know what the last commit was on the deleted branch, you can create a new branch and attach the commit to it. Create a new branch named `fluffy_poodle` using the most recent commit from the deleted branch.\n$ git log --walk-reflogs --oneline\nb8ec575 HEAD@{0}: checkout: moving from fluffy_poodle to master\naaafb5e HEAD@{1}: commit: Fluff poodle.\n....\n\n```\ngit branch fluffy_poodle HEAD@{1} //git branch fluffy_poodle aaafb5e\n```","slug":"Git Real 2","updated":1426576962000,"excerpt":"<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/0.jpg\" alt=\"0\"></p>\n<h1 id=\"INTERACTIVE_REBASE\"><strong>INTERACTIVE REBASE</strong></h1>\n<h2 id=\"REBASE_RECAP\"><strong>REBASE RECAP</strong></h2>\n<blockquote>\n<p>So you’ve been working on your feature branch for a couple days and you realize you need to bring commits back in from master. Now you could just merge in the branch but that would create an ugly merge commit. Use rebase to bring those changes into your branch without the merge commit.<br>","_id":"ay3nkqn23hln5yme","categories":[],"photos":[],"link":""},{"layout":"post","title":"Git Real","date":1415420280000,"comments":true,"tags":["jo5s27qsjbx7afo7"],"content":"<h1 id=\"STAGING_&amp;_REMOTES\"><strong>STAGING &amp; REMOTES</strong></h1>\n<h2 id=\"UNSTAGED_DIFFERENCES\"><strong>UNSTAGED DIFFERENCES</strong></h2>\n<blockquote>\n<p>A new file has been added to the site. Run the command to see what all has changed since your last commit.</p>\n</blockquote>\n<p><code>git status</code> will list out which files have changed. If we want to see the actual changes:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<h2 id=\"STAGE_NEW_FILE\"><strong>STAGE NEW FILE</strong></h2>\n<blockquote>\n<p>There it is: <code>ostrich.html</code>. Stage it to be committed.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> ostrich.html</div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a></p>\n<h2 id=\"STAGED_DIFFERENCES\"><strong>STAGED DIFFERENCES</strong></h2>\n<blockquote>\n<p>We’ve added <code>ostrich.html</code> to the staging area, but your co-worker has stopped by and asked to see the new page first. Run a <code>diff</code> on the staged changes.</p>\n</blockquote>\n<p><code>git diff</code> is great for seeing <strong>unstaged differences</strong> since last commit, but you need the <code>--staged</code> option in order to see staged changes.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">diff</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">staged</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"UNSTAGE_FILES\"><strong>UNSTAGE FILES</strong></h2>\n<blockquote>\n<p>“Wait,” says the co-worker. “They didn’t tell you? The client “wants the ostrich section pulled - they couldn’t get a license to “sell them.” Better unstage <code>ostrich.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> HEAD ostrich.html</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"SKIP_STAGING\"><strong>SKIP STAGING</strong></h2>\n<blockquote>\n<p>We’ve modified the <code>index.html</code> file, adding a link to the cats section. Since that file is already tracked, you can just skip staging and commit it with one command.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit <span class=\"operator\">-a</span> -m <span class=\"string\">\"index.html adding a link\"</span></div></pre></td></tr></table></figure>\n\n<p><code>-a</code>: Add changes from all tracked files. Doesn’t add new(untracked) files.</p>\n<h2 id=\"ADD_TO_COMMIT\"><strong>ADD TO COMMIT</strong></h2>\n<blockquote>\n<p>Whoops! We forgot to add the <code>cats.html</code> page that <code>index.html</code> links to, and it should really be <code>amended</code> on the same commit. To do this, let’s first stage <code>cats.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> cats.html</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Second, let’s add <code>cats.html</code> to the prior commit and change the commit message in one step. </p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m \"modified index.html & add cats.html\"</span></span></div></pre></td></tr></table></figure>\n\n<p>You don’t want to make a new commit, you want to amend the previous one, so what I’m trying to say is: Use the amend option(<strong>add to the last commit</strong>)<br>Whatever has been staged is added to last commit!</p>\n<h2 id=\"ROLL_BACK_COMMIT\"><strong>ROLL BACK COMMIT</strong></h2>\n<blockquote>\n<p>Wait, you’re getting word that the cats section might be cancelled. <strong>Undo the commit, and put the files back in staging.</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">reset</span> <span class=\"comment\">--soft HEAD^</span></span></div></pre></td></tr></table></figure>\n\n<p><code>soft</code>: Reset into staging<br><code>HEAD^</code>: Move to commit before ‘HEAD’<br>Now I can make changes, and re-commit</p>\n<h2 id=\"DISCARD_CHANGES\"><strong>DISCARD CHANGES</strong></h2>\n<blockquote>\n<p>Forget the whole thing - the client’s license to sell cats is suspended during some kind of “investigation”. Discard your changes to <code>cats.html</code> and <code>index.html</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- cats.html <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<p>Blow away all changes since last commit.</p>\n<h2 id=\"REMOVE_COMMIT\"><strong>REMOVE COMMIT</strong></h2>\n<blockquote>\n<p>1.The next feature is a banner on the main page, saying the pet shop will soon be offering badgers. Add and commit <code>index.html</code> in one step, skipping the staging area.<br>2.Your co-worker is back, looking sheepish. “Never mind the badgers ad. The client’s legal department said that was a liability risk.” <strong>You’ll need to remove the most recent commit, and all its changes.</strong></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">commit</span> -am <span class=\"string\">\"add index.html\"</span></span></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD^</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"NEW_REMOTE_REPOS_AND_PUSH\"><strong>NEW REMOTE REPOS AND PUSH</strong></h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add <span class=\"variable\">&lt;name&gt;</span> <span class=\"variable\">&lt;address&gt;</span> /<span class=\"keyword\">*</span>To add new remotes<span class=\"keyword\">*</span>/</div><div class=\"line\">git remote rm <span class=\"variable\">&lt;name&gt;</span> /<span class=\"keyword\">*</span>To remove remotes<span class=\"keyword\">*</span>/</div><div class=\"line\">git remote -v /<span class=\"keyword\">*</span>show remote repositories<span class=\"keyword\">*</span>/</div><div class=\"line\">git push -u <span class=\"variable\">&lt;name&gt;</span> <span class=\"variable\">&lt;branch&gt;</span> /<span class=\"keyword\">*</span>To push to remotes. The -u tells Git to remember the parameters, so that next time we can simply run git push <span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"CLONING_&amp;_BRANCHING\"><strong>CLONING &amp; BRANCHING</strong></h1>\n<h2 id=\"CLONE_A_REPO\"><strong>CLONE A REPO</strong></h2>\n<blockquote>\n<p>The IT department installed an OS update on your workstation - and wiped the hard drive in the process. Clone the Pet Shop repo from <code>git@example.com:example/petshop.git</code> so you can resume work.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> clone git<span class=\"variable\">@example</span>.com:example/petshop.git</div></pre></td></tr></table></figure>\n\n<h2 id=\"LIST_REMOTES\"><strong>LIST REMOTES</strong></h2>\n<blockquote>\n<p>Our repo is cloned locally, but how do we check to a list of our remotes? Lets get a list of all our remotes with a verbose output.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v /<span class=\"keyword\">*</span>show remote repositories<span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<h2 id=\"CREATE_A_BRANCH\"><strong>CREATE A BRANCH</strong></h2>\n<blockquote>\n<p>We need to add a section for the pet grooming salon on the site. You want to isolate this new feature from your other work. Create a new branch named <code>grooming</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> branch grooming</div></pre></td></tr></table></figure>\n\n<h2 id=\"SWITCH_TO_BRANCH\"><strong>SWITCH TO BRANCH</strong></h2>\n<blockquote>\n<p>You’ve made the new branch, but your commits are still going to the old one. Switch to the <code>grooming</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout grooming</div></pre></td></tr></table></figure>\n\n<h2 id=\"COMBINE_BRANCH\"><strong>COMBINE BRANCH</strong></h2>\n<blockquote>\n<p>You’ve finished work on the <code>grooming</code> branch and are ready to bring your work back into <code>master</code>. First, check out the master branch…<br>Then,bring your changes from the grooming branch into the …master branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> grooming</span></div><div class=\"line\">git branch -d grooming <span class=\"comment\">/*delete the local branch*/</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"BRANCH_SHORTCUTS\"><strong>BRANCH SHORTCUTS</strong></h2>\n<blockquote>\n<p>The pet shop wants to try selling yet another product line! Let’s do this one in a branch in case it gets cancelled like the others. Using a single command, create and check out an <code>octopus</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout -b octopus</div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"COLLABORATION_BASICS\"><strong>COLLABORATION BASICS</strong></h1>\n<h2 id=\"SEND_CHANGES\"><strong>SEND CHANGES</strong></h2>\n<blockquote>\n<p>You’ve committed some work so now it’s time to share! Push it out for your co-workers to see.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">push</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"GET_CHANGES\"><strong>GET CHANGES</strong></h2>\n<blockquote>\n<p>Looks like your co-worker pushed some changes before you did! Your push was rejected. Retrieve the latest changes, and merge them into your branch in one step.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> pull</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/1.pull.jpg\" alt=\"1.pull\"></p>\n<h2 id=\"FIX_CONFLICTS\"><strong>FIX CONFLICTS</strong></h2>\n<blockquote>\n<p>Git is reporting a conflict with your co-worker’s changes in “readme”. Just discard his changes, and keep your own (the HEAD).</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/2.jpg\" alt=\"2\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/3.jpg\" alt=\"3\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/4.jpg\" alt=\"4\"></p>\n<p><br></p>\n<h1 id=\"BRANCHING\"><strong>BRANCHING</strong></h1>\n<h2 id=\"PUSH_BRANCH\"><strong>PUSH BRANCH</strong></h2>\n<blockquote>\n<p>A new kind of pet is for sale at the store! Maybe this one will catch on with the public. You’ve committed your work to the local <code>hamsters</code> branch; now publish this branch in the <code>origin</code> repo.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">push</span> origin hamsters</div></pre></td></tr></table></figure>\n\n<p>Links locak branch to the remote branch(tracking)</p>\n<h2 id=\"GET_REMOTE_BRANCH\"><strong>GET REMOTE BRANCH</strong></h2>\n<blockquote>\n<p>“git branch -r” does not query the remotes to check for new branches. In order to see a new remote branch you first have to do a fetch or a pull. So retrieve the remote “weasel” branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<p>Pull seems like a good choice, but pull will auto merge branches, you only want to update your local branch information, so use fetch instead</p>\n<h2 id=\"REMOTE_BRANCHES\"><strong>REMOTE BRANCHES</strong></h2>\n<blockquote>\n<p>Your co-worker said he wants you to look over a new branch on “origin”, but he didn’t tell you its name. Get a list of remote branches.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -<span class=\"keyword\">r</span> /*<span class=\"keyword\">list</span> <span class=\"keyword\">all</span> remote branches*/</div></pre></td></tr></table></figure>\n\n<h2 id=\"DELETE_ON_REMOTE\"><strong>DELETE ON REMOTE</strong></h2>\n<blockquote>\n<p>Guess how the product launch went with the weasels? Better delete the “weasel” branch on “origin”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin <span class=\"symbol\">:weasel</span></div></pre></td></tr></table></figure>\n\n<p>Use git push to delete the <strong>remote branch</strong></p>\n<h2 id=\"BRANCH_STATUS\"><strong>BRANCH STATUS</strong></h2>\n<blockquote>\n<p>Wait, did you already pull that branch locally? Check for stale branches that are tracking “origin”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"literal\">show</span> origin <span class=\"comment\">/* show the state of your branches*/</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"CLEAN_BRANCHES\"><strong>CLEAN BRANCHES</strong></h2>\n<blockquote>\n<p>You still have a stale local branch tracking the now-deleted <code>origin/weasel</code>. Clean up your local references.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote prune origin /<span class=\"keyword\">*</span> remove deleted remote<span class=\"keyword\">*</span>/</div></pre></td></tr></table></figure>\n\n<h2 id=\"LIST_TAGS\"><strong>LIST TAGS</strong></h2>\n<blockquote>\n<p>With the weasel threat eliminated, the pet store wants to deploy the site. Let’s see, what was the previous version number? Display the tags to find out.Create a tag accordingly</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span>  /*<span class=\"keyword\">list</span> <span class=\"keyword\">all</span> <span class=\"keyword\">tags</span>*/</div></pre></td></tr></table></figure>\n\n<h2 id=\"CREATE_TAG\"><strong>CREATE TAG</strong></h2>\n<blockquote>\n<p>Ah, yes, the last release was “v1.3.1”. You’ve added the hamsters, so it would be best to release this as “v1.3.2”. Create a tag accordingly.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span> -<span class=\"keyword\">a</span> v1.<span class=\"number\">3.2</span> -<span class=\"keyword\">m</span> <span class=\"string\">\"version 0.03\"</span>  /*<span class=\"built_in\">add</span> <span class=\"keyword\">a</span> <span class=\"keyword\">new</span> <span class=\"keyword\">tag</span>*/</div></pre></td></tr></table></figure>\n\n<h2 id=\"SEND_TAGS\"><strong>SEND TAGS</strong></h2>\n<blockquote>\n<p>Push your tag to origin.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push --<span class=\"keyword\">tags</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"RETRIEVE_TAG\"><strong>RETRIEVE TAG</strong></h2>\n<blockquote>\n<p>The client is requesting that you roll back to the prior release. (Seriously? What could have gone wrong with the hamsters?) Retrieve the release tagged “v1.3.1”.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout v1.<span class=\"number\">3</span>.<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"REBASE_BELONG_TO_US\"><strong>REBASE BELONG TO US</strong></h1>\n<h2 id=\"REBASE\"><strong>REBASE</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/7.jpg\" alt=\"7\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/8.jpg\" alt=\"8\"></p>\n<blockquote>\n<p>You’ve made some commits to a feature branch, but you’ve also committed a hotfix on master that would make a merge messy. Check out the <code>kennel</code> branch so you can rebase it on <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout kennel</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>OK, you’re on the <code>kennel</code> branch. Our goal is to be able to merge <code>kennel</code> back into <code>master</code> without conflicts or a merge commit. Rebase the current <code>kennel</code> branch on <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase master</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>With the rebase complete, <code>kennel</code> should merge with <code>master</code> cleanly. Switch branches back to <code>master</code>.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> checkout master</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>We’re on master, and we know the <code>kennel</code> will merge cleanly. Go ahead and merge in the <code>kennel</code> branch.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"operator\"><span class=\"keyword\">merge</span> kennel</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"REMOTE\"><strong>REMOTE</strong></h2>\n<blockquote>\n<p>Your co-worker has pushed changes to the <code>master</code> branch on the <code>origin</code> repo. Retrieve it without merging it so we can replay our work on top of it.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/5.jpg\" alt=\"5\"></p>\n<blockquote>\n<p>Now that your local repo knows of the latest changes on origin/master, move your master commits after the commits from origin/master.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase</div></pre></td></tr></table></figure>\n\n<p>Use <code>git rebase</code> to apply your local commits ahead of those on origin/master.Current branch master is up to date. Success!<br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/6.jpg\" alt=\"6\"></p>\n<h2 id=\"CONFLICT\"><strong>CONFLICT</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/9.jpg\" alt=\"9\"></p>\n<blockquote>\n<p>Your co-worker has pushed before you yet again. Better fetch the changes…</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> fetch</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now run another rebase to move your commit after the latest fetched one.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> rebase</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Uh, oh! Looks like the rebase is in conflict this time! Edit <code>index.html</code> to fix the conflicting lines. We want to keep our version with <code>Cats</code> and <code>Dogs</code>.</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=\"en\"&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;title&gt;Our Cat-alog&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;nav&gt;</div><div class=\"line\">      &lt;ul&gt;</div><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD   &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"cat.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"dog.html\"&gt;Dogs&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">======= &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"cat.html\"&gt;Felines&lt;/a&gt;&lt;/li&gt;   &lt;!--删除 --&gt;</div><div class=\"line\">        &lt;li&gt;&lt;a href=\"dog.html\"&gt;Canines&lt;/a&gt;&lt;/li&gt;   &lt;!--删除 --&gt;</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add dogs.  &lt;!--删除 --&gt;</div><div class=\"line\">      &lt;/ul&gt;</div><div class=\"line\">    &lt;/nav&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now mark the conflicts in “index.html” as resolved.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now that all conflicts have been resolved and those files added, continue the current rebase in process.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rebase --<span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n\n<p><br></p>\n<h1 id=\"HISTORY_AND_CONFIGURATION\"><strong>HISTORY AND CONFIGURATION</strong></h1>\n<blockquote>\n<p>1.All those e-mail addresses and SHAs are making it hard to see commit messages in your history. Try viewing the log with one commit per line.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> <span class=\"comment\">--pretty=oneline</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.The client called with an urgent question about chew toys, and now you can’t remember what you last modified. Bring up a summary of file changes.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<p>‘git log’ will show you your past commits, but it doesn’t show you any changes in files, that’s what ‘git diff’ is for.</p>\n<blockquote>\n<p>3.You’ve finished adding elephants to the catalog. You need to write up a change log for the client, and you want to ensure you don’t miss anything. Compare the <code>master</code> branch to your <code>elephant</code> branch to show what’s new.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff master elephant</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>4.You rebased your latest commit after a commit from your co-worker, but now the page is rendering strangely. To figure out why, get a diff that includes the previous commit, as well as its parent.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff HEAD~<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>5.Well, you see the changes, but you’re not sure what your co-worker was trying to accomplish. Display the diffs along with the log to determine what’s going on.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span> -<span class=\"keyword\">p</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>6.Wait, what? You don’t understand these lines in <code>index.html</code>. You’d better find out who committed them, so you can ask them what they’re supposed to do.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git blame <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n\n<p>Use <code>git blame</code> to see the annotated source, so you can figure out who made all these changes</p>\n<h2 id=\"EXCLUDING\"><strong>EXCLUDING</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/10.jpg\" alt=\"10\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/11.jpg\" alt=\"11\"></p>\n<h2 id=\"REMOVING\"><strong>REMOVING</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/12.jpg\" alt=\"12\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/13.jpg\" alt=\"13\"></p>\n<h2 id=\"CONFIG\"><strong>CONFIG</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/14.jpg\" alt=\"14\"></p>\n<h2 id=\"ALIASES\"><strong>ALIASES</strong></h2>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/15.jpg\" alt=\"15\"><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/16.jpg\" alt=\"16\"></p>\n","source":"_posts/Git Real.markdown","raw":"---\nlayout: post\ntitle: \"Git Real\"\ndate: 2014-11-08 12:18\ncomments: true\ntags: \n\t- git\n\n---\n\n#**STAGING & REMOTES**#\n##**UNSTAGED DIFFERENCES**###\n> A new file has been added to the site. Run the command to see what all has changed since your last commit.\n\n`git status` will list out which files have changed. If we want to see the actual changes:\n```\ngit diff\n```\n\n##**STAGE NEW FILE**###\n> There it is: `ostrich.html`. Stage it to be committed.\n\n```\ngit add ostrich.html\n```\n<!--more-->\n##**STAGED DIFFERENCES**###\n> We've added `ostrich.html` to the staging area, but your co-worker has stopped by and asked to see the new page first. Run a `diff` on the staged changes.\n\n`git diff` is great for seeing **unstaged differences** since last commit, but you need the `--staged` option in order to see staged changes.\n```\ngit diff --staged\n```\n\n##**UNSTAGE FILES**###\n> \"Wait,\" says the co-worker. \"They didn't tell you? The client \"wants the ostrich section pulled - they couldn't get a license to \"sell them.\" Better unstage `ostrich.html`.\n```\ngit reset HEAD ostrich.html\n```\n\n##**SKIP STAGING**###\n> We've modified the `index.html` file, adding a link to the cats section. Since that file is already tracked, you can just skip staging and commit it with one command.\n\n```\ngit commit -a -m \"index.html adding a link\"\n```\n`-a`: Add changes from all tracked files. Doesn't add new(untracked) files.\n\n##**ADD TO COMMIT**###\n> Whoops! We forgot to add the `cats.html` page that `index.html` links to, and it should really be `amended` on the same commit. To do this, let's first stage `cats.html`.\n\n```\ngit add cats.html\n```\n> Second, let's add `cats.html` to the prior commit and change the commit message in one step. \n```\ngit commit --amend -m \"modified index.html & add cats.html\"\n```\nYou don't want to make a new commit, you want to amend the previous one, so what I'm trying to say is: Use the amend option(**add to the last commit**)\nWhatever has been staged is added to last commit!\n\n##**ROLL BACK COMMIT**###\n> Wait, you're getting word that the cats section might be cancelled. **Undo the commit, and put the files back in staging.**\n\n```\ngit reset --soft HEAD^\n```\n`soft`: Reset into staging\n`HEAD^`: Move to commit before 'HEAD'\nNow I can make changes, and re-commit\n\n##**DISCARD CHANGES**###\n> Forget the whole thing - the client's license to sell cats is suspended during some kind of \"investigation\". Discard your changes to `cats.html` and `index.html`.\n\n```\ngit checkout -- cats.html index.html\n```\nBlow away all changes since last commit.\n\n##**REMOVE COMMIT**###\n> 1.The next feature is a banner on the main page, saying the pet shop will soon be offering badgers. Add and commit `index.html` in one step, skipping the staging area.\n2.Your co-worker is back, looking sheepish. \"Never mind the badgers ad. The client's legal department said that was a liability risk.\" **You'll need to remove the most recent commit, and all its changes.**\n\n```\ngit commit -am \"add index.html\"\ngit reset --hard HEAD^\n```\n##**NEW REMOTE REPOS AND PUSH**###\n```\ngit remote add <name> <address> /*To add new remotes*/\ngit remote rm <name> /*To remove remotes*/\ngit remote -v /*show remote repositories*/\ngit push -u <name> <branch> /*To push to remotes. The -u tells Git to remember the parameters, so that next time we can simply run git push */ \n\n```\n\n<br>\n#**CLONING & BRANCHING**#\n##**CLONE A REPO**###\n> The IT department installed an OS update on your workstation - and wiped the hard drive in the process. Clone the Pet Shop repo from `git@example.com:example/petshop.git` so you can resume work.\n\n```\ngit clone git@example.com:example/petshop.git\n```\n\n##**LIST REMOTES**###\n> Our repo is cloned locally, but how do we check to a list of our remotes? Lets get a list of all our remotes with a verbose output.\n\n```\ngit remote -v /*show remote repositories*/\n```\n##**CREATE A BRANCH**###\n> We need to add a section for the pet grooming salon on the site. You want to isolate this new feature from your other work. Create a new branch named `grooming`.\n\n```\ngit branch grooming\n```\n\n##**SWITCH TO BRANCH**###\n> You've made the new branch, but your commits are still going to the old one. Switch to the `grooming` branch.\n\n```\ngit checkout grooming\n```\n\n##**COMBINE BRANCH**###\n>You've finished work on the `grooming` branch and are ready to bring your work back into `master`. First, check out the master branch...\nThen,bring your changes from the grooming branch into the ...master branch.\n\n```\ngit checkout master\ngit merge grooming\ngit branch -d grooming /*delete the local branch*/\n```\n\n##**BRANCH SHORTCUTS**###\n> The pet shop wants to try selling yet another product line! Let's do this one in a branch in case it gets cancelled like the others. Using a single command, create and check out an `octopus` branch.\n\n```\ngit checkout -b octopus\n```\n\n<br>\n#**COLLABORATION BASICS**#\n##**SEND CHANGES**###\n> You've committed some work so now it's time to share! Push it out for your co-workers to see.\n\n```\ngit push\n```\n##**GET CHANGES**###\n> Looks like your co-worker pushed some changes before you did! Your push was rejected. Retrieve the latest changes, and merge them into your branch in one step.\n\n```\ngit pull\n```\n![1.pull](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/1.pull.jpg)\n##**FIX CONFLICTS**###\n> Git is reporting a conflict with your co-worker's changes in \"readme\". Just discard his changes, and keep your own (the HEAD).\n\n![2](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/2.jpg)\n![3](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/3.jpg)\n![4](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/4.jpg)\n\n<br>\n#**BRANCHING**#\n##**PUSH BRANCH**###\n> A new kind of pet is for sale at the store! Maybe this one will catch on with the public. You've committed your work to the local `hamsters` branch; now publish this branch in the `origin` repo.\n\n```\ngit push origin hamsters \n```\nLinks locak branch to the remote branch(tracking)\n##**GET REMOTE BRANCH**###\n> \"git branch -r\" does not query the remotes to check for new branches. In order to see a new remote branch you first have to do a fetch or a pull. So retrieve the remote \"weasel\" branch.\n\n```\ngit fetch\n```\nPull seems like a good choice, but pull will auto merge branches, you only want to update your local branch information, so use fetch instead\n\n##**REMOTE BRANCHES**###\n> Your co-worker said he wants you to look over a new branch on \"origin\", but he didn't tell you its name. Get a list of remote branches.\n\n```\ngit branch -r /*list all remote branches*/\n```\n\n##**DELETE ON REMOTE**###\n> Guess how the product launch went with the weasels? Better delete the \"weasel\" branch on \"origin\".\n\n```\ngit push origin :weasel\n```\nUse git push to delete the **remote branch**\n\n##**BRANCH STATUS**###\n>Wait, did you already pull that branch locally? Check for stale branches that are tracking \"origin\".\n\n```\ngit remote show origin /* show the state of your branches*/\n```\n##**CLEAN BRANCHES**###\n> You still have a stale local branch tracking the now-deleted `origin/weasel`. Clean up your local references.\n\n```\ngit remote prune origin /* remove deleted remote*/\n```\n##**LIST TAGS**###\n> With the weasel threat eliminated, the pet store wants to deploy the site. Let's see, what was the previous version number? Display the tags to find out.Create a tag accordingly\n\n```\ngit tag  /*list all tags*/\n```\n##**CREATE TAG**###\n> Ah, yes, the last release was \"v1.3.1\". You've added the hamsters, so it would be best to release this as \"v1.3.2\". Create a tag accordingly.\n\n```\ngit tag -a v1.3.2 -m \"version 0.03\"  /*add a new tag*/\n```\n##**SEND TAGS**###\n> Push your tag to origin.\n\n```\ngit push --tags\n```\n##**RETRIEVE TAG**###\n> The client is requesting that you roll back to the prior release. (Seriously? What could have gone wrong with the hamsters?) Retrieve the release tagged \"v1.3.1\".\n\n```\ngit checkout v1.3.1\n```\n\n<br>\n#**REBASE BELONG TO US**#\n##**REBASE**###\n![7](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/7.jpg) \n![8](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/8.jpg)\n> You've made some commits to a feature branch, but you've also committed a hotfix on master that would make a merge messy. Check out the `kennel` branch so you can rebase it on `master`.\n\n```\ngit checkout kennel\n```\n> OK, you're on the `kennel` branch. Our goal is to be able to merge `kennel` back into `master` without conflicts or a merge commit. Rebase the current `kennel` branch on `master`.\n\n```\ngit rebase master\n```\n> With the rebase complete, `kennel` should merge with `master` cleanly. Switch branches back to `master`.\n\n```\ngit checkout master\n```\n> We're on master, and we know the `kennel` will merge cleanly. Go ahead and merge in the `kennel` branch.\n\n```\ngit merge kennel\n```\n\n##**REMOTE**###\n> Your co-worker has pushed changes to the `master` branch on the `origin` repo. Retrieve it without merging it so we can replay our work on top of it.\n\n```\ngit fetch\n```\n![5](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/5.jpg)\n> Now that your local repo knows of the latest changes on origin/master, move your master commits after the commits from origin/master.\n\n```\ngit rebase\n```\nUse `git rebase` to apply your local commits ahead of those on origin/master.Current branch master is up to date. Success!\n![6](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/6.jpg)\n##**CONFLICT**###\n![9](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/9.jpg)\n> Your co-worker has pushed before you yet again. Better fetch the changes...\n\n```\ngit fetch\n```\n> Now run another rebase to move your commit after the latest fetched one.\n\n```\ngit rebase\n```\n> Uh, oh! Looks like the rebase is in conflict this time! Edit `index.html` to fix the conflicting lines. We want to keep our version with `Cats` and `Dogs`.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Our Cat-alog</title>\n  </head>\n  <body>\n    <nav>\n      <ul>\n<<<<<<< HEAD   <!--删除 -->\n        <li><a href=\"cat.html\">Cats</a></li>\n        <li><a href=\"dog.html\">Dogs</a></li>\n======= <!--删除 -->\n        <li><a href=\"cat.html\">Felines</a></li>   <!--删除 -->\n        <li><a href=\"dog.html\">Canines</a></li>   <!--删除 -->\n>>>>>>> Add dogs.  <!--删除 -->\n      </ul>\n    </nav>\n  </body>\n</html>\n```\n> Now mark the conflicts in \"index.html\" as resolved.\n\n```\ngit add index.html\n```\n> Now that all conflicts have been resolved and those files added, continue the current rebase in process.\n\n```\ngit rebase --continue\n```\n<br>\n#**HISTORY AND CONFIGURATION**#\n> 1.All those e-mail addresses and SHAs are making it hard to see commit messages in your history. Try viewing the log with one commit per line.\n\n```\ngit log --pretty=oneline\n```\n> 2.The client called with an urgent question about chew toys, and now you can't remember what you last modified. Bring up a summary of file changes.\n\n```\ngit diff\n```\n'git log' will show you your past commits, but it doesn't show you any changes in files, that's what 'git diff' is for.\n\n> 3.You've finished adding elephants to the catalog. You need to write up a change log for the client, and you want to ensure you don't miss anything. Compare the `master` branch to your `elephant` branch to show what's new.\n    \n```\ngit diff master elephant\n```\n> 4.You rebased your latest commit after a commit from your co-worker, but now the page is rendering strangely. To figure out why, get a diff that includes the previous commit, as well as its parent.\n\n```\ngit diff HEAD~2\n```\n> 5.Well, you see the changes, but you're not sure what your co-worker was trying to accomplish. Display the diffs along with the log to determine what's going on.\n\n```\ngit log -p\n```\n> 6.Wait, what? You don't understand these lines in `index.html`. You'd better find out who committed them, so you can ask them what they're supposed to do.\n\n```\ngit blame index.html\n```\nUse `git blame` to see the annotated source, so you can figure out who made all these changes\n\n\n##**EXCLUDING**###\n![10](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/10.jpg)\n![11](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/11.jpg)\n##**REMOVING**###\n![12](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/12.jpg)\n![13](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/13.jpg)\n##**CONFIG**###\n![14](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/14.jpg)\n##**ALIASES**###\n![15](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/15.jpg)\n![16](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/git/16.jpg)","slug":"Git Real","updated":1426577060000,"excerpt":"<h1 id=\"STAGING_&amp;_REMOTES\"><strong>STAGING &amp; REMOTES</strong></h1>\n<h2 id=\"UNSTAGED_DIFFERENCES\"><strong>UNSTAGED DIFFERENCES</strong></h2>\n<blockquote>\n<p>A new file has been added to the site. Run the command to see what all has changed since your last commit.</p>\n</blockquote>\n<p><code>git status</code> will list out which files have changed. If we want to see the actual changes:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> diff</div></pre></td></tr></table></figure>\n\n<h2 id=\"STAGE_NEW_FILE\"><strong>STAGE NEW FILE</strong></h2>\n<blockquote>\n<p>There it is: <code>ostrich.html</code>. Stage it to be committed.</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">add</span> ostrich.html</div></pre></td></tr></table></figure>\n\n<p>","_id":"eqdih5iuy6jx62kp","categories":[],"photos":[],"link":""},{"layout":"post","title":"How to start a startup","date":1414729080000,"comments":true,"tags":["dpry3ohoqk0k7p38","yr4rcx58k2nnzcid"],"content":"<p>网易公开课：<a href=\"http://v.163.com/special/opencourse/startup.html\" target=\"_blank\" rel=\"external\">如何创业</a> Stanford CS183B</p>\n<p><strong>Outcome</strong> =<code>Idea</code> x <code>Product</code> x <code>Teams</code> x <code>Execution</code> x <code>Luck</code>(random # between 0 and 10,000)</p>\n<p><strong>Four critical parts:</strong></p>\n<h1 id=\"A_Great_Idea\"><strong>A Great Idea</strong></h1>\n<p>It includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.</p>\n<ul>\n<li>Even though plans themselves are worthless,to exercise a planning is really valuable.</li>\n<li>You need to build a business that is difficult to replicate.</li>\n<li>Startup should feel like an important mission.</li>\n<li>You want an idea that turns into a monopoly,but you can’t get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.<br><a id=\"more\"></a><br><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/1.jpg\" alt=\"\"></li>\n<li>This is why the best ideas often look terrible at the beginning.</li>\n<li>You need a market that’s going to be big in ten years.</li>\n<li>More important than starting any particular startup is getting to know a lot of potential co-founders.</li>\n<li>The importance of thinking about what customers want, and thinking about the demands of the market.<br><br></li>\n</ul>\n<h1 id=\"Building_a_Great_Product\"><strong>Building a Great Product</strong></h1>\n<p>Broad definition: It includes customer support and copyright explaining the product.Anything involved in your customers interaction with what you build for them. </p>\n<ul>\n<li>Great Ideas turn to great product. A great product is the secret to long term growth hacking.</li>\n<li>Build something users love.Its better to build something that a small number of users love, than to build something that a large number of users like. </li>\n<li>Start with something simple. Its much much easier to make a great product if you have something simple.</li>\n<li>Talk to users. You need some users to help with the feedback cycle.The way to get those users is manually.You should go recruit them by hand. Don’t do things like buy google ads in the early days to get initial users.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/2a.jpg\" alt=\"\"></p>\n<ul>\n<li>You should make this feedback loop as tight as possible.The best companies usually have the tightest feedback loops.</li>\n</ul>\n<p><br></p>\n<h1 id=\"Team\"><strong>Team</strong></h1>\n<p>Cofounder relationships are among the most important in the entire company. The number one cause of early death for startups is cofounder blowups.</p>\n<ul>\n<li>It’s better to have no cofounder than to have a bad cofounder, but it’s still bad to be a solo founder. Two or three cofounders seems to be about perfect. </li>\n<li>At the beginning, you should only hire when you desperately need to,because the cost of getting an early hire wrong is really high. </li>\n<li>Do not hire mediocre people.Mediocre people at huge companies will cause some problems, but it won’t kill the company. A single mediocre hire within the first five will often in fact kill a startup.</li>\n</ul>\n<p><strong>There are three things I look for in a hire.</strong> </p>\n<ul>\n<li>Are they smart? </li>\n<li>Do they get things done? </li>\n<li>Do I want to spend a lot of time around them?</li>\n</ul>\n<p>You can learn a lot about all three of these things in an interview but the very best way is working together, so ideally someone you’ve worked together with in the past and in that case you probably don’t even need an interview. If you haven’t, then I think it’s way better to work with someone on a project for a day or two before hiring them. </p>\n<p>For most of the early hires that you make at a startup, experience probably doesn’t matter that much and you should go for aptitude and belief in what you’re doing. </p>\n<ul>\n<li>good communication skills tend to correlate with hires that work out.</li>\n<li>Good communication skills</li>\n<li>Manically determined</li>\n<li>Pass the animal test</li>\n<li>Would feel comfortable reporting to them</li>\n</ul>\n<p><strong>You’ve hired the best - now keep them around!</strong><br>You have to make sure your employees are happy and feel valued.</p>\n<blockquote>\n<p>Dan Pink talks about these three things that motivate people to do great work:<br> autonomy, mastery, and purpose.</p>\n</blockquote>\n<p>Firing people fast when it’s not working.<br><br></p>\n<h1 id=\"Execution\"><strong>Execution</strong></h1>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/3.jpg\" alt=\"\"></p>\n<p>Execution gets divided into two key questions. </p>\n<ul>\n<li>Can you figure out what to do ?</li>\n<li>Can you get it done?<br><br>    <em>1.Focus</em><ul>\n<li>what are you spending time and money on?</li>\n<li>what are the two or three most important things?</li>\n</ul>\n</li>\n</ul>\n<p>One of the hardest parts about being a founder is that there are a hundred important things competing for your attention every day. And you have to identify the right two or three, work on those, and then ignore, delegate, or defer the rest.You only get points when you make something the market wants. So if you work really hard on the wrong things, no one will care.</p>\n<p><em>2.intense</em> </p>\n<ul>\n<li>Startups only work at a fairly intense level. </li>\n<li>The secret to start up success is extreme focus and extreme dedication. </li>\n<li>Startups are not the best choice for work life balance and that’s sort of just the sad reality.<br>The good news here is that a small amount of extra work on the right thing makes a huge difference. One example that I like to give is thinking about the viral coefficient for a consumer web product. How many new users each existing user brings in. If it’s .99 the company will eventually flatline and die. And if it’s 1.01 you’ll be in this happy place of exponential growth forever.<br>  <img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/4.jpg\" alt=\"\"><br>  So this is one concrete example of where a tiny extra bit of work is the difference between success and failure. </li>\n</ul>\n<p><br><br><strong>The momentum and growth are the lifeblood of startups.</strong></p>\n<blockquote>\n<p>A good way to keep momentum is to establish an operating rhythm at the company early. Where you ship product and launch new features on a regular basis. Where you’re reviewing metrics every week with the entire company. </p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/5.jpg\" alt=\"\"></p>\n<p>Don’t worry about a competitor at all, until they’re actually beating you with a real, shipped product. Press releases are easier to write than code, and that is still easier than making a great product. So remind your company of this, and this is sort of a founder’s role, is not to let the company get down because of the competitors in the press.</p>\n<p><br><br><br><br><br><br><br><br><code>To be continued</code></p>\n","source":"_posts/How to start a startup.markdown","raw":"---\nlayout: post\ntitle: \"How to start a startup\"\ndate: 2014-10-31 12:18\ncomments: true\ntags: \n\t- 创业\n\t- Open Courses\n\n---\n网易公开课：[如何创业](http://v.163.com/special/opencourse/startup.html) Stanford CS183B\n\n**Outcome** =`Idea` x `Product` x `Teams` x `Execution` x `Luck`(random # between 0 and 10,000)\n\n**Four critical parts:**\n\n#**A Great Idea**\nIt includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.\n\n- Even though plans themselves are worthless,to exercise a planning is really valuable.\n- You need to build a business that is difficult to replicate.\n- Startup should feel like an important mission.\n- You want an idea that turns into a monopoly,but you can't get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.\n<!--more-->\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/1.jpg)\n- This is why the best ideas often look terrible at the beginning.\n- You need a market that's going to be big in ten years.\n- More important than starting any particular startup is getting to know a lot of potential co-founders.\n- The importance of thinking about what customers want, and thinking about the demands of the market.\n<br>\n\n#**Building a Great Product**\nBroad definition: It includes customer support and copyright explaining the product.Anything involved in your customers interaction with what you build for them. \n\n- Great Ideas turn to great product. A great product is the secret to long term growth hacking.\n- Build something users love.Its better to build something that a small number of users love, than to build something that a large number of users like. \n- Start with something simple. Its much much easier to make a great product if you have something simple.\n- Talk to users. You need some users to help with the feedback cycle.The way to get those users is manually.You should go recruit them by hand. Don't do things like buy google ads in the early days to get initial users.\n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/2a.jpg)\n\n- You should make this feedback loop as tight as possible.The best companies usually have the tightest feedback loops.\n\n<br>\n#**Team**\nCofounder relationships are among the most important in the entire company. The number one cause of early death for startups is cofounder blowups.\n\n-  It's better to have no cofounder than to have a bad cofounder, but it's still bad to be a solo founder. Two or three cofounders seems to be about perfect. \n-  At the beginning, you should only hire when you desperately need to,because the cost of getting an early hire wrong is really high. \n-  Do not hire mediocre people.Mediocre people at huge companies will cause some problems, but it won't kill the company. A single mediocre hire within the first five will often in fact kill a startup.\n\n**There are three things I look for in a hire.** \n\n- Are they smart? \n- Do they get things done? \n- Do I want to spend a lot of time around them?\n\nYou can learn a lot about all three of these things in an interview but the very best way is working together, so ideally someone you've worked together with in the past and in that case you probably don't even need an interview. If you haven't, then I think it's way better to work with someone on a project for a day or two before hiring them. \n\nFor most of the early hires that you make at a startup, experience probably doesn't matter that much and you should go for aptitude and belief in what you're doing. \n\n- good communication skills tend to correlate with hires that work out.\n- Good communication skills\n- Manically determined\n- Pass the animal test\n- Would feel comfortable reporting to them\n\n**You've hired the best - now keep them around!**\nYou have to make sure your employees are happy and feel valued.\n\n> Dan Pink talks about these three things that motivate people to do great work:   \n autonomy, mastery, and purpose.\n\nFiring people fast when it's not working.\n<br>\n#**Execution**\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/3.jpg)\n\nExecution gets divided into two key questions. \n\n- Can you figure out what to do ?\n- Can you get it done?\n<br>    *1.Focus*\n    - what are you spending time and money on?\n    - what are the two or three most important things?\n    \nOne of the hardest parts about being a founder is that there are a hundred important things competing for your attention every day. And you have to identify the right two or three, work on those, and then ignore, delegate, or defer the rest.You only get points when you make something the market wants. So if you work really hard on the wrong things, no one will care.\n\n  \n*2.intense* \n\n- Startups only work at a fairly intense level. \n- The secret to start up success is extreme focus and extreme dedication. \n- Startups are not the best choice for work life balance and that's sort of just the sad reality.\nThe good news here is that a small amount of extra work on the right thing makes a huge difference. One example that I like to give is thinking about the viral coefficient for a consumer web product. How many new users each existing user brings in. If it's .99 the company will eventually flatline and die. And if it's 1.01 you'll be in this happy place of exponential growth forever.\n    ![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/4.jpg)\n    So this is one concrete example of where a tiny extra bit of work is the difference between success and failure. \n    \n<br>\n**The momentum and growth are the lifeblood of startups.**\n\n> A good way to keep momentum is to establish an operating rhythm at the company early. Where you ship product and launch new features on a regular basis. Where you’re reviewing metrics every week with the entire company. \n\n![](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/startup/5.jpg)\n\nDon’t worry about a competitor at all, until they’re actually beating you with a real, shipped product. Press releases are easier to write than code, and that is still easier than making a great product. So remind your company of this, and this is sort of a founder’s role, is not to let the company get down because of the competitors in the press.\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n<br>\n<br>\n`To be continued`\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"How to start a startup","updated":1426577188000,"excerpt":"<p>网易公开课：<a href=\"http://v.163.com/special/opencourse/startup.html\" target=\"_blank\" rel=\"external\">如何创业</a> Stanford CS183B</p>\n<p><strong>Outcome</strong> =<code>Idea</code> x <code>Product</code> x <code>Teams</code> x <code>Execution</code> x <code>Luck</code>(random # between 0 and 10,000)</p>\n<p><strong>Four critical parts:</strong></p>\n<h1 id=\"A_Great_Idea\"><strong>A Great Idea</strong></h1>\n<p>It includes the size and growth of the market,the growth strategy for company,the defensibility strategy and so on.</p>\n<ul>\n<li>Even though plans themselves are worthless,to exercise a planning is really valuable.</li>\n<li>You need to build a business that is difficult to replicate.</li>\n<li>Startup should feel like an important mission.</li>\n<li>You want an idea that turns into a monopoly,but you can’t get monopoly in a big market right away.You have to find a small market in which you can get a monopoly, and then quickly expand.<br>","_id":"cod6qb41vh7othwn","categories":[],"photos":[],"link":""},{"layout":"post","title":"Makefile basics","comments":true,"tags":[],"content":"<p>每次看完文档，过一段时间不用就忘记了。今天做毕业设计需要写Makefile,又重新看了一下<a href=\"http://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"external\">GNU make</a>，干脆把常用的提取出来。以后也把一些常用的函数等等写在博客好了，我这记忆力也是没救了。</p>\n<hr>\n<p>后来google发现阮一峰老师总结的很好。文中部分内容来自<a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"external\">阮一峰Make命令教程</a>,以后发现常用的知识就在这篇补充好了。</p>\n<hr>\n<h1 id=\"Makefile\">Makefile</h1>\n<p>Makefile文件由一系列规则（rules）构成。每条规则的形式如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&lt;target&gt;</span> <span class=\"symbol\">:</span> &lt;prerequisites&gt; </span></div><div class=\"line\">[tab]  &lt;commands&gt;</div></pre></td></tr></table></figure>\n\n<p>目标（target）是必须的，不能省略。前置条件（prerequisites）和命令（commands）都是可选的，但是必须要有一个。</p>\n<p>在Makefile中，规则的顺序是很重要的，因为，<strong>Makefile中只应该有一个最终目标</strong>，其它的目标都是被这个目标所连带出来的，所以一定要让make知道你的最终目标是什么。<a id=\"more\"></a></p>\n<h2 id=\"目标（target）\">目标（target）</h2>\n<p>一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">test:a.<span class=\"built_in\">c</span> b.<span class=\"built_in\">c</span> a.h</div><div class=\"line\">\tgcc -o test a.<span class=\"built_in\">c</span> b.<span class=\"built_in\">c</span></div></pre></td></tr></table></figure>\n\n\n\n<p>除了文件名，目标还可以是某个操作的名字，这称为”伪目标”（phony target）。</p>\n<ul>\n<li><code>all</code>    所有目标的目标，其功能一般是编译所有的目标</li>\n<li><code>clean</code>    删除所有被make创建的文件</li>\n<li><code>install</code>    安装已编译好的程序，其实就是把目标可执行文件拷贝到指定的目录中去</li>\n<li><code>print</code>    列出改变过的源文件</li>\n<li><code>tar</code>    把源程序打包备份. 也就是一个tar文件</li>\n<li><code>dist</code>    创建一个压缩文件, 一般是把tar文件压成Z文件. 或是gz文件</li>\n<li><code>TAGS</code>    更新所有的目标, 以备完整地重编译使用</li>\n<li><code>check</code> 或 <code>test</code>    一般用来测试makefile的流程</li>\n</ul>\n<p>下面代码的目标是clean，它不是文件名，而是一个操作的名字，属于”伪目标 “，作用是删除对象文件。但是，如果当前目录中，正好有一个文件叫做clean，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">clean:</div><div class=\"line\">      rm <span class=\"keyword\">*</span>.o</div></pre></td></tr></table></figure>\n\n<p>为了避免这种情况，可以明确声明clean是”伪目标”，写法如下。声明clean是”伪目标”之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令。像.PHONY这样的内置目标名还有不少，可以查看<a href=\"http://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets\" target=\"_blank\" rel=\"external\">手册</a>。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"phony\"><span class=\"keyword\">.PHONY</span>: clean</span></div><div class=\"line\"><span class=\"title\">clean:</span></div><div class=\"line\">        rm *.o temp</div></pre></td></tr></table></figure>\n\n<p>如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">utorial:</span></div><div class=\"line\">\t@# todo: have this actually run some kind of tutorial wizard?</div><div class=\"line\">\t@echo <span class=\"string\">\"Please read the 'Makefile' file to go through this tutorial\"</span></div></pre></td></tr></table></figure>\n\n<p>执行make命令相当于make tutorial。</p>\n<h2 id=\"前置条件（prerequisites）\">前置条件（prerequisites）</h2>\n<p>前置条件通常是一组文件名，之间用空格分隔。它指定了”目标”是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），”目标”就需要重新构建。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">result</span>.txt: source.txt</div><div class=\"line\">    cp source.txt <span class=\"literal\">result</span>.txt</div></pre></td></tr></table></figure>\n\n<p>上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么make result.txt可以正常运行，否则必须再写一条规则，来生成 source.txt 。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span>.tx<span class=\"variable\">t:</span></div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"this is the source\"</span> &gt; <span class=\"keyword\">source</span>.txt</div></pre></td></tr></table></figure>\n\n<p>上面代码中，source.txt后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用make source.txt，它都会生成。</p>\n<h2 id=\"命令（commands）\">命令（commands）</h2>\n<p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建”目标”的具体指令，它的运行结果通常就是生成目标文件。<br>每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.RECIPEPREFIX = &gt;</div><div class=\"line\"><span class=\"keyword\">al</span><span class=\"variable\">l:</span></div><div class=\"line\">&gt; <span class=\"keyword\">echo</span> Hello, world</div></pre></td></tr></table></figure>\n\n<p>需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var-lost:</div><div class=\"line\">    <span class=\"keyword\">export</span> foo=bar</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"foo=[$<span class=\"variable\">$foo</span>]\"</span></div></pre></td></tr></table></figure>\n\n<p>上面代码执行后（make var-lost），取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var-kept:</div><div class=\"line\">    <span class=\"keyword\">export</span> foo=bar; <span class=\"built_in\">echo</span> <span class=\"string\">\"foo=[$<span class=\"variable\">$foo</span>]\"</span></div></pre></td></tr></table></figure>\n\n<p>另一个解决办法是在换行符前加反斜杠转义。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var-kept:</div><div class=\"line\">    <span class=\"keyword\">export</span> foo=bar; \\</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"foo=[$<span class=\"variable\">$foo</span>]\"</span></div></pre></td></tr></table></figure>\n\n<p>最后一个方法是加上.ONESHELL:命令。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ONESHELL:</div><div class=\"line\">var-kept:</div><div class=\"line\">    <span class=\"keyword\">export</span> foo=bar; </div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"foo=[$<span class=\"variable\">$foo</span>]\"</span></div></pre></td></tr></table></figure>\n\n<p>If you want to export specific variables to a <strong>sub-make</strong>, use the export directive, like this: <code>export variable</code> …</p>\n<p>If you want to prevent a variable from being exported, use the unexport directive, like this: <code>unexport variable</code> …</p>\n<h1 id=\"常用语法\">常用语法</h1>\n<h2 id=\"注释\">注释</h2>\n<p>井号（#）在Makefile中表示注释。如果要使用或者输出”#”字符, 需要进行转义, “#“</p>\n<h2 id=\"回声（echoing）\">回声（echoing）</h2>\n<p>正常情况下，<strong>make会打印每条命令</strong>，然后再执行，这就叫做回声（echoing）。</p>\n<ul>\n<li>不用前缀   : 输出执行的命令以及命令执行的结果, 出错的话停止执行</li>\n<li>前缀 <code>@</code>  : 只输出命令执行的结果, 出错的话停止执行</li>\n<li>前缀 <code>-</code>   : 命令执行有错的话, 忽略错误, 继续执行</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"label\">test:</span></div><div class=\"line\">    <span class=\"preprocessor\"># 这是测试</span></div></pre></td></tr></table></figure>\n\n<p>执行上面的规则，会得到下面的结果。</p>\n<p>$ make test</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># 这是测试</span></div></pre></td></tr></table></figure>\n\n<p>在命令的前面加上@，就可以关闭回声。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"label\">test:</span></div><div class=\"line\">    @<span class=\"preprocessor\"># 这是测试</span></div></pre></td></tr></table></figure>\n\n<p>现在再执行make test，就不会有任何输出。<br>由于在构建过程中，需要了解当前在执行哪条命令，<strong>所以通常只在注释和纯显示的echo命令前面加上@。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">test:</div><div class=\"line\">    @<span class=\"comment\"># 这是测试</span></div><div class=\"line\">    @<span class=\"built_in\">echo</span> TODO</div></pre></td></tr></table></figure>\n\n<h2 id=\"通配符\">通配符</h2>\n<p>通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 […] 。</p>\n<ul>\n<li><code>*</code>      表示任意一个或多个字符</li>\n<li><code>?</code>      表示任意一个字符</li>\n<li><code>[...]</code>  ex. [abcd] 表示a,b,c,d中任意一个字符, [^abcd]表示除a,b,c,d以外的字符, [0-9]表示 0~9中任意一个数字</li>\n<li><code>~</code>      表示用户的home目录</li>\n</ul>\n<p>比如， *.o 表示所有后缀名为o的文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">clean:</div><div class=\"line\">        rm <span class=\"operator\">-f</span> *.o</div></pre></td></tr></table></figure>\n\n<h2 id=\"路径搜索\">路径搜索</h2>\n<p>当一个Makefile中涉及到大量源文件时(这些源文件和Makefile极有可能不在同一个目录中),</p>\n<p>这时, 最好将源文件的路径明确在Makefile中, 便于编译时查找. Makefile中有个特殊的变量 VPATH 就是完成这个功能的.</p>\n<p>指定了 VPATH 之后, 如果当前目录中没有找到相应文件或依赖的文件, Makefile 回到 VPATH 指定的路径中再去查找..</p>\n<p>VPATH 使用方法:</p>\n<ul>\n<li><code>vpath &lt;directories&gt;</code>             当前目录中找不到文件时, 就从<code>directories</code>中搜索</li>\n<li><code>vpath &lt;pattern&gt; &lt;directories&gt;</code>   符合<code>pattern</code>格式的文件, 就从<code>directories</code>中搜索</li>\n<li><code>vpath &lt;pattern&gt;</code>                 清除符合<code>pattern</code>格式的文件搜索路径 </li>\n<li><code>vpath</code>                           清除所有已经设置好的文件路径 </li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># 示例1 - 当前目录中找不到文件时, 按顺序从 src目录 ../parent-dir目录中查找文件</span></div><div class=\"line\">VPATH src:../parent-dir   </div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># 示例2 - .h结尾的文件都从 ./header 目录中查找</span></div><div class=\"line\">VPATH %.h ./header</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># 示例3 - 清除示例2中设置的规则</span></div><div class=\"line\">VPATH %.h</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># 示例4 - 清除所有VPATH的设置</span></div><div class=\"line\">VPATH</div></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"模式匹配\">模式匹配</h2>\n<p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">%<span class=\"value\">.o</span></span>: %.c</div></pre></td></tr></table></figure>\n\n<p>等同于下面的写法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">f1.o</span>: <span class=\"string\">f1.c</span></div><div class=\"line\"><span class=\"attribute\">f2.o</span>: <span class=\"string\">f2.c</span></div></pre></td></tr></table></figure>\n\n<p><strong>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。</strong></p>\n<h2 id=\"变量和赋值符\">变量和赋值符</h2>\n<p>Makefile 允许使用等号自定义变量。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">txt = <span class=\"constant\">Hello</span> <span class=\"constant\">World</span></div><div class=\"line\"><span class=\"symbol\">test:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>txt)</div></pre></td></tr></table></figure>\n\n<p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 <code>$( )</code> 之中。<br>调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">test:</div><div class=\"line\">    @<span class=\"built_in\">echo</span> $<span class=\"variable\">$HOME</span></div></pre></td></tr></table></figure>\n\n<p>有时，变量的值可能指向另一个变量。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">v1</span> = <span class=\"variable\">$(v2)</span></div></pre></td></tr></table></figure>\n\n<p>上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。</p>\n<p>为了解决类似问题，Makefile一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看<a href=\"http://stackoverflow.com/questions/448910/makefile-variable-assignment\" target=\"_blank\" rel=\"external\">StackOverflow</a>。其中 = 和 := 的区别在于, := 只能使用前面定义好的变量, = 可以使用后面定义的变量</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile内容</span></div><div class=\"line\"><span class=\"constant\">OBJS2</span> = <span class=\"variable\">$(</span><span class=\"constant\">OBJS1</span>) programC.o</div><div class=\"line\"><span class=\"constant\">OBJS1</span> = programA.o programB.o</div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span><span class=\"constant\">OBJS2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash中执行 make, 可以看出虽然 OBJS1 是在 OBJS2 之后定义的, 但在 OBJS2中可以提前使用</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">programA.o programB.o programC.o</div><div class=\"line\">---------------------------------------</div><div class=\"line\"><span class=\"comment\"># Makefile内容</span></div><div class=\"line\"><span class=\"constant\">OBJS2</span> <span class=\"symbol\">:</span>= <span class=\"variable\">$(</span><span class=\"constant\">OBJS1</span>) programC.o</div><div class=\"line\"><span class=\"constant\">OBJS1</span> <span class=\"symbol\">:</span>= programA.o programB.o</div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span><span class=\"constant\">OBJS2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash中执行 make, 可以看出 OBJS2 中的 $(OBJS1) 为空</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">programC.o</div></pre></td></tr></table></figure>\n\n<h2 id=\"内置变量（Implicit_Variables）\">内置变量（Implicit Variables）</h2>\n<p>Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\" target=\"_blank\" rel=\"external\">手册</a>。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">outpu<span class=\"variable\">t:</span></div><div class=\"line\">    $(CC) -<span class=\"keyword\">o</span> output <span class=\"built_in\">input</span>.<span class=\"keyword\">c</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"自动变量（Automatic_Variables）\">自动变量（Automatic Variables）</h2>\n<p>Make命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。</p>\n<h3 id=\"$@\">$@</h3>\n<p><code>$@</code>指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 <code>$@</code> 就指代foo。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.txt b.txt: </div><div class=\"line\">    touch <span class=\"variable\">$@</span></div></pre></td></tr></table></figure>\n\n<p>等同于下面的写法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>.tx<span class=\"variable\">t:</span></div><div class=\"line\">    touch <span class=\"keyword\">a</span>.txt</div><div class=\"line\"><span class=\"keyword\">b</span>.tx<span class=\"variable\">t:</span></div><div class=\"line\">    touch <span class=\"keyword\">b</span>.txt</div></pre></td></tr></table></figure>\n\n<h3 id=\"$&lt;\">$&lt;</h3>\n<p><code>$&lt;</code>指代第一个前置条件。比如，规则为 t: p1 p2，那么$&lt; 就指代p1。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>.tx<span class=\"variable\">t:</span> <span class=\"keyword\">b</span>.txt <span class=\"keyword\">c</span>.txt</div><div class=\"line\">    <span class=\"keyword\">cp</span> $&lt; $@</div></pre></td></tr></table></figure>\n\n<p>等同于下面的写法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>.tx<span class=\"variable\">t:</span> <span class=\"keyword\">b</span>.txt <span class=\"keyword\">c</span>.txt</div><div class=\"line\">    <span class=\"keyword\">cp</span> <span class=\"keyword\">b</span>.txt <span class=\"keyword\">a</span>.txt</div></pre></td></tr></table></figure>\n\n<h3 id=\"$?\">$?</h3>\n<p> <code>$?</code> 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。</p>\n<h3 id=\"$^\">$^</h3>\n<p><code>$^</code> 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。</p>\n<h3 id=\"$*\">$*</h3>\n<p><code>$*</code> 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，<code>$*</code> 就表示 f1。</p>\n<h3 id=\"$(@D)_和_$(@F)\">$(@D) 和 $(@F)</h3>\n<p><code>$(@D)</code> 和 <code>$(@F)</code> 分别指向 $@ 的目录名和文件名。比如，<code>$@</code>是 src/input.c，那么<code>$(@D)</code> 的值为 src ，<code>$(@F)</code> 的值为 input.c。</p>\n<h3 id=\"$(&lt;D)_和_$(&lt;F)\">$(&lt;D) 和 $(&lt;F)</h3>\n<p><code>$(&lt;D)</code> 和 <code>$(&lt;F)</code> 分别指向 <code>$&lt;</code> 的目录名和文件名。<br>所有的自动变量清单，请看<a href=\"https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html\" target=\"_blank\" rel=\"external\">手册</a>。下面是自动变量的一个例子。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dest/<span class=\"variable\">%.</span>txt: src/<span class=\"variable\">%.</span>txt</div><div class=\"line\">    <span class=\"variable\">@[</span> -d dest ] || mkdir dest</div><div class=\"line\">    cp <span class=\"variable\">$&lt;</span> <span class=\"variable\">$@</span></div></pre></td></tr></table></figure>\n\n<p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，<code>$&lt;</code> 指代前置文件（src/%.txt）， <code>$@</code> 指代目标文件（dest/%.txt）。</p>\n<h2 id=\"判断和循环\">判断和循环</h2>\n<p>Makefile使用 Bash 语法，完成判断和循环。条件判断的关键字主要有 ifeq ifneq ifdef ifndef</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ife<span class=\"string\">q (<span class=\"variable\">$(</span>CC)</span>,gcc)</div><div class=\"line\">  libs=<span class=\"variable\">$(</span>libs_for_gcc)</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  libs=<span class=\"variable\">$(</span>normal_libs)</div><div class=\"line\">endif</div></pre></td></tr></table></figure>\n\n<p>上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">LIST = one two three</div><div class=\"line\">all:</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(LIST); <span class=\"keyword\">do</span> \\</div><div class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"variable\">$i</span>; \\</div><div class=\"line\">    <span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#等同于</span></div><div class=\"line\"></div><div class=\"line\">all:</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> one two three; <span class=\"keyword\">do</span> \\</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>; \\</div><div class=\"line\">    <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n\n<p>上面代码的运行结果。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">one</span></div><div class=\"line\"><span class=\"constant\">two</span></div><div class=\"line\"><span class=\"constant\">three</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"函数\">函数</h2>\n<p>Makefile 还可以使用函数，格式如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>)</span></div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">${<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>}</span></div></pre></td></tr></table></figure>\n\n<p>Makefile提供了许多<a href=\"http://www.gnu.org/software/make/manual/html_node/Functions.html\" target=\"_blank\" rel=\"external\">内置函数</a>，可供调用。下面是几个常用的内置函数。</p>\n<h3 id=\"shell_函数\">shell 函数</h3>\n<p>shell 函数用来执行 shell 命令 语法：<code>$(shell &lt;shell command&gt;)</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">srcfiles</span> := <span class=\"variable\">$(shell echo src/{00..99}.txt)</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"字符串函数\">字符串函数</h3>\n<p>（1）strip函数<br>功能: 去掉 <code>string</code> 字符串中开头和结尾的空字符</p>\n<p>返回: 被去掉空格的字符串值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"constant\">VAL</span> <span class=\"symbol\">:</span>= <span class=\"string\">\"       aa  bb  cc \"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"string\">\"去除空格前: \"</span> <span class=\"variable\">$(</span><span class=\"constant\">VAL</span>)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"string\">\"去除空格后: \"</span> <span class=\"variable\">$(</span>strip <span class=\"variable\">$(</span><span class=\"constant\">VAL</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">去除空格前<span class=\"symbol\">:</span>         aa  bb  cc </div><div class=\"line\">去除空格后<span class=\"symbol\">:</span>   aa bb cc</div></pre></td></tr></table></figure>\n\n<p>（2）wildcard 函数<br>它的用法是：<code>$(wildcard PATTERN...)</code>。在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表。如果不存在任何符合此模式的文件，函数会忽略模式字符并返回空。</p>\n<p>获取src目录下所有<code>.txt</code>结尾的文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">srcfiles</span> := $(wildcard src/<span class=\"regexp\">*.txt</span>)</div></pre></td></tr></table></figure>\n\n<p>（3）subst 函数<br>subst 函数用来文本替换，格式如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(subst <span class=\"built_in\">from</span>,<span class=\"built_in\">to</span>,<span class=\"keyword\">text</span>)</div></pre></td></tr></table></figure>\n\n<p>下面的例子将字符串”feet on the street”替换成”fEEt on the strEEt”。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(subst ee,EE,feet <span class=\"command\"><span class=\"keyword\">on</span> <span class=\"title\">the</span> <span class=\"title\">street</span>)</span></div></pre></td></tr></table></figure>\n\n<p>下面是一个稍微复杂的例子。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">comma</span>:= ,</div><div class=\"line\"><span class=\"constant\">empty</span>:=</div><div class=\"line\"><span class=\"comment\"># space变量用两个空变量作为标识符，当中是一个空格</span></div><div class=\"line\"><span class=\"constant\">space</span>:= <span class=\"variable\">$(empty)</span> <span class=\"variable\">$(empty)</span></div><div class=\"line\"><span class=\"constant\">foo</span>:= a b c</div><div class=\"line\"><span class=\"constant\">bar</span>:= <span class=\"variable\">$(subst $(space)</span>,<span class=\"variable\">$(comma)</span>,<span class=\"variable\">$(foo)</span>)</div><div class=\"line\"><span class=\"comment\"># bar is now `a,b,c'.</span></div></pre></td></tr></table></figure>\n\n<p>（4）patsubst函数<br>patsubst 函数用于模式匹配的替换，格式如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$(</span>patsubst pattern,replacement,<span class=\"keyword\">text</span>)</div></pre></td></tr></table></figure>\n\n<p>下面的例子将文件名”x.c.c bar.c”，替换成”x.c.o bar.o”。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(patsubst %.<span class=\"built_in\">c</span>,%.o,x.<span class=\"built_in\">c</span>.<span class=\"built_in\">c</span> bar.<span class=\"built_in\">c</span>)</div></pre></td></tr></table></figure>\n\n<p>（5）替换后缀名<br>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上patsubst函数的一种简写形式。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">min</span>: <span class=\"variable\">$(</span>OUTPUT:.js=.<span class=\"keyword\">min</span>.js)</div></pre></td></tr></table></figure>\n\n<p>上面代码的意思是，将变量OUTPUT中的后缀名 .js 全部替换成 .min.js 。</p>\n<p>（6）查找字符串函数: <code>$(findstring &lt;find&gt;,&lt;in&gt;)</code></p>\n<p>功能: 在字符串 <code>in</code> 中查找 <code>find</code> 字符串</p>\n<p>返回: 如果找到, 返回 <code>find</code> 字符串,  否则返回空字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"constant\">VAL</span> <span class=\"symbol\">:</span>= <span class=\"string\">\"       aa  bb  cc \"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>findstring aa,<span class=\"variable\">$(</span><span class=\"constant\">VAL</span>))</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>findstring ab,<span class=\"variable\">$(</span><span class=\"constant\">VAL</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">aa</div></pre></td></tr></table></figure>\n\n<p>（7）过滤函数: <code>$(filter &lt;pattern...&gt;,&lt;text&gt;)</code></p>\n<p>功能: 以 <code>pattern</code> 模式过滤字符串 <code>text</code>, <em>保留</em> 符合模式 <code>pattern</code> 的单词, 可以有多个模式</p>\n<p>返回: 符合模式 <code>pattern</code> 的字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\">all:</div><div class=\"line\">    @echo $(<span class=\"built_in\">filter</span> %.o %.<span class=\"operator\">a</span>,program.c program.o program.<span class=\"operator\">a</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\">$ make</div><div class=\"line\">program.o program.<span class=\"operator\">a</span></div></pre></td></tr></table></figure>\n\n<p>（8）反过滤函数: <code>$(filter-out &lt;pattern...&gt;,&lt;text&gt;)</code></p>\n<p>功能: 以 <code>pattern</code> 模式过滤字符串 <code>text</code>, <em>去除</em> 符合模式 <code>pattern</code> 的单词, 可以有多个模式</p>\n<p>返回: 不符合模式 <code>pattern</code> 的字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Makefile 内容</div><div class=\"line\"><span class=\"keyword\">al</span><span class=\"variable\">l:</span></div><div class=\"line\">    @echo $(<span class=\"built_in\">filter</span>-out %.<span class=\"keyword\">o</span> %.<span class=\"keyword\">a</span>,program.<span class=\"keyword\">c</span> program.<span class=\"keyword\">o</span> program.<span class=\"keyword\">a</span>)</div><div class=\"line\"></div><div class=\"line\"># bash 中执行 <span class=\"keyword\">make</span></div><div class=\"line\">$ <span class=\"keyword\">make</span></div><div class=\"line\">program.<span class=\"keyword\">c</span></div></pre></td></tr></table></figure>\n\n<p>（9）排序函数: <code>$(sort &lt;list&gt;)</code><br>功能: 给字符串 <code>list</code> 中的单词排序 (升序)</p>\n<p>返回: 排序后的字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Makefile 内容</div><div class=\"line\"><span class=\"keyword\">al</span><span class=\"variable\">l:</span></div><div class=\"line\">    @echo $(<span class=\"built_in\">sort</span> bac <span class=\"keyword\">abc</span> acb cab)</div><div class=\"line\"></div><div class=\"line\"># bash 中执行 <span class=\"keyword\">make</span></div><div class=\"line\">$ <span class=\"keyword\">make</span></div><div class=\"line\"><span class=\"keyword\">abc</span> acb bac cab</div></pre></td></tr></table></figure>\n\n<p>（10）取单词函数: <code>$(word &lt;n&gt;,&lt;text&gt;)</code><br>功能: 取字符串 <code>text</code> 中的 第<code>n</code>个单词 (n从1开始)</p>\n<p>返回: <code>text</code> 中的第<code>n</code>个单词, 如果<code>n</code> 比 <code>text</code> 中单词个数要大, 则返回空字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>word <span class=\"number\">1</span>,aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>word <span class=\"number\">5</span>,aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>word <span class=\"number\">4</span>,aa bb cc dd)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">aa</div><div class=\"line\"></div><div class=\"line\">dd</div></pre></td></tr></table></figure>\n\n<p>（11）取单词串函数: <code>$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</code></p>\n<p>功能: 从字符串<code>text</code>中取从<code>s</code>开始到<code>e</code>的单词串. <code>s</code>和<code>e</code>是一个数字.</p>\n<p>返回: 从<code>s</code>到<code>e</code>的字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>wordlist <span class=\"number\">1</span>,<span class=\"number\">3</span>,aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>word <span class=\"number\">5</span>,<span class=\"number\">6</span>,aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>word <span class=\"number\">2</span>,<span class=\"number\">5</span>,aa bb cc dd)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">aa bb cc</div><div class=\"line\"></div><div class=\"line\">bb</div></pre></td></tr></table></figure>\n\n\n\n<p>（12）单词个数统计函数: <code>$(words &lt;text&gt;)</code></p>\n<p>功能: 统计字符串 <code>text</code> 中单词的个数</p>\n<p>返回: 单词个数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>words aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>words aabbccdd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>words )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n\n<p>（13）首单词函数: <code>$(firstword &lt;text&gt;)</code></p>\n<p>功能: 取字符串 <code>text</code> 中的第一个单词</p>\n<p>返回: 字符串 <code>text</code> 中的第一个单词</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>firstword aa bb cc dd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>firstword aabbccdd)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>firstword )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">aa</div><div class=\"line\">aabbccdd</div></pre></td></tr></table></figure>\n\n<h3 id=\"文件名函数\">文件名函数</h3>\n<p>（1）取目录函数: <code>$(dir &lt;names...&gt;)</code></p>\n<p>功能: 从文件名序列 `names&gt; 中取出目录部分</p>\n<p>返回: 文件名序列 `names&gt; 中的目录部分</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>dir /home/a.c ./bb.c ../c.c d.c)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">/home/ ./ ../ ./</div></pre></td></tr></table></figure>\n\n\n\n<p>（2）取文件函数: <code>$(notdir &lt;names...&gt;)</code></p>\n<p>功能: 从文件名序列 <code>names</code> 中取出非目录部分</p>\n<p>返回: 文件名序列 <code>names</code> 中的非目录部分</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"type\">Makefile</span> 内容</div><div class=\"line\">all:</div><div class=\"line\">    @echo $(notdir /home/a.<span class=\"built_in\">c</span> ./bb.<span class=\"built_in\">c</span> ../<span class=\"built_in\">c</span>.<span class=\"built_in\">c</span> d.<span class=\"built_in\">c</span>)</div><div class=\"line\"></div><div class=\"line\"># bash 中执行 make</div><div class=\"line\">$ make</div><div class=\"line\">a.<span class=\"built_in\">c</span> bb.<span class=\"built_in\">c</span> <span class=\"built_in\">c</span>.<span class=\"built_in\">c</span> d.<span class=\"built_in\">c</span></div></pre></td></tr></table></figure>\n\n\n\n<p>（3）取后缀函数: <code>$(suffix &lt;names...&gt;)</code></p>\n<p>功能: 从文件名序列 <code>names</code> 中取出各个文件名的后缀</p>\n<p>返回: 文件名序列 <code>names</code> 中各个文件名的后缀, 没有后缀则返回空字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>suffix /home/a.c ./b.o ../c.a d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">.c .o .a</div></pre></td></tr></table></figure>\n\n\n\n<p>（4）取前缀函数: <code>$(basename &lt;names...&gt;)</code></p>\n<p>功能: 从文件名序列 <code>names</code> 中取出各个文件名的前缀</p>\n<p>返回: 文件名序列 <code>names</code> 中各个文件名的前缀, 没有前缀则返回空字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Makefile 内容</div><div class=\"line\">all:</div><div class=\"line\">    @echo $(basename <span class=\"regexp\">/home/</span>a.c .<span class=\"regexp\">/b.o ../</span>c.a <span class=\"regexp\">/home/</span>.d .e)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># bash 中执行 make</div><div class=\"line\">$ make</div><div class=\"line\"><span class=\"regexp\">/home/</span>a .<span class=\"regexp\">/b ../</span>c <span class=\"regexp\">/home/</span></div></pre></td></tr></table></figure>\n\n\n\n<p>（5）加后缀函数: <code>$(addsuffix &lt;suffix&gt;,&lt;names...&gt;)</code></p>\n<p>功能: 把后缀 <code>suffix</code> 加到 <code>names</code> 中的每个单词后面</p>\n<p>返回: 加过后缀的文件名序列</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"type\">Makefile</span> 内容</div><div class=\"line\">all:</div><div class=\"line\">    @echo $(addsuffix .<span class=\"built_in\">c</span>,/home/a b ./<span class=\"built_in\">c</span>.o ../d.<span class=\"built_in\">c</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># bash 中执行 make</div><div class=\"line\">$ make</div><div class=\"line\">/home/a.<span class=\"built_in\">c</span> b.<span class=\"built_in\">c</span> ./<span class=\"built_in\">c</span>.o.<span class=\"built_in\">c</span> ../d.<span class=\"built_in\">c</span>.<span class=\"built_in\">c</span></div></pre></td></tr></table></figure>\n\n\n\n<p>（6）加前缀函数: <code>$(addprefix &lt;prefix&gt;,&lt;names...&gt;)</code></p>\n<p>功能: 把前缀 <code>prefix</code> 加到 <code>names</code> 中的每个单词前面</p>\n<p>返回: 加过前缀的文件名序列</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>addprefix test<span class=\"number\">_</span>,<span class=\"regexp\">/home/a</span>.c b.c ./d.c)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">test<span class=\"number\">_</span>/home/a.c test_b.c test<span class=\"number\">_</span>./d.c</div></pre></td></tr></table></figure>\n\n\n\n<p>（7）连接函数: <code>$(join &lt;list1&gt;,&lt;list2&gt;)</code></p>\n<p>功能: <code>list2</code> 中对应的单词加到 <code>list1</code> 后面</p>\n<p>返回: 连接后的字符串</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>join a b c d,<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>join a b c d,<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>join a b c d e,<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">a1 b2 c3 d4</div><div class=\"line\">a1 b2 c3 d4 <span class=\"number\">5</span></div><div class=\"line\">a1 b2 c3 d4 e</div></pre></td></tr></table></figure>\n\n<h3 id=\"foreach函数\">foreach函数</h3>\n<p>语法: <code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</code></p>\n<p>示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\">targets <span class=\"symbol\">:</span>= a b c d</div><div class=\"line\">objects <span class=\"symbol\">:</span>= <span class=\"variable\">$(</span>foreach i,<span class=\"variable\">$(</span>targets),<span class=\"variable\">$(</span>i).o)</div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>targets)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>objects)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">a b c d</div><div class=\"line\">a.o b.o c.o d.o</div></pre></td></tr></table></figure>\n\n<h3 id=\"if\">if</h3>\n<p>这里的if是个函数, 和前面的条件判断不一样, 前面的条件判断属于Makefile的关键字</p>\n<p>语法:</p>\n<p><code>$(if &lt;condition&gt;,&lt;then-part&gt;)</code></p>\n<p><code>$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</code></p>\n<p>示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\">val <span class=\"symbol\">:</span>= a</div><div class=\"line\">objects <span class=\"symbol\">:</span>= <span class=\"variable\">$(</span><span class=\"keyword\">if</span> <span class=\"variable\">$(</span>val),<span class=\"variable\">$(</span>val).o,nothing)</div><div class=\"line\">no-objects <span class=\"symbol\">:</span>= <span class=\"variable\">$(</span><span class=\"keyword\">if</span> <span class=\"variable\">$(</span>no-val),<span class=\"variable\">$(</span>val).o,nothing)</div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>objects)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>no-objects)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\">a.o</div><div class=\"line\">nothing</div></pre></td></tr></table></figure>\n\n<h3 id=\"call_-_创建新的参数化函数\">call - 创建新的参数化函数</h3>\n<p>语法:</p>\n<p><code>$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)</code></p>\n<p>示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Makefile 内容</div><div class=\"line\"><span class=\"built_in\">log</span> = <span class=\"string\">\"====debug====\"</span> $(<span class=\"number\">1</span>) <span class=\"string\">\"====end====\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">al</span><span class=\"variable\">l:</span></div><div class=\"line\">    @echo $(<span class=\"built_in\">call</span> <span class=\"built_in\">log</span>,<span class=\"string\">\"正在 Make\"</span>)</div><div class=\"line\"></div><div class=\"line\"># bash 中执行 <span class=\"keyword\">make</span></div><div class=\"line\">$ <span class=\"keyword\">make</span></div><div class=\"line\">====<span class=\"keyword\">debug</span>==== 正在 Make ====end====</div></pre></td></tr></table></figure>\n\n<h3 id=\"origin_-_判断变量的来源\">origin - 判断变量的来源</h3>\n<p>语法:</p>\n<p><code>$(origin &lt;variable&gt;)</code></p>\n<p>返回值有如下类型:</p>\n<ul>\n<li><code>undefined</code>    <code>variable</code> 没有定义过</li>\n<li><code>default</code>    <code>variable</code> 是个默认的定义, 比如 CC 变量</li>\n<li><code>environment</code>    <code>variable</code> 是个环境变量, 并且 make时没有使用 -e 参数</li>\n<li><code>file</code>    <code>variable</code> 定义在Makefile中</li>\n<li><code>command line</code>    <code>variable</code> 定义在命令行中</li>\n<li><code>override</code>    <code>variable</code> 被 override 重新定义过</li>\n<li><code>automatic</code>    <code>variable</code> 是自动化变量</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\">val-<span class=\"keyword\">in</span>-file <span class=\"symbol\">:</span>= test-file</div><div class=\"line\">override val-override <span class=\"symbol\">:</span>= test-override</div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin <span class=\"keyword\">not</span>-define)    <span class=\"comment\"># not-define 没有定义</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin <span class=\"constant\">CC</span>)            <span class=\"comment\"># CC 是Makefile默认定义的变量</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin <span class=\"constant\">PATH</span>)         <span class=\"comment\"># PATH 是 bash 环境变量</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin val-<span class=\"keyword\">in</span>-file)    <span class=\"comment\"># 此Makefile中定义的变量</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin val-<span class=\"keyword\">in</span>-cmd)    <span class=\"comment\"># 这个变量会加在 make 的参数中</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin val-override) <span class=\"comment\"># 此Makefile中定义的override变量</span></div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"variable\">$(</span>origin @)             <span class=\"comment\"># 自动变量, 具体前面的介绍</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make val-<span class=\"keyword\">in</span>-cmd=val-cmd</div><div class=\"line\">undefined</div><div class=\"line\">default</div><div class=\"line\">environment</div><div class=\"line\">file</div><div class=\"line\">command line</div><div class=\"line\">override</div><div class=\"line\">automatic</div></pre></td></tr></table></figure>\n\n<h3 id=\"make_控制函数\">make 控制函数</h3>\n<p>产生一个致命错误: <code>$(error &lt;text ...&gt;)</code></p>\n<p>功能: 输出错误信息, 停止Makefile的运行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># Makefile 内容</span></div><div class=\"line\">all:</div><div class=\"line\">    $(<span class=\"keyword\">error</span> there <span class=\"keyword\">is</span> an <span class=\"keyword\">error</span>!)</div><div class=\"line\">    @echo <span class=\"string\">\"这里不会执行!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># bash 中执行 make</span></div><div class=\"line\">$ make</div><div class=\"line\">Makefile:<span class=\"number\">2</span>: *** there <span class=\"keyword\">is</span> an <span class=\"keyword\">error</span>!.  <span class=\"keyword\">Stop</span>.</div></pre></td></tr></table></figure>\n\n\n\n<p>输出警告: <code>$(warning &lt;text ...&gt;)</code></p>\n<p>功能: 输出警告信息, Makefile继续运行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Makefile 内容</span></div><div class=\"line\"><span class=\"symbol\">all:</span></div><div class=\"line\">    <span class=\"variable\">$(</span>warning there is an warning!)</div><div class=\"line\">    <span class=\"variable\">@echo</span> <span class=\"string\">\"这里会执行!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bash 中执行 make</span></div><div class=\"line\"><span class=\"variable\">$ </span>make</div><div class=\"line\"><span class=\"constant\">Makefile</span><span class=\"symbol\">:</span><span class=\"number\">2</span><span class=\"symbol\">:</span> there is an warning!</div><div class=\"line\">这里会执行!</div></pre></td></tr></table></figure>\n\n<h1 id=\"示例\">示例</h1>\n<p>模仿linux内核scripts文件夹里的makefile的编写思路。Makefile主要分成3类:</p>\n<ul>\n<li>顶层目录的Makefile</li>\n<li>顶层目录的Makefile.build </li>\n<li>各级子目录的Makefile</li>\n</ul>\n<h2 id=\"各级子目录的Makefile\">各级子目录的Makefile</h2>\n<p>它最简单，形式如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">obj-y +</span>=<span class=\"string\"> file.o</span></div><div class=\"line\">obj-y += subdir/</div></pre></td></tr></table></figure>\n\n<p>“obj-y += file.o”表示把当前目录下的file.c编进程序里。</p>\n<p>“obj-y += subdir/“表示要进入subdir这个子目录下去寻找文件来编进程序里，是哪些文件由subdir目录下的Makefile决定。<strong>注意: “subdir/“中的斜杠”/“不可省略</strong></p>\n<h2 id=\"顶层目录的Makefile\">顶层目录的Makefile</h2>\n<p>它除了定义obj-y来指定根目录下要编进程序去的<strong>文件、子目录</strong>外，主要是定义<strong>工具链、编译参数、链接参数</strong>──就是文件中用export导出的各变量。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">CROSS_COMPILE</span> = arm-linux-</div><div class=\"line\"><span class=\"constant\">AS</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>as</div><div class=\"line\"><span class=\"constant\">LD</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>ld</div><div class=\"line\"><span class=\"constant\">CC</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>gcc</div><div class=\"line\"><span class=\"constant\">CPP</span>\t\t= <span class=\"variable\">$(CC)</span> -E</div><div class=\"line\"><span class=\"constant\">AR</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>ar</div><div class=\"line\"><span class=\"constant\">NM</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>nm</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">STRIP</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>strip</div><div class=\"line\"><span class=\"constant\">OBJCOPY</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>objcopy</div><div class=\"line\"><span class=\"constant\">OBJDUMP</span>\t\t= <span class=\"variable\">$(CROSS_COMPILE)</span>objdump</div><div class=\"line\"></div><div class=\"line\">export AS LD CC CPP AR NM</div><div class=\"line\">export STRIP OBJCOPY OBJDUMP</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">CFLAGS</span> := -Wall -Werror -O2 -g</div><div class=\"line\"><span class=\"constant\">CFLAGS</span> += -I <span class=\"variable\">$(shell pwd)</span>/include</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">LDFLAGS</span> := -lm -lfreetype -lts -lpthread -ljpeg</div><div class=\"line\"></div><div class=\"line\">export CFLAGS LDFLAGS</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">TOPDIR</span> := <span class=\"variable\">$(shell pwd)</span></div><div class=\"line\">export TOPDIR</div><div class=\"line\"></div><div class=\"line\"><span class=\"constant\">TARGET</span> := digitpic</div></pre></td></tr></table></figure>\n\n<h2 id=\"顶层目录的Makefile-build\">顶层目录的Makefile.build</h2>\n<p>这是最复杂的部分，它是利用递归的方式编译。它的功能就是把某个目录及它的所有子目录中、需要编进程序去的文件都编译出来，打包为built-in.o</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">PHONY := __build</div><div class=\"line\">__build:</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">obj-y :=</div><div class=\"line\">subdir-y :=</div><div class=\"line\"></div><div class=\"line\">include Makefile</div><div class=\"line\"></div><div class=\"line\"># obj-y := a.o b.o c/ d/</div><div class=\"line\"># <span class=\"variable\">$(</span><span class=\"keyword\">filter</span> <span class=\"variable\">%/</span>, <span class=\"variable\">$(</span>obj-y))   : c/ d/</div><div class=\"line\"># __subdir-y  : c d</div><div class=\"line\"># subdir-y    : c d</div><div class=\"line\">__subdir-y\t:= <span class=\"variable\">$(</span>patsubst <span class=\"variable\">%/</span>,<span class=\"variable\">%,</span><span class=\"variable\">$(</span><span class=\"keyword\">filter</span> <span class=\"variable\">%/</span>, <span class=\"variable\">$(</span>obj-y)))</div><div class=\"line\">subdir-y\t+= <span class=\"variable\">$(</span>__subdir-y)</div><div class=\"line\"></div><div class=\"line\"># c/built-<span class=\"keyword\">in</span>.o d/built-<span class=\"keyword\">in</span>.o</div><div class=\"line\">subdir_objs := <span class=\"variable\">$(</span>foreach f,<span class=\"variable\">$(</span>subdir-y),<span class=\"variable\">$(</span>f)/built-<span class=\"keyword\">in</span>.o)</div><div class=\"line\"></div><div class=\"line\"># a.o b.o</div><div class=\"line\">cur_objs := <span class=\"variable\">$(</span><span class=\"keyword\">filter</span>-out <span class=\"variable\">%/</span>, <span class=\"variable\">$(</span>obj-y))</div><div class=\"line\">dep_files := <span class=\"variable\">$(</span>foreach f,<span class=\"variable\">$(</span>cur_objs),.<span class=\"variable\">$(</span>f).d)</div><div class=\"line\">dep_files := <span class=\"variable\">$(</span>wildcard <span class=\"variable\">$(</span>dep_files))</div><div class=\"line\"></div><div class=\"line\">ifneq (<span class=\"variable\">$(</span>dep_files),)</div><div class=\"line\">  include <span class=\"variable\">$(</span>dep_files)</div><div class=\"line\">endif</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">PHONY += <span class=\"variable\">$(</span>subdir-y)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">__build : <span class=\"variable\">$(</span>subdir-y) built-<span class=\"keyword\">in</span>.o</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$(</span>subdir-y):</div><div class=\"line\">\tmake -C <span class=\"variable\">$@</span> -f <span class=\"variable\">$(</span>TOPDIR)/Makefile.build</div><div class=\"line\"></div><div class=\"line\">built-<span class=\"keyword\">in</span>.o : <span class=\"variable\">$(</span>cur_objs) <span class=\"variable\">$(</span>subdir_objs)</div><div class=\"line\">\t<span class=\"variable\">$(</span>LD) -r -o <span class=\"variable\">$@</span> <span class=\"variable\">$^</span></div><div class=\"line\"></div><div class=\"line\">dep_file = .<span class=\"variable\">$@</span>.d</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">%.</span>o : <span class=\"variable\">%.</span>c</div><div class=\"line\">\t<span class=\"variable\">$(</span>CC) <span class=\"variable\">$(</span>CFLAGS) -Wp,-MD,<span class=\"variable\">$(</span>dep_file) -c -o <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span></div><div class=\"line\">\t</div><div class=\"line\">.PHONY : <span class=\"variable\">$(</span>PHONY)</div></pre></td></tr></table></figure>\n\n<h2 id=\"怎么使用这套Makefile\">怎么使用这套Makefile</h2>\n<ol>\n<li>把顶层Makefile, Makefile.build放入程序的顶层目录</li>\n<li>修改顶层Makefile（工具链、编译选项、链接选项、obj-y决定顶层目录下哪些文件、哪些子目录被编进程序、修改TARGET，这是用来指定编译出来的程序的名字）</li>\n</ol>\n","source":"_posts/makefile.md","raw":"---\nlayout: post\ntitle: \"Makefile basics\"\ncomments: true\ntags: \n\n\t\n---\n\n每次看完文档，过一段时间不用就忘记了。今天做毕业设计需要写Makefile,又重新看了一下[GNU make](http://www.gnu.org/software/make/manual/make.html)，干脆把常用的提取出来。以后也把一些常用的函数等等写在博客好了，我这记忆力也是没救了。\n\n-----------\n\n后来google发现阮一峰老师总结的很好。文中部分内容来自[阮一峰Make命令教程](http://www.ruanyifeng.com/blog/2015/02/make.html),以后发现常用的知识就在这篇补充好了。\n\n------\n\n\n#Makefile\nMakefile文件由一系列规则（rules）构成。每条规则的形式如下。\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n目标（target）是必须的，不能省略。前置条件（prerequisites）和命令（commands）都是可选的，但是必须要有一个。\n\n在Makefile中，规则的顺序是很重要的，因为，**Makefile中只应该有一个最终目标**，其它的目标都是被这个目标所连带出来的，所以一定要让make知道你的最终目标是什么。<!--more-->\n\n##目标（target）\n一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。\n\n```\ntest:a.c b.c a.h\r\tgcc -o test a.c b.c\n``` \n\n除了文件名，目标还可以是某个操作的名字，这称为\"伪目标\"（phony target）。\n\n\n- `all`\t所有目标的目标，其功能一般是编译所有的目标\n- `clean`\t删除所有被make创建的文件\n- `install`\t安装已编译好的程序，其实就是把目标可执行文件拷贝到指定的目录中去\n- `print`\t列出改变过的源文件\n- `tar`\t把源程序打包备份. 也就是一个tar文件\n- `dist`\t创建一个压缩文件, 一般是把tar文件压成Z文件. 或是gz文件\n- `TAGS`\t更新所有的目标, 以备完整地重编译使用\n- `check` 或 `test`\t一般用来测试makefile的流程\n\n下面代码的目标是clean，它不是文件名，而是一个操作的名字，属于\"伪目标 \"，作用是删除对象文件。但是，如果当前目录中，正好有一个文件叫做clean，那么这个命令不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。\n\n```\nclean:\n      rm *.o\n```\n\n为了避免这种情况，可以明确声明clean是\"伪目标\"，写法如下。声明clean是\"伪目标\"之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令。像.PHONY这样的内置目标名还有不少，可以查看[手册](http://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets)。\n\n```\n.PHONY: clean\nclean:\n        rm *.o temp\n```\n\n如果Make命令运行时没有指定目标，默认会执行Makefile文件的第一个目标。\n\n```\nutorial:\n\t@# todo: have this actually run some kind of tutorial wizard?\n\t@echo \"Please read the 'Makefile' file to go through this tutorial\"\n```\n执行make命令相当于make tutorial。\n\n##前置条件（prerequisites）\n\n前置条件通常是一组文件名，之间用空格分隔。它指定了\"目标\"是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的last-modification时间戳比目标的时间戳新），\"目标\"就需要重新构建。\n\n```\nresult.txt: source.txt\n    cp source.txt result.txt\n```\n上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么make result.txt可以正常运行，否则必须再写一条规则，来生成 source.txt 。\n\n```\nsource.txt:\n    echo \"this is the source\" > source.txt\n```\n上面代码中，source.txt后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用make source.txt，它都会生成。\n\n##命令（commands）\n命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建\"目标\"的具体指令，它的运行结果通常就是生成目标文件。\n每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明。\n\n```\n.RECIPEPREFIX = >\nall:\n> echo Hello, world\n```\n\n需要注意的是，每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。\n\n```\nvar-lost:\n    export foo=bar\n    echo \"foo=[$$foo]\"\n```\n\n上面代码执行后（make var-lost），取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。\n\n```\nvar-kept:\n    export foo=bar; echo \"foo=[$$foo]\"\n```\n\n另一个解决办法是在换行符前加反斜杠转义。\n\n```\nvar-kept:\n    export foo=bar; \\\n    echo \"foo=[$$foo]\"\n```\n\n最后一个方法是加上.ONESHELL:命令。\n\n```\n.ONESHELL:\nvar-kept:\n    export foo=bar; \n    echo \"foo=[$$foo]\"\n```\n\nIf you want to export specific variables to a **sub-make**, use the export directive, like this: `export variable` …\n\nIf you want to prevent a variable from being exported, use the unexport directive, like this: `unexport variable` …\n#常用语法\n\n##注释\n井号（#）在Makefile中表示注释。如果要使用或者输出\"#\"字符, 需要进行转义, \"\\#\"\n##回声（echoing）\n正常情况下，**make会打印每条命令**，然后再执行，这就叫做回声（echoing）。\n\n- 不用前缀   : 输出执行的命令以及命令执行的结果, 出错的话停止执行\n- 前缀 `@`  : 只输出命令执行的结果, 出错的话停止执行\n- 前缀 `-`   : 命令执行有错的话, 忽略错误, 继续执行\n\n\n```\ntest:\n    # 这是测试\n```\n执行上面的规则，会得到下面的结果。\n\n$ make test\n\n```\n# 这是测试\n```\n在命令的前面加上@，就可以关闭回声。\n\n```\ntest:\n    @# 这是测试\n```\n现在再执行make test，就不会有任何输出。\n由于在构建过程中，需要了解当前在执行哪条命令，**所以通常只在注释和纯显示的echo命令前面加上@。**\n\n```\ntest:\n    @# 这是测试\n    @echo TODO\n```\n##通配符\n通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 [...] 。\n\n- `*`      表示任意一个或多个字符\n- `?`      表示任意一个字符\n- `[...]`  ex. [abcd] 表示a,b,c,d中任意一个字符, [^abcd]表示除a,b,c,d以外的字符, [0-9]表示 0~9中任意一个数字\n- `~`      表示用户的home目录\n\n比如， *.o 表示所有后缀名为o的文件。\n\n```\nclean:\n        rm -f *.o\n```\n\n##路径搜索\n当一个Makefile中涉及到大量源文件时(这些源文件和Makefile极有可能不在同一个目录中),\n\n这时, 最好将源文件的路径明确在Makefile中, 便于编译时查找. Makefile中有个特殊的变量 VPATH 就是完成这个功能的.\n\n指定了 VPATH 之后, 如果当前目录中没有找到相应文件或依赖的文件, Makefile 回到 VPATH 指定的路径中再去查找..\n\nVPATH 使用方法:\n\n- `vpath <directories>`             当前目录中找不到文件时, 就从`directories`中搜索\n- `vpath <pattern> <directories>`   符合`pattern`格式的文件, 就从`directories`中搜索\n- `vpath <pattern>`                 清除符合`pattern`格式的文件搜索路径 \n- `vpath`                           清除所有已经设置好的文件路径 \n\n```\n# 示例1 - 当前目录中找不到文件时, 按顺序从 src目录 ../parent-dir目录中查找文件\nVPATH src:../parent-dir   \n\n# 示例2 - .h结尾的文件都从 ./header 目录中查找\nVPATH %.h ./header\n\n# 示例3 - 清除示例2中设置的规则\nVPATH %.h\n\n# 示例4 - 清除所有VPATH的设置\nVPATH\n``` \n                           \n\n##模式匹配\nMake命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。\n\n```\n%.o: %.c\n```\n等同于下面的写法。\n\n```\nf1.o: f1.c\nf2.o: f2.c\n```\n**使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。**\n##变量和赋值符\nMakefile 允许使用等号自定义变量。\n\n```\ntxt = Hello World\ntest:\n    @echo $(txt)\n```\n上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 `$( )` 之中。\n调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。\n\n```\ntest:\n    @echo $$HOME\n```\n有时，变量的值可能指向另一个变量。\n\n```\nv1 = $(v2)\n```\n上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。\n\n为了解决类似问题，Makefile一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看[StackOverflow](http://stackoverflow.com/questions/448910/makefile-variable-assignment)。其中 = 和 := 的区别在于, := 只能使用前面定义好的变量, = 可以使用后面定义的变量\n\n```\n# Makefile内容\nOBJS2 = $(OBJS1) programC.o\nOBJS1 = programA.o programB.o\n\nall:\n    @echo $(OBJS2)\n\n# bash中执行 make, 可以看出虽然 OBJS1 是在 OBJS2 之后定义的, 但在 OBJS2中可以提前使用\n$ make\nprogramA.o programB.o programC.o\n---------------------------------------\n# Makefile内容\nOBJS2 := $(OBJS1) programC.o\nOBJS1 := programA.o programB.o\n\nall:\n    @echo $(OBJS2)\n\n# bash中执行 make, 可以看出 OBJS2 中的 $(OBJS1) 为空\n$ make\nprogramC.o\n```\n\n##内置变量（Implicit Variables）\nMake命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见[手册](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)。\n\n```\noutput:\n    $(CC) -o output input.c\n```\n\n##自动变量（Automatic Variables）\nMake命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。\n\n###$@\n`$@`指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 `$@` 就指代foo。\n\n```\na.txt b.txt: \n    touch $@\n```\n等同于下面的写法。\n\n```\na.txt:\n    touch a.txt\nb.txt:\n    touch b.txt\n```\n###$<\n`$<`指代第一个前置条件。比如，规则为 t: p1 p2，那么$< 就指代p1。\n\n```\na.txt: b.txt c.txt\n    cp $< $@ \n```\n等同于下面的写法。\n\n```\na.txt: b.txt c.txt\n    cp b.txt a.txt \n```\n###$?\n `$?` 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。\n\n###$^\n`$^` 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。\n\n###$*\n`$*` 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，`$*` 就表示 f1。\n\n###$(@D) 和 $(@F)\n`$(@D)` 和 `$(@F)` 分别指向 $@ 的目录名和文件名。比如，`$@`是 src/input.c，那么`$(@D)` 的值为 src ，`$(@F)` 的值为 input.c。\n\n###$(<D) 和 $(<F)\n`$(<D)` 和 `$(<F)` 分别指向 `$<` 的目录名和文件名。\n所有的自动变量清单，请看[手册](https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html)。下面是自动变量的一个例子。\n\n```\ndest/%.txt: src/%.txt\n    @[ -d dest ] || mkdir dest\n    cp $< $@\n```\n上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，`$<` 指代前置文件（src/%.txt）， `$@` 指代目标文件（dest/%.txt）。\n\n##判断和循环\nMakefile使用 Bash 语法，完成判断和循环。条件判断的关键字主要有 ifeq ifneq ifdef ifndef\n\n```\nifeq ($(CC),gcc)\n  libs=$(libs_for_gcc)\nelse\n  libs=$(normal_libs)\nendif\n```\n上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。\n\n```\nLIST = one two three\nall:\n    for i in $(LIST); do \\\n        echo $$i; \\\n    done\n\n#等同于\n\nall:\n    for i in one two three; do \\\n        echo $i; \\\n    done\n```\n上面代码的运行结果。\n\n```\none\ntwo\nthree\n```\n##函数\nMakefile 还可以使用函数，格式如下。\n\n```\n$(function arguments)\n# 或者\n${function arguments}\n```\nMakefile提供了许多[内置函数](http://www.gnu.org/software/make/manual/html_node/Functions.html)，可供调用。下面是几个常用的内置函数。\n\n###shell 函数\nshell 函数用来执行 shell 命令 语法：`$(shell <shell command>)`\n\n```\nsrcfiles := $(shell echo src/{00..99}.txt)\n```\n### 字符串函数\n（1）strip函数\n功能: 去掉 `string` 字符串中开头和结尾的空字符\n\n返回: 被去掉空格的字符串值\n\n```\n# Makefile 内容\nVAL := \"       aa  bb  cc \"\n\nall:\n    @echo \"去除空格前: \" $(VAL)\n    @echo \"去除空格后: \" $(strip $(VAL))\n\n# bash 中执行 make\n$ make\n去除空格前:         aa  bb  cc \n去除空格后:   aa bb cc\n```\n\n（2）wildcard 函数\n它的用法是：`$(wildcard PATTERN...)`。在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表。如果不存在任何符合此模式的文件，函数会忽略模式字符并返回空。\n\n获取src目录下所有`.txt`结尾的文件\n```\nsrcfiles := $(wildcard src/*.txt)\n```\n（3）subst 函数\nsubst 函数用来文本替换，格式如下。\n\n```\n$(subst from,to,text)\n```\n\n下面的例子将字符串\"feet on the street\"替换成\"fEEt on the strEEt\"。\n\n```\n$(subst ee,EE,feet on the street)\n```\n下面是一个稍微复杂的例子。\n\n```\ncomma:= ,\nempty:=\n# space变量用两个空变量作为标识符，当中是一个空格\nspace:= $(empty) $(empty)\nfoo:= a b c\nbar:= $(subst $(space),$(comma),$(foo))\n# bar is now `a,b,c'.\n```\n（4）patsubst函数\npatsubst 函数用于模式匹配的替换，格式如下。\n\n```\n$(patsubst pattern,replacement,text)\n```\n下面的例子将文件名\"x.c.c bar.c\"，替换成\"x.c.o bar.o\"。\n\n```\n$(patsubst %.c,%.o,x.c.c bar.c)\n```\n（5）替换后缀名\n替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上patsubst函数的一种简写形式。\n\n```\nmin: $(OUTPUT:.js=.min.js)\n```\n上面代码的意思是，将变量OUTPUT中的后缀名 .js 全部替换成 .min.js 。\n\n（6）查找字符串函数: `$(findstring <find>,<in>)`\n\n功能: 在字符串 `in` 中查找 `find` 字符串\n\n返回: 如果找到, 返回 `find` 字符串,  否则返回空字符串\n\n```\n# Makefile 内容\nVAL := \"       aa  bb  cc \"\n\nall:\n    @echo $(findstring aa,$(VAL))\n    @echo $(findstring ab,$(VAL))\n\n# bash 中执行 make\n$ make\naa\n\n```\n\n（7）过滤函数: `$(filter <pattern...>,<text>)`\n\n功能: 以 `pattern` 模式过滤字符串 `text`, *保留* 符合模式 `pattern` 的单词, 可以有多个模式\n\n返回: 符合模式 `pattern` 的字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(filter %.o %.a,program.c program.o program.a)\n\n\n# bash 中执行 make\n$ make\nprogram.o program.a\n\n```\n（8）反过滤函数: `$(filter-out <pattern...>,<text>)`\n\n功能: 以 `pattern` 模式过滤字符串 `text`, *去除* 符合模式 `pattern` 的单词, 可以有多个模式\n\n返回: 不符合模式 `pattern` 的字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(filter-out %.o %.a,program.c program.o program.a)\n\n# bash 中执行 make\n$ make\nprogram.c\n```\n（9）排序函数: `$(sort <list>)`\n功能: 给字符串 `list` 中的单词排序 (升序)\n\n返回: 排序后的字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(sort bac abc acb cab)\n\n# bash 中执行 make\n$ make\nabc acb bac cab\n```\n（10）取单词函数: `$(word <n>,<text>)`\n功能: 取字符串 `text` 中的 第`n`个单词 (n从1开始)\n\n返回: `text` 中的第`n`个单词, 如果`n` 比 `text` 中单词个数要大, 则返回空字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(word 1,aa bb cc dd)\n    @echo $(word 5,aa bb cc dd)\n    @echo $(word 4,aa bb cc dd)\n\n# bash 中执行 make\n$ make\naa\n\ndd\n```\n\n（11）取单词串函数: `$(wordlist <s>,<e>,<text>)`\n\n功能: 从字符串`text`中取从`s`开始到`e`的单词串. `s`和`e`是一个数字.\n\n返回: 从`s`到`e`的字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(wordlist 1,3,aa bb cc dd)\n    @echo $(word 5,6,aa bb cc dd)\n    @echo $(word 2,5,aa bb cc dd)\n\n\n# bash 中执行 make\n$ make\naa bb cc\n\nbb\n```\n \n\n（12）单词个数统计函数: `$(words <text>)`\n\n功能: 统计字符串 `text` 中单词的个数\n\n返回: 单词个数\n\n```\n# Makefile 内容\n\nall:\n    @echo $(words aa bb cc dd)\n    @echo $(words aabbccdd)\n    @echo $(words )\n\n# bash 中执行 make\n$ make\n4\n1\n0\n```\n\n（13）首单词函数: `$(firstword <text>)`\n\n功能: 取字符串 `text` 中的第一个单词\n\n返回: 字符串 `text` 中的第一个单词\n\n```\n# Makefile 内容\nall:\n    @echo $(firstword aa bb cc dd)\n    @echo $(firstword aabbccdd)\n    @echo $(firstword )\n\n# bash 中执行 make\n$ make\naa\naabbccdd\n```\n###文件名函数\n\n（1）取目录函数: `$(dir <names...>)`\n\n功能: 从文件名序列 `names> 中取出目录部分\n\n返回: 文件名序列 `names> 中的目录部分\n\n```\n# Makefile 内容\nall:\n    @echo $(dir /home/a.c ./bb.c ../c.c d.c)\n\n\n# bash 中执行 make\n$ make\n/home/ ./ ../ ./\n```\n \n\n（2）取文件函数: `$(notdir <names...>)`\n\n功能: 从文件名序列 `names` 中取出非目录部分\n\n返回: 文件名序列 `names` 中的非目录部分\n\n```\n# Makefile 内容\nall:\n    @echo $(notdir /home/a.c ./bb.c ../c.c d.c)\n\n# bash 中执行 make\n$ make\na.c bb.c c.c d.c\n```\n \n\n（3）取后缀函数: `$(suffix <names...>)`\n\n功能: 从文件名序列 `names` 中取出各个文件名的后缀\n\n返回: 文件名序列 `names` 中各个文件名的后缀, 没有后缀则返回空字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(suffix /home/a.c ./b.o ../c.a d)\n\n# bash 中执行 make\n$ make\n.c .o .a\n```\n \n\n（4）取前缀函数: `$(basename <names...>)`\n\n功能: 从文件名序列 `names` 中取出各个文件名的前缀\n\n返回: 文件名序列 `names` 中各个文件名的前缀, 没有前缀则返回空字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(basename /home/a.c ./b.o ../c.a /home/.d .e)\n\n\n# bash 中执行 make\n$ make\n/home/a ./b ../c /home/\n```\n \n\n（5）加后缀函数: `$(addsuffix <suffix>,<names...>)`\n\n功能: 把后缀 `suffix` 加到 `names` 中的每个单词后面\n\n返回: 加过后缀的文件名序列\n\n```\n# Makefile 内容\nall:\n    @echo $(addsuffix .c,/home/a b ./c.o ../d.c)\n\n\n# bash 中执行 make\n$ make\n/home/a.c b.c ./c.o.c ../d.c.c\n```\n \n\n（6）加前缀函数: `$(addprefix <prefix>,<names...>)`\n\n功能: 把前缀 `prefix` 加到 `names` 中的每个单词前面\n\n返回: 加过前缀的文件名序列\n\n```\n# Makefile 内容\nall:\n    @echo $(addprefix test_,/home/a.c b.c ./d.c)\n\n# bash 中执行 make\n$ make\ntest_/home/a.c test_b.c test_./d.c\n```\n \n\n（7）连接函数: `$(join <list1>,<list2>)`\n\n功能: `list2` 中对应的单词加到 `list1` 后面\n\n返回: 连接后的字符串\n\n```\n# Makefile 内容\nall:\n    @echo $(join a b c d,1 2 3 4)\n    @echo $(join a b c d,1 2 3 4 5)\n    @echo $(join a b c d e,1 2 3 4)\n\n# bash 中执行 make\n$ make\na1 b2 c3 d4\na1 b2 c3 d4 5\na1 b2 c3 d4 e\n```\n\n###foreach函数\n语法: `$(foreach <var>,<list>,<text>)`\n\n示例:\n\n```\n# Makefile 内容\ntargets := a b c d\nobjects := $(foreach i,$(targets),$(i).o)\n\nall:\n    @echo $(targets)\n    @echo $(objects)\n\n# bash 中执行 make\n$ make\na b c d\na.o b.o c.o d.o\n```\n\n###if\n这里的if是个函数, 和前面的条件判断不一样, 前面的条件判断属于Makefile的关键字\n\n语法:\n\n`$(if <condition>,<then-part>)`\n\n`$(if <condition>,<then-part>,<else-part>)`\n\n \n\n示例:\n\n```\n# Makefile 内容\nval := a\nobjects := $(if $(val),$(val).o,nothing)\nno-objects := $(if $(no-val),$(val).o,nothing)\n\nall:\n    @echo $(objects)\n    @echo $(no-objects)\n\n# bash 中执行 make\n$ make\na.o\nnothing\n```\n\n### call - 创建新的参数化函数\n\n语法:\n\n`$(call <expression>,<parm1>,<parm2>,<parm3>...)`\n\n \n\n示例:\n\n```\n# Makefile 内容\nlog = \"====debug====\" $(1) \"====end====\"\n\nall:\n    @echo $(call log,\"正在 Make\")\n\n# bash 中执行 make\n$ make\n====debug==== 正在 Make ====end====\n```\n\n###origin - 判断变量的来源\n语法:\n\n`$(origin <variable>)`\n\n返回值有如下类型:\n\n- `undefined`\t`variable` 没有定义过\n- `default`\t`variable` 是个默认的定义, 比如 CC 变量\n- `environment`\t`variable` 是个环境变量, 并且 make时没有使用 -e 参数\n- `file`\t`variable` 定义在Makefile中\n- `command line`\t`variable` 定义在命令行中\n- `override`\t`variable` 被 override 重新定义过\n- `automatic`\t`variable` 是自动化变量\n\n示例:\n\n```\n# Makefile 内容\nval-in-file := test-file\noverride val-override := test-override\n\nall:\n    @echo $(origin not-define)    # not-define 没有定义\n    @echo $(origin CC)            # CC 是Makefile默认定义的变量\n    @echo $(origin PATH)         # PATH 是 bash 环境变量\n    @echo $(origin val-in-file)    # 此Makefile中定义的变量\n    @echo $(origin val-in-cmd)    # 这个变量会加在 make 的参数中\n    @echo $(origin val-override) # 此Makefile中定义的override变量\n    @echo $(origin @)             # 自动变量, 具体前面的介绍\n\n# bash 中执行 make\n$ make val-in-cmd=val-cmd\nundefined\ndefault\nenvironment\nfile\ncommand line\noverride\nautomatic\n```\n\n###make 控制函数\n\n产生一个致命错误: `$(error <text ...>)`\n\n功能: 输出错误信息, 停止Makefile的运行\n\n```\n# Makefile 内容\nall:\n    $(error there is an error!)\n    @echo \"这里不会执行!\"\n\n# bash 中执行 make\n$ make\nMakefile:2: *** there is an error!.  Stop.\n```\n \n\n输出警告: `$(warning <text ...>)`\n\n功能: 输出警告信息, Makefile继续运行\n\n```\n# Makefile 内容\nall:\n    $(warning there is an warning!)\n    @echo \"这里会执行!\"\n\n# bash 中执行 make\n$ make\nMakefile:2: there is an warning!\n这里会执行!\n```\n\n#示例\n模仿linux内核scripts文件夹里的makefile的编写思路。Makefile主要分成3类:\n\n- 顶层目录的Makefile\n- 顶层目录的Makefile.build \n- 各级子目录的Makefile\n\n##各级子目录的Makefile\n它最简单，形式如下：\r\r```\robj-y += file.o\robj-y += subdir/\r```\r\"obj-y += file.o\"表示把当前目录下的file.c编进程序里。\n\r\"obj-y += subdir/\"表示要进入subdir这个子目录下去寻找文件来编进程序里，是哪些文件由subdir目录下的Makefile决定。**注意: \"subdir/\"中的斜杠\"/\"不可省略**\n\r##顶层目录的Makefile\n\r它除了定义obj-y来指定根目录下要编进程序去的**文件、子目录**外，主要是定义**工具链、编译参数、链接参数**──就是文件中用export导出的各变量。\n\r```\rCROSS_COMPILE = arm-linux-\rAS\t\t= $(CROSS_COMPILE)as\rLD\t\t= $(CROSS_COMPILE)ld\rCC\t\t= $(CROSS_COMPILE)gcc\rCPP\t\t= $(CC) -E\rAR\t\t= $(CROSS_COMPILE)ar\rNM\t\t= $(CROSS_COMPILE)nm\r\rSTRIP\t\t= $(CROSS_COMPILE)strip\rOBJCOPY\t\t= $(CROSS_COMPILE)objcopy\rOBJDUMP\t\t= $(CROSS_COMPILE)objdump\r\rexport AS LD CC CPP AR NM\rexport STRIP OBJCOPY OBJDUMP\r\rCFLAGS := -Wall -Werror -O2 -g\rCFLAGS += -I $(shell pwd)/include\r\rLDFLAGS := -lm -lfreetype -lts -lpthread -ljpeg\r\rexport CFLAGS LDFLAGS\r\rTOPDIR := $(shell pwd)\rexport TOPDIR\r\rTARGET := digitpic\r```\r\n\n##顶层目录的Makefile.build\n这是最复杂的部分，它是利用递归的方式编译。它的功能就是把某个目录及它的所有子目录中、需要编进程序去的文件都编译出来，打包为built-in.o\n\n```\nPHONY := __build\r__build:\r\r\robj-y :=\rsubdir-y :=\r\rinclude Makefile\r\r# obj-y := a.o b.o c/ d/\r# $(filter %/, $(obj-y))   : c/ d/\r# __subdir-y  : c d\r# subdir-y    : c d\r__subdir-y\t:= $(patsubst %/,%,$(filter %/, $(obj-y)))\rsubdir-y\t+= $(__subdir-y)\r\r# c/built-in.o d/built-in.o\rsubdir_objs := $(foreach f,$(subdir-y),$(f)/built-in.o)\r\r# a.o b.o\rcur_objs := $(filter-out %/, $(obj-y))\rdep_files := $(foreach f,$(cur_objs),.$(f).d)\rdep_files := $(wildcard $(dep_files))\r\rifneq ($(dep_files),)\r  include $(dep_files)\rendif\r\r\rPHONY += $(subdir-y)\r\r\r__build : $(subdir-y) built-in.o\r\r$(subdir-y):\r\tmake -C $@ -f $(TOPDIR)/Makefile.build\r\rbuilt-in.o : $(cur_objs) $(subdir_objs)\r\t$(LD) -r -o $@ $^\r\rdep_file = .$@.d\r\r%.o : %.c\r\t$(CC) $(CFLAGS) -Wp,-MD,$(dep_file) -c -o $@ $<\r\t\r.PHONY : $(PHONY)\n```\n##怎么使用这套Makefile\n\n1. 把顶层Makefile, Makefile.build放入程序的顶层目录\n2. 修改顶层Makefile（工具链、编译选项、链接选项、obj-y决定顶层目录下哪些文件、哪些子目录被编进程序、修改TARGET，这是用来指定编译出来的程序的名字）","slug":"makefile","date":1427340652000,"updated":1427340652000,"excerpt":"<p>每次看完文档，过一段时间不用就忘记了。今天做毕业设计需要写Makefile,又重新看了一下<a href=\"http://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"external\">GNU make</a>，干脆把常用的提取出来。以后也把一些常用的函数等等写在博客好了，我这记忆力也是没救了。</p>\n<hr>\n<p>后来google发现阮一峰老师总结的很好。文中部分内容来自<a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"external\">阮一峰Make命令教程</a>,以后发现常用的知识就在这篇补充好了。</p>\n<hr>\n<h1 id=\"Makefile\">Makefile</h1>\n<p>Makefile文件由一系列规则（rules）构成。每条规则的形式如下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">&lt;target&gt;</span> <span class=\"symbol\">:</span> &lt;prerequisites&gt; </span></div><div class=\"line\">[tab]  &lt;commands&gt;</div></pre></td></tr></table></figure>\n\n<p>目标（target）是必须的，不能省略。前置条件（prerequisites）和命令（commands）都是可选的，但是必须要有一个。</p>\n<p>在Makefile中，规则的顺序是很重要的，因为，<strong>Makefile中只应该有一个最终目标</strong>，其它的目标都是被这个目标所连带出来的，所以一定要让make知道你的最终目标是什么。","_id":"79ssyi2m8ec96job","categories":[],"photos":[],"link":""},{"layout":"post","title":"Computer Organization","comments":true,"tags":["dbgpuof6xdacbx4g"],"content":"<h1 id=\"计算机基本结构\">计算机基本结构</h1>\n<h2 id=\"冯·诺依曼结构的要点\">冯·诺依曼结构的要点</h2>\n<p>明确了计算机的五大组成部分：</p>\n<ol>\n<li>运算器，CA：central arithmetical</li>\n<li>控制器，CC：central control</li>\n<li>存储器，M：memory</li>\n<li>输入设备，I：input</li>\n<li>输出设备，O：output</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E4%BA%94%E5%A4%A7%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png\" alt=\"五大组成部分\"></p>\n<p>存储程序的概念：</p>\n<p>数据和程序均以<strong>二进制</strong>代码形式不加区别地存放在<strong>存储器</strong>中，存放位置由存储器的地址指定。</p>\n<p>计算机在工作时能够自动地从存储器中取出指令加以执行。不需要通过“插线”临时组合电路完成不同任务。</p>\n<h2 id=\"计算机结构的简化模型（模型机）\">计算机结构的简化模型（模型机）</h2>\n<h3 id=\"存储器\">存储器</h3>\n<p><img src=\"https://github.com/thddaniel/Myblog/raw/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8.png\" alt=\"模型机的存储器\"></p>\n<p>注：该模型机中的“存储器”即指主存（内存）</p>\n<h3 id=\"控制器\">控制器</h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8.png\" alt=\"模型机的控制器\"></p>\n<ul>\n<li>IR存放“正在执行或即将执行的指令”</li>\n<li>PC存放“下一条指令的存储单元地址”，具有自动增量计数的功能</li>\n<li>MAR在访存时用于存放“存储单元的地址”</li>\n<li>MDR在访存时用于存放“对存储单元读/写的数据”</li>\n<li>指令译码部件对IR中的指令进行译码，以确定IR中存放的是哪一条指令</li>\n<li>控制电路产生控制信号，在时序脉冲的同步下控制各个部件的动作</li>\n</ul>\n<h3 id=\"运算器\">运算器</h3>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E8%BF%90%E7%AE%97%E5%99%A8.png\" alt=\"模型机的运算器\"></p>\n<ul>\n<li>R0~Rn-1是n个<strong>通用寄存器</strong>，用于临时存放数据。数据可能来自存储器，也可能来自其它通用寄存器或ALU的输出</li>\n<li>ALU对X、Y中的数据进行运算，将结果送到Z。X、Y、Z作为ALU的数据暂存器，可视为ALU的一部分</li>\n<li>核心部件ALU用于完成算术运算和逻辑运算</li>\n<li>F用于存放运算结果的状态 （零/正负/进位/溢出）</li>\n</ul>\n<h2 id=\"计算机执行指令的过程\">计算机执行指令的过程</h2>\n<ol>\n<li>取指：控制器将指令的地址送往存储器，存储器按给定的地址读出指令内容，送回控制器。</li>\n<li>译码：控制器分析指令的操作性质，控制器向有关部件发出指令所需的控制信号。</li>\n<li>执行：控制器从通用寄存器或存储器取出操作数，控制器命令运算器对操作数进行指令规定的运算。</li>\n<li>回写：将运算结果写入通用寄存器或存储器。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"执行过程\"></p>\n<h1 id=\"指令系统体系结构\">指令系统体系结构</h1>\n<h1 id=\"算术逻辑单元\">算术逻辑单元</h1>\n<h1 id=\"乘法器和除法器\">乘法器和除法器</h1>\n","source":"_posts/计算机基本结构.md","raw":"---\nlayout: post\ntitle: \"Computer Organization\"\ncomments: true\ntags: \n\t- 计算机原理\n\n---\n\n\n#计算机基本结构\n\n##冯·诺依曼结构的要点\n明确了计算机的五大组成部分：\n\n1. 运算器，CA：central arithmetical\n2. 控制器，CC：central control\n3. 存储器，M：memory\n4. 输入设备，I：input\n5. 输出设备，O：output\n\n![五大组成部分](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E4%BA%94%E5%A4%A7%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png)\n\n存储程序的概念：\n\n数据和程序均以**二进制**代码形式不加区别地存放在**存储器**中，存放位置由存储器的地址指定。\n\n计算机在工作时能够自动地从存储器中取出指令加以执行。不需要通过“插线”临时组合电路完成不同任务。\n\n##计算机结构的简化模型（模型机）\n###存储器\n![模型机的存储器](https://github.com/thddaniel/Myblog/raw/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E5%AD%98%E5%82%A8%E5%99%A8.png)\n\n注：该模型机中的“存储器”即指主存（内存）\n\n###控制器\n\n![模型机的控制器](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8.png)\n\n- IR存放“正在执行或即将执行的指令”\n- PC存放“下一条指令的存储单元地址”，具有自动增量计数的功能\n- MAR在访存时用于存放“存储单元的地址”\n- MDR在访存时用于存放“对存储单元读/写的数据”\n- 指令译码部件对IR中的指令进行译码，以确定IR中存放的是哪一条指令\n- 控制电路产生控制信号，在时序脉冲的同步下控制各个部件的动作\n\n###运算器\n\n![模型机的运算器](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%A8%A1%E5%9E%8B%E6%9C%BA%E7%9A%84%E8%BF%90%E7%AE%97%E5%99%A8.png)\n\n- R0~Rn-1是n个**通用寄存器**，用于临时存放数据。数据可能来自存储器，也可能来自其它通用寄存器或ALU的输出\n- ALU对X、Y中的数据进行运算，将结果送到Z。X、Y、Z作为ALU的数据暂存器，可视为ALU的一部分\n- 核心部件ALU用于完成算术运算和逻辑运算\n- F用于存放运算结果的状态 （零/正负/进位/溢出）\n\n##计算机执行指令的过程\n\n1. 取指：控制器将指令的地址送往存储器，存储器按给定的地址读出指令内容，送回控制器。\n2. 译码：控制器分析指令的操作性质，控制器向有关部件发出指令所需的控制信号。\n3. 执行：控制器从通用寄存器或存储器取出操作数，控制器命令运算器对操作数进行指令规定的运算。\n4. 回写：将运算结果写入通用寄存器或存储器。\n\n![执行过程](https://raw.githubusercontent.com/thddaniel/Myblog/master/image/Computer%20Organization/%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\n\n\n\n#指令系统体系结构\n#算术逻辑单元\n#乘法器和除法器\n","slug":"计算机基本结构","date":1427722236000,"updated":1427722236000,"excerpt":"","_id":"s4hcz0cmu92ae52x","categories":[],"photos":[],"link":""}],"Tag":[{"name":"LaTex","_id":"ytmln53xjl3j7x8q","posts":["89jpkrg83am3gd7o"]},{"name":"sublime text","_id":"k963yjbkz05p2175","posts":["89jpkrg83am3gd7o","pd7umz551vkj35rv"]},{"name":"思维","_id":"kc2jcydjbl142gb7","posts":["gl8rb0jdtk99am30","g0nv1i4hqh44092e"]},{"name":"记忆力","_id":"t3lz5tehrs3o1vxs","posts":["gl8rb0jdtk99am30","g0nv1i4hqh44092e"]},{"name":"Open Courses","_id":"yr4rcx58k2nnzcid","posts":["gl8rb0jdtk99am30","wv9gryrq5y0gacjm","cod6qb41vh7othwn"]},{"name":"数据结构","_id":"norb35t4qgn9pk4t","posts":["4an433og3d81lsvq"]},{"name":"理财","_id":"a5cqkx67n4xaasq0","posts":["wv9gryrq5y0gacjm"]},{"name":"markdown","_id":"3nlrspohfs5r8bgx","posts":["8k12retplmg4y6l6"]},{"name":"hexo","_id":"8b3ok7wu7bjdeb2h","posts":["2274nti3xv8ujt4o"]},{"name":"git","_id":"jo5s27qsjbx7afo7","posts":["ay3nkqn23hln5yme","eqdih5iuy6jx62kp"]},{"name":"创业","_id":"dpry3ohoqk0k7p38","posts":["cod6qb41vh7othwn"]},{"name":"计算机原理","_id":"dbgpuof6xdacbx4g","posts":["s4hcz0cmu92ae52x"]}]}